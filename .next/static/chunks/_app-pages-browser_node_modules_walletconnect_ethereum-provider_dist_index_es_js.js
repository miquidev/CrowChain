"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_walletconnect_ethereum-provider_dist_index_es_js"],{

/***/ "(app-pages-browser)/./node_modules/@walletconnect/ethereum-provider/dist/index.es.js":
/*!************************************************************************!*\
  !*** ./node_modules/@walletconnect/ethereum-provider/dist/index.es.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EthereumProvider: function() { return /* binding */ z; },\n/* harmony export */   OPTIONAL_EVENTS: function() { return /* binding */ M; },\n/* harmony export */   OPTIONAL_METHODS: function() { return /* binding */ _; },\n/* harmony export */   REQUIRED_EVENTS: function() { return /* binding */ g; },\n/* harmony export */   REQUIRED_METHODS: function() { return /* binding */ u; },\n/* harmony export */   \"default\": function() { return /* binding */ C; }\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"(app-pages-browser)/./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/utils */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var _walletconnect_universal_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/universal-provider */ \"(app-pages-browser)/./node_modules/@walletconnect/universal-provider/dist/index.es.js\");\n\n\n\nconst T = \"wc\", S = \"ethereum_provider\", $ = \"\".concat(T, \"@2:\").concat(S, \":\"), j = \"https://rpc.walletconnect.com/v1/\", u = [\n    \"eth_sendTransaction\",\n    \"personal_sign\"\n], _ = [\n    \"eth_accounts\",\n    \"eth_requestAccounts\",\n    \"eth_sendRawTransaction\",\n    \"eth_sign\",\n    \"eth_signTransaction\",\n    \"eth_signTypedData\",\n    \"eth_signTypedData_v3\",\n    \"eth_signTypedData_v4\",\n    \"eth_sendTransaction\",\n    \"personal_sign\",\n    \"wallet_switchEthereumChain\",\n    \"wallet_addEthereumChain\",\n    \"wallet_getPermissions\",\n    \"wallet_requestPermissions\",\n    \"wallet_registerOnboarding\",\n    \"wallet_watchAsset\",\n    \"wallet_scanQRCode\"\n], g = [\n    \"chainChanged\",\n    \"accountsChanged\"\n], M = [\n    \"chainChanged\",\n    \"accountsChanged\",\n    \"message\",\n    \"disconnect\",\n    \"connect\"\n];\nvar q = Object.defineProperty, N = Object.defineProperties, D = Object.getOwnPropertyDescriptors, O = Object.getOwnPropertySymbols, U = Object.prototype.hasOwnProperty, Q = Object.prototype.propertyIsEnumerable, b = (a, t, s)=>t in a ? q(a, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: s\n    }) : a[t] = s, p = (a, t)=>{\n    for(var s in t || (t = {}))U.call(t, s) && b(a, s, t[s]);\n    if (O) for (var s of O(t))Q.call(t, s) && b(a, s, t[s]);\n    return a;\n}, E = (a, t)=>N(a, D(t));\nfunction m(a) {\n    return Number(a[0].split(\":\")[1]);\n}\nfunction v(a) {\n    return \"0x\".concat(a.toString(16));\n}\nfunction L(a) {\n    const { chains: t, optionalChains: s, methods: i, optionalMethods: n, events: e, optionalEvents: o, rpcMap: r } = a;\n    if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.isValidArray)(t)) throw new Error(\"Invalid chains\");\n    const c = {\n        chains: t,\n        methods: i || u,\n        events: e || g,\n        rpcMap: p({}, t.length ? {\n            [m(t)]: r[m(t)]\n        } : {})\n    }, h = e === null || e === void 0 ? void 0 : e.filter((l)=>!g.includes(l)), d = i === null || i === void 0 ? void 0 : i.filter((l)=>!u.includes(l));\n    if (!s && !o && !n && !(h != null && h.length) && !(d != null && d.length)) return {\n        required: t.length ? c : void 0\n    };\n    const I = (h === null || h === void 0 ? void 0 : h.length) && (d === null || d === void 0 ? void 0 : d.length) || !s, w = {\n        chains: [\n            ...new Set(I ? c.chains.concat(s || []) : s)\n        ],\n        methods: [\n            ...new Set(c.methods.concat(n != null && n.length ? n : _))\n        ],\n        events: [\n            ...new Set(c.events.concat(o != null && o.length ? o : M))\n        ],\n        rpcMap: r\n    };\n    return {\n        required: t.length ? c : void 0,\n        optional: s.length ? w : void 0\n    };\n}\n_c = L;\nclass C {\n    static async init(t) {\n        const s = new C;\n        return await s.initialize(t), s;\n    }\n    async request(t, s) {\n        return await this.signer.request(t, this.formatChainId(this.chainId), s);\n    }\n    sendAsync(t, s, i) {\n        this.signer.sendAsync(t, s, this.formatChainId(this.chainId), i);\n    }\n    get connected() {\n        return this.signer.client ? this.signer.client.core.relayer.connected : !1;\n    }\n    get connecting() {\n        return this.signer.client ? this.signer.client.core.relayer.connecting : !1;\n    }\n    async enable() {\n        return this.session || await this.connect(), await this.request({\n            method: \"eth_requestAccounts\"\n        });\n    }\n    async connect(t) {\n        if (!this.signer.client) throw new Error(\"Provider not initialized. Call init() first\");\n        this.loadConnectOpts(t);\n        const { required: s, optional: i } = L(this.rpc);\n        try {\n            const n = await new Promise(async (o, r)=>{\n                var c;\n                this.rpc.showQrModal && ((c = this.modal) == null || c.subscribeModal((h)=>{\n                    !h.open && !this.signer.session && (this.signer.abortPairingAttempt(), r(new Error(\"Connection request reset. Please try again.\")));\n                })), await this.signer.connect(E(p({\n                    namespaces: p({}, s && {\n                        [this.namespace]: s\n                    })\n                }, i && {\n                    optionalNamespaces: {\n                        [this.namespace]: i\n                    }\n                }), {\n                    pairingTopic: t === null || t === void 0 ? void 0 : t.pairingTopic\n                })).then((h)=>{\n                    o(h);\n                }).catch((h)=>{\n                    r(new Error(h.message));\n                });\n            });\n            if (!n) return;\n            const e = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.getAccountsFromNamespaces)(n.namespaces, [\n                this.namespace\n            ]);\n            this.setChainIds(this.rpc.chains.length ? this.rpc.chains : e), this.setAccounts(e), this.events.emit(\"connect\", {\n                chainId: v(this.chainId)\n            });\n        } catch (n) {\n            throw this.signer.logger.error(n), n;\n        } finally{\n            this.modal && this.modal.closeModal();\n        }\n    }\n    async authenticate(t) {\n        if (!this.signer.client) throw new Error(\"Provider not initialized. Call init() first\");\n        this.loadConnectOpts({\n            chains: t === null || t === void 0 ? void 0 : t.chains\n        });\n        try {\n            const s = await new Promise(async (n, e)=>{\n                var o;\n                this.rpc.showQrModal && ((o = this.modal) == null || o.subscribeModal((r)=>{\n                    !r.open && !this.signer.session && (this.signer.abortPairingAttempt(), e(new Error(\"Connection request reset. Please try again.\")));\n                })), await this.signer.authenticate(E(p({}, t), {\n                    chains: this.rpc.chains\n                })).then((r)=>{\n                    n(r);\n                }).catch((r)=>{\n                    e(new Error(r.message));\n                });\n            }), i = s.session;\n            if (i) {\n                const n = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.getAccountsFromNamespaces)(i.namespaces, [\n                    this.namespace\n                ]);\n                this.setChainIds(this.rpc.chains.length ? this.rpc.chains : n), this.setAccounts(n), this.events.emit(\"connect\", {\n                    chainId: v(this.chainId)\n                });\n            }\n            return s;\n        } catch (s) {\n            throw this.signer.logger.error(s), s;\n        } finally{\n            this.modal && this.modal.closeModal();\n        }\n    }\n    async disconnect() {\n        this.session && await this.signer.disconnect(), this.reset();\n    }\n    get isWalletConnect() {\n        return !0;\n    }\n    get session() {\n        return this.signer.session;\n    }\n    registerEventListeners() {\n        this.signer.on(\"session_event\", (t)=>{\n            const { params: s } = t, { event: i } = s;\n            i.name === \"accountsChanged\" ? (this.accounts = this.parseAccounts(i.data), this.events.emit(\"accountsChanged\", this.accounts)) : i.name === \"chainChanged\" ? this.setChainId(this.formatChainId(i.data)) : this.events.emit(i.name, i.data), this.events.emit(\"session_event\", t);\n        }), this.signer.on(\"chainChanged\", (t)=>{\n            const s = parseInt(t);\n            this.chainId = s, this.events.emit(\"chainChanged\", v(this.chainId)), this.persist();\n        }), this.signer.on(\"session_update\", (t)=>{\n            this.events.emit(\"session_update\", t);\n        }), this.signer.on(\"session_delete\", (t)=>{\n            this.reset(), this.events.emit(\"session_delete\", t), this.events.emit(\"disconnect\", E(p({}, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.getSdkError)(\"USER_DISCONNECTED\")), {\n                data: t.topic,\n                name: \"USER_DISCONNECTED\"\n            }));\n        }), this.signer.on(\"display_uri\", (t)=>{\n            var s, i;\n            this.rpc.showQrModal && ((s = this.modal) == null || s.closeModal(), (i = this.modal) == null || i.openModal({\n                uri: t\n            })), this.events.emit(\"display_uri\", t);\n        });\n    }\n    switchEthereumChain(t) {\n        this.request({\n            method: \"wallet_switchEthereumChain\",\n            params: [\n                {\n                    chainId: t.toString(16)\n                }\n            ]\n        });\n    }\n    isCompatibleChainId(t) {\n        return typeof t == \"string\" ? t.startsWith(\"\".concat(this.namespace, \":\")) : !1;\n    }\n    formatChainId(t) {\n        return \"\".concat(this.namespace, \":\").concat(t);\n    }\n    parseChainId(t) {\n        return Number(t.split(\":\")[1]);\n    }\n    setChainIds(t) {\n        const s = t.filter((i)=>this.isCompatibleChainId(i)).map((i)=>this.parseChainId(i));\n        s.length && (this.chainId = s[0], this.events.emit(\"chainChanged\", v(this.chainId)), this.persist());\n    }\n    setChainId(t) {\n        if (this.isCompatibleChainId(t)) {\n            const s = this.parseChainId(t);\n            this.chainId = s, this.switchEthereumChain(s);\n        }\n    }\n    parseAccountId(t) {\n        const [s, i, n] = t.split(\":\");\n        return {\n            chainId: \"\".concat(s, \":\").concat(i),\n            address: n\n        };\n    }\n    setAccounts(t) {\n        this.accounts = t.filter((s)=>this.parseChainId(this.parseAccountId(s).chainId) === this.chainId).map((s)=>this.parseAccountId(s).address), this.events.emit(\"accountsChanged\", this.accounts);\n    }\n    getRpcConfig(t) {\n        var s, i;\n        const n = (s = t === null || t === void 0 ? void 0 : t.chains) != null ? s : [], e = (i = t === null || t === void 0 ? void 0 : t.optionalChains) != null ? i : [], o = n.concat(e);\n        if (!o.length) throw new Error(\"No chains specified in either `chains` or `optionalChains`\");\n        const r = n.length ? (t === null || t === void 0 ? void 0 : t.methods) || u : [], c = n.length ? (t === null || t === void 0 ? void 0 : t.events) || g : [], h = (t === null || t === void 0 ? void 0 : t.optionalMethods) || [], d = (t === null || t === void 0 ? void 0 : t.optionalEvents) || [], I = (t === null || t === void 0 ? void 0 : t.rpcMap) || this.buildRpcMap(o, t.projectId), w = (t === null || t === void 0 ? void 0 : t.qrModalOptions) || void 0;\n        return {\n            chains: n === null || n === void 0 ? void 0 : n.map((l)=>this.formatChainId(l)),\n            optionalChains: e.map((l)=>this.formatChainId(l)),\n            methods: r,\n            events: c,\n            optionalMethods: h,\n            optionalEvents: d,\n            rpcMap: I,\n            showQrModal: !!(t != null && t.showQrModal),\n            qrModalOptions: w,\n            projectId: t.projectId,\n            metadata: t.metadata\n        };\n    }\n    buildRpcMap(t, s) {\n        const i = {};\n        return t.forEach((n)=>{\n            i[n] = this.getRpcUrl(n, s);\n        }), i;\n    }\n    async initialize(t) {\n        if (this.rpc = this.getRpcConfig(t), this.chainId = this.rpc.chains.length ? m(this.rpc.chains) : m(this.rpc.optionalChains), this.signer = await _walletconnect_universal_provider__WEBPACK_IMPORTED_MODULE_1__.UniversalProvider.init({\n            projectId: this.rpc.projectId,\n            metadata: this.rpc.metadata,\n            disableProviderPing: t.disableProviderPing,\n            relayUrl: t.relayUrl,\n            storageOptions: t.storageOptions\n        }), this.registerEventListeners(), await this.loadPersistedSession(), this.rpc.showQrModal) {\n            let s;\n            try {\n                const { WalletConnectModal: i } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_walletconnect_modal_dist_index_js\").then(__webpack_require__.bind(__webpack_require__, /*! @walletconnect/modal */ \"(app-pages-browser)/./node_modules/@walletconnect/modal/dist/index.js\"));\n                s = i;\n            } catch (e) {\n                throw new Error(\"To use QR modal, please install @walletconnect/modal package\");\n            }\n            if (s) try {\n                this.modal = new s(p({\n                    projectId: this.rpc.projectId\n                }, this.rpc.qrModalOptions));\n            } catch (i) {\n                throw this.signer.logger.error(i), new Error(\"Could not generate WalletConnectModal Instance\");\n            }\n        }\n    }\n    loadConnectOpts(t) {\n        if (!t) return;\n        const { chains: s, optionalChains: i, rpcMap: n } = t;\n        s && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.isValidArray)(s) && (this.rpc.chains = s.map((e)=>this.formatChainId(e)), s.forEach((e)=>{\n            this.rpc.rpcMap[e] = (n === null || n === void 0 ? void 0 : n[e]) || this.getRpcUrl(e);\n        })), i && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.isValidArray)(i) && (this.rpc.optionalChains = [], this.rpc.optionalChains = i === null || i === void 0 ? void 0 : i.map((e)=>this.formatChainId(e)), i.forEach((e)=>{\n            this.rpc.rpcMap[e] = (n === null || n === void 0 ? void 0 : n[e]) || this.getRpcUrl(e);\n        }));\n    }\n    getRpcUrl(t, s) {\n        var i;\n        return ((i = this.rpc.rpcMap) == null ? void 0 : i[t]) || \"\".concat(j, \"?chainId=eip155:\").concat(t, \"&projectId=\").concat(s || this.rpc.projectId);\n    }\n    async loadPersistedSession() {\n        if (this.session) try {\n            const t = await this.signer.client.core.storage.getItem(\"\".concat(this.STORAGE_KEY, \"/chainId\")), s = this.session.namespaces[\"\".concat(this.namespace, \":\").concat(t)] ? this.session.namespaces[\"\".concat(this.namespace, \":\").concat(t)] : this.session.namespaces[this.namespace];\n            this.setChainIds(t ? [\n                this.formatChainId(t)\n            ] : s === null || s === void 0 ? void 0 : s.accounts), this.setAccounts(s === null || s === void 0 ? void 0 : s.accounts);\n        } catch (t) {\n            this.signer.logger.error(\"Failed to load persisted session, clearing state...\"), this.signer.logger.error(t), await this.disconnect().catch((s)=>this.signer.logger.warn(s));\n        }\n    }\n    reset() {\n        this.chainId = 1, this.accounts = [];\n    }\n    persist() {\n        this.session && this.signer.client.core.storage.setItem(\"\".concat(this.STORAGE_KEY, \"/chainId\"), this.chainId);\n    }\n    parseAccounts(t) {\n        return typeof t == \"string\" || t instanceof String ? [\n            this.parseAccount(t)\n        ] : t.map((s)=>this.parseAccount(s));\n    }\n    constructor(){\n        this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.namespace = \"eip155\", this.accounts = [], this.chainId = 1, this.STORAGE_KEY = $, this.on = (t, s)=>(this.events.on(t, s), this), this.once = (t, s)=>(this.events.once(t, s), this), this.removeListener = (t, s)=>(this.events.removeListener(t, s), this), this.off = (t, s)=>(this.events.off(t, s), this), this.parseAccount = (t)=>this.isCompatibleChainId(t) ? this.parseAccountId(t).address : t, this.signer = {}, this.rpc = {};\n    }\n}\nconst z = C;\n //# sourceMappingURL=index.es.js.map\nvar _c;\n$RefreshReg$(_c, \"L\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/ethereum-provider/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-http-connection/dist/index.es.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-http-connection/dist/index.es.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpConnection: function() { return /* binding */ f; },\n/* harmony export */   \"default\": function() { return /* binding */ f; }\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"(app-pages-browser)/./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cross-fetch */ \"(app-pages-browser)/./node_modules/cross-fetch/dist/browser-ponyfill.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/safe-json */ \"(app-pages-browser)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n\n\n\n\nvar P = Object.defineProperty, w = Object.defineProperties, E = Object.getOwnPropertyDescriptors, c = Object.getOwnPropertySymbols, L = Object.prototype.hasOwnProperty, O = Object.prototype.propertyIsEnumerable, l = (r, t, e)=>t in r ? P(r, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : r[t] = e, p = (r, t)=>{\n    for(var e in t || (t = {}))L.call(t, e) && l(r, e, t[e]);\n    if (c) for (var e of c(t))O.call(t, e) && l(r, e, t[e]);\n    return r;\n}, v = (r, t)=>w(r, E(t));\nconst j = {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\"\n}, T = \"POST\", d = {\n    headers: j,\n    method: T\n}, g = 10;\nclass f {\n    get connected() {\n        return this.isAvailable;\n    }\n    get connecting() {\n        return this.registering;\n    }\n    on(t, e) {\n        this.events.on(t, e);\n    }\n    once(t, e) {\n        this.events.once(t, e);\n    }\n    off(t, e) {\n        this.events.off(t, e);\n    }\n    removeListener(t, e) {\n        this.events.removeListener(t, e);\n    }\n    async open() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.url;\n        await this.register(t);\n    }\n    async close() {\n        if (!this.isAvailable) throw new Error(\"Connection already closed\");\n        this.onClose();\n    }\n    async send(t) {\n        this.isAvailable || await this.register();\n        try {\n            const e = (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_2__.safeJsonStringify)(t), s = await (await cross_fetch__WEBPACK_IMPORTED_MODULE_1___default()(this.url, v(p({}, d), {\n                body: e\n            }))).json();\n            this.onPayload({\n                data: s\n            });\n        } catch (e) {\n            this.onError(t.id, e);\n        }\n    }\n    async register() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.url;\n        if (!(0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isHttpUrl)(t)) throw new Error(\"Provided URL is not compatible with HTTP connection: \".concat(t));\n        if (this.registering) {\n            const e = this.events.getMaxListeners();\n            return (this.events.listenerCount(\"register_error\") >= e || this.events.listenerCount(\"open\") >= e) && this.events.setMaxListeners(e + 1), new Promise((s, i)=>{\n                this.events.once(\"register_error\", (n)=>{\n                    this.resetMaxListeners(), i(n);\n                }), this.events.once(\"open\", ()=>{\n                    if (this.resetMaxListeners(), typeof this.isAvailable > \"u\") return i(new Error(\"HTTP connection is missing or invalid\"));\n                    s();\n                });\n            });\n        }\n        this.url = t, this.registering = !0;\n        try {\n            if (!this.disableProviderPing) {\n                const e = (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_2__.safeJsonStringify)({\n                    id: 1,\n                    jsonrpc: \"2.0\",\n                    method: \"test\",\n                    params: []\n                });\n                await cross_fetch__WEBPACK_IMPORTED_MODULE_1___default()(t, v(p({}, d), {\n                    body: e\n                }));\n            }\n            this.onOpen();\n        } catch (e) {\n            const s = this.parseError(e);\n            throw this.events.emit(\"register_error\", s), this.onClose(), s;\n        }\n    }\n    onOpen() {\n        this.isAvailable = !0, this.registering = !1, this.events.emit(\"open\");\n    }\n    onClose() {\n        this.isAvailable = !1, this.registering = !1, this.events.emit(\"close\");\n    }\n    onPayload(t) {\n        if (typeof t.data > \"u\") return;\n        const e = typeof t.data == \"string\" ? (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_2__.safeJsonParse)(t.data) : t.data;\n        this.events.emit(\"payload\", e);\n    }\n    onError(t, e) {\n        const s = this.parseError(e), i = s.message || s.toString(), n = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcError)(t, i);\n        this.events.emit(\"payload\", n);\n    }\n    parseError(t) {\n        let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.url;\n        return (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.parseConnectionError)(t, e, \"HTTP\");\n    }\n    resetMaxListeners() {\n        this.events.getMaxListeners() > g && this.events.setMaxListeners(g);\n    }\n    constructor(t, e = !1){\n        if (this.url = t, this.disableProviderPing = e, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.isAvailable = !1, this.registering = !1, !(0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isHttpUrl)(t)) throw new Error(\"Provided URL is not compatible with HTTP connection: \".concat(t));\n        this.url = t, this.disableProviderPing = e;\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-http-connection/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-provider/dist/esm/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-provider/dist/esm/index.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonRpcProvider: function() { return /* reexport safe */ _provider__WEBPACK_IMPORTED_MODULE_0__.JsonRpcProvider; }\n/* harmony export */ });\n/* harmony import */ var _provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./provider */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-provider/dist/esm/provider.js\");\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (_provider__WEBPACK_IMPORTED_MODULE_0__[\"default\"]); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXByb3ZpZGVyL2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWtDO0FBQ1A7QUFDM0IsK0RBQWVBLGlEQUFRQSxFQUFDLENBQ3hCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy1wcm92aWRlci9kaXN0L2VzbS9pbmRleC5qcz84YWM3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm92aWRlciBmcm9tIFwiLi9wcm92aWRlclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vcHJvdmlkZXJcIjtcbmV4cG9ydCBkZWZhdWx0IFByb3ZpZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIlByb3ZpZGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-provider/dist/esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-provider/dist/esm/provider.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-provider/dist/esm/provider.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonRpcProvider: function() { return /* binding */ JsonRpcProvider; }\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"(app-pages-browser)/./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n\n\nclass JsonRpcProvider extends _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__.IJsonRpcProvider {\n    async connect() {\n        let connection = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.connection;\n        await this.open(connection);\n    }\n    async disconnect() {\n        await this.close();\n    }\n    on(event, listener) {\n        this.events.on(event, listener);\n    }\n    once(event, listener) {\n        this.events.once(event, listener);\n    }\n    off(event, listener) {\n        this.events.off(event, listener);\n    }\n    removeListener(event, listener) {\n        this.events.removeListener(event, listener);\n    }\n    async request(request, context) {\n        return this.requestStrict((0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__.formatJsonRpcRequest)(request.method, request.params || [], request.id || (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__.getBigIntRpcId)().toString()), context);\n    }\n    async requestStrict(request, context) {\n        return new Promise(async (resolve, reject)=>{\n            if (!this.connection.connected) {\n                try {\n                    await this.open();\n                } catch (e) {\n                    reject(e);\n                }\n            }\n            this.events.on(\"\".concat(request.id), (response)=>{\n                if ((0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__.isJsonRpcError)(response)) {\n                    reject(response.error);\n                } else {\n                    resolve(response.result);\n                }\n            });\n            try {\n                await this.connection.send(request, context);\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n    setConnection() {\n        let connection = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.connection;\n        return connection;\n    }\n    onPayload(payload) {\n        this.events.emit(\"payload\", payload);\n        if ((0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__.isJsonRpcResponse)(payload)) {\n            this.events.emit(\"\".concat(payload.id), payload);\n        } else {\n            this.events.emit(\"message\", {\n                type: payload.method,\n                data: payload.params\n            });\n        }\n    }\n    onClose(event) {\n        if (event && event.code === 3000) {\n            this.events.emit(\"error\", new Error(\"WebSocket connection closed abnormally with code: \".concat(event.code, \" \").concat(event.reason ? \"(\".concat(event.reason, \")\") : \"\")));\n        }\n        this.events.emit(\"disconnect\");\n    }\n    async open() {\n        let connection = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.connection;\n        if (this.connection === connection && this.connection.connected) return;\n        if (this.connection.connected) this.close();\n        if (typeof connection === \"string\") {\n            await this.connection.open(connection);\n            connection = this.connection;\n        }\n        this.connection = this.setConnection(connection);\n        await this.connection.open();\n        this.registerEventListeners();\n        this.events.emit(\"connect\");\n    }\n    async close() {\n        await this.connection.close();\n    }\n    registerEventListeners() {\n        if (this.hasRegisteredEventListeners) return;\n        this.connection.on(\"payload\", (payload)=>this.onPayload(payload));\n        this.connection.on(\"close\", (event)=>this.onClose(event));\n        this.connection.on(\"error\", (error)=>this.events.emit(\"error\", error));\n        this.connection.on(\"register_error\", (error)=>this.onClose());\n        this.hasRegisteredEventListeners = true;\n    }\n    constructor(connection){\n        super(connection);\n        this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();\n        this.hasRegisteredEventListeners = false;\n        this.connection = this.setConnection(connection);\n        if (this.connection.connected) {\n            this.registerEventListeners();\n        }\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (JsonRpcProvider); //# sourceMappingURL=provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-provider/dist/esm/provider.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/types/dist/index.es.js":
/*!************************************************************!*\
  !*** ./node_modules/@walletconnect/types/dist/index.es.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ICore: function() { return /* binding */ n; },\n/* harmony export */   ICrypto: function() { return /* binding */ l; },\n/* harmony export */   IEchoClient: function() { return /* binding */ v; },\n/* harmony export */   IEngine: function() { return /* binding */ w; },\n/* harmony export */   IEngineEvents: function() { return /* binding */ S; },\n/* harmony export */   IExpirer: function() { return /* binding */ E; },\n/* harmony export */   IJsonRpcHistory: function() { return /* binding */ h; },\n/* harmony export */   IKeyChain: function() { return /* binding */ x; },\n/* harmony export */   IMessageTracker: function() { return /* binding */ a; },\n/* harmony export */   IPairing: function() { return /* binding */ m; },\n/* harmony export */   IPublisher: function() { return /* binding */ u; },\n/* harmony export */   IRelayer: function() { return /* binding */ g; },\n/* harmony export */   ISignClient: function() { return /* binding */ b; },\n/* harmony export */   ISignClientEvents: function() { return /* binding */ C; },\n/* harmony export */   IStore: function() { return /* binding */ p; },\n/* harmony export */   ISubscriber: function() { return /* binding */ d; },\n/* harmony export */   ISubscriberTopicMap: function() { return /* binding */ I; },\n/* harmony export */   IVerify: function() { return /* binding */ y; }\n/* harmony export */ });\n/* harmony import */ var _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/events */ \"(app-pages-browser)/./node_modules/@walletconnect/events/dist/esm/index.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! events */ \"(app-pages-browser)/./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_1__);\n\n\nclass n extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s){\n        super(), this.opts = s, this.protocol = \"wc\", this.version = 2;\n    }\n}\nclass l {\n    constructor(s, t, o){\n        this.core = s, this.logger = t;\n    }\n}\nclass h extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s, t){\n        super(), this.core = s, this.logger = t, this.records = new Map;\n    }\n}\nclass a {\n    constructor(s, t){\n        this.logger = s, this.core = t;\n    }\n}\nclass u extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s, t){\n        super(), this.relayer = s, this.logger = t;\n    }\n}\nclass g extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s){\n        super();\n    }\n}\nclass p {\n    constructor(s, t, o, M){\n        this.core = s, this.logger = t, this.name = o;\n    }\n}\nclass I {\n    constructor(){\n        this.map = new Map;\n    }\n}\nclass d extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s, t){\n        super(), this.relayer = s, this.logger = t;\n    }\n}\nclass x {\n    constructor(s, t){\n        this.core = s, this.logger = t;\n    }\n}\nclass E extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s, t){\n        super(), this.core = s, this.logger = t;\n    }\n}\nclass m {\n    constructor(s, t){\n        this.logger = s, this.core = t;\n    }\n}\nclass y {\n    constructor(s, t){\n        this.projectId = s, this.logger = t;\n    }\n}\nclass v {\n    constructor(s, t){\n        this.projectId = s, this.logger = t;\n    }\n}\nclass C extends (events__WEBPACK_IMPORTED_MODULE_1___default()) {\n    constructor(){\n        super();\n    }\n}\nclass b {\n    constructor(s){\n        this.opts = s, this.protocol = \"wc\", this.version = 2;\n    }\n}\nclass S extends events__WEBPACK_IMPORTED_MODULE_1__.EventEmitter {\n    constructor(){\n        super();\n    }\n}\nclass w {\n    constructor(s){\n        this.client = s;\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC90eXBlcy9kaXN0L2luZGV4LmVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFnRDtBQUF5QztBQUFBLE1BQU1LLFVBQVVKLDBEQUFDQTtJQUFDSyxZQUFZQyxDQUFDLENBQUM7UUFBQyxLQUFLLElBQUcsSUFBSSxDQUFDQyxJQUFJLEdBQUNELEdBQUUsSUFBSSxDQUFDRSxRQUFRLEdBQUMsTUFBSyxJQUFJLENBQUNDLE9BQU8sR0FBQztJQUFDO0FBQUM7QUFBQyxNQUFNQztJQUFFTCxZQUFZQyxDQUFDLEVBQUNLLENBQUMsRUFBQ0MsQ0FBQyxDQUFDO1FBQUMsSUFBSSxDQUFDQyxJQUFJLEdBQUNQLEdBQUUsSUFBSSxDQUFDUSxNQUFNLEdBQUNIO0lBQUM7QUFBQztBQUFDLE1BQU1JLFVBQVVmLDBEQUFDQTtJQUFDSyxZQUFZQyxDQUFDLEVBQUNLLENBQUMsQ0FBQztRQUFDLEtBQUssSUFBRyxJQUFJLENBQUNFLElBQUksR0FBQ1AsR0FBRSxJQUFJLENBQUNRLE1BQU0sR0FBQ0gsR0FBRSxJQUFJLENBQUNLLE9BQU8sR0FBQyxJQUFJQztJQUFHO0FBQUM7QUFBQyxNQUFNQztJQUFFYixZQUFZQyxDQUFDLEVBQUNLLENBQUMsQ0FBQztRQUFDLElBQUksQ0FBQ0csTUFBTSxHQUFDUixHQUFFLElBQUksQ0FBQ08sSUFBSSxHQUFDRjtJQUFDO0FBQUM7QUFBQyxNQUFNUSxVQUFVbkIsMERBQUNBO0lBQUNLLFlBQVlDLENBQUMsRUFBQ0ssQ0FBQyxDQUFDO1FBQUMsS0FBSyxJQUFHLElBQUksQ0FBQ1MsT0FBTyxHQUFDZCxHQUFFLElBQUksQ0FBQ1EsTUFBTSxHQUFDSDtJQUFDO0FBQUM7QUFBQyxNQUFNVSxVQUFVckIsMERBQUNBO0lBQUNLLFlBQVlDLENBQUMsQ0FBQztRQUFDLEtBQUs7SUFBRTtBQUFDO0FBQUMsTUFBTWdCO0lBQUVqQixZQUFZQyxDQUFDLEVBQUNLLENBQUMsRUFBQ0MsQ0FBQyxFQUFDVyxDQUFDLENBQUM7UUFBQyxJQUFJLENBQUNWLElBQUksR0FBQ1AsR0FBRSxJQUFJLENBQUNRLE1BQU0sR0FBQ0gsR0FBRSxJQUFJLENBQUNhLElBQUksR0FBQ1o7SUFBQztBQUFDO0FBQUMsTUFBTWE7SUFBRXBCLGFBQWE7UUFBQyxJQUFJLENBQUNxQixHQUFHLEdBQUMsSUFBSVQ7SUFBRztBQUFDO0FBQUMsTUFBTVUsVUFBVTNCLDBEQUFDQTtJQUFDSyxZQUFZQyxDQUFDLEVBQUNLLENBQUMsQ0FBQztRQUFDLEtBQUssSUFBRyxJQUFJLENBQUNTLE9BQU8sR0FBQ2QsR0FBRSxJQUFJLENBQUNRLE1BQU0sR0FBQ0g7SUFBQztBQUFDO0FBQUMsTUFBTWlCO0lBQUV2QixZQUFZQyxDQUFDLEVBQUNLLENBQUMsQ0FBQztRQUFDLElBQUksQ0FBQ0UsSUFBSSxHQUFDUCxHQUFFLElBQUksQ0FBQ1EsTUFBTSxHQUFDSDtJQUFDO0FBQUM7QUFBQyxNQUFNa0IsVUFBVTdCLDBEQUFDQTtJQUFDSyxZQUFZQyxDQUFDLEVBQUNLLENBQUMsQ0FBQztRQUFDLEtBQUssSUFBRyxJQUFJLENBQUNFLElBQUksR0FBQ1AsR0FBRSxJQUFJLENBQUNRLE1BQU0sR0FBQ0g7SUFBQztBQUFDO0FBQUMsTUFBTW1CO0lBQUV6QixZQUFZQyxDQUFDLEVBQUNLLENBQUMsQ0FBQztRQUFDLElBQUksQ0FBQ0csTUFBTSxHQUFDUixHQUFFLElBQUksQ0FBQ08sSUFBSSxHQUFDRjtJQUFDO0FBQUM7QUFBQyxNQUFNb0I7SUFBRTFCLFlBQVlDLENBQUMsRUFBQ0ssQ0FBQyxDQUFDO1FBQUMsSUFBSSxDQUFDcUIsU0FBUyxHQUFDMUIsR0FBRSxJQUFJLENBQUNRLE1BQU0sR0FBQ0g7SUFBQztBQUFDO0FBQUMsTUFBTXNCO0lBQUU1QixZQUFZQyxDQUFDLEVBQUNLLENBQUMsQ0FBQztRQUFDLElBQUksQ0FBQ3FCLFNBQVMsR0FBQzFCLEdBQUUsSUFBSSxDQUFDUSxNQUFNLEdBQUNIO0lBQUM7QUFBQztBQUFDLE1BQU11QixVQUFVakMsK0NBQUNBO0lBQUNJLGFBQWE7UUFBQyxLQUFLO0lBQUU7QUFBQztBQUFDLE1BQU04QjtJQUFFOUIsWUFBWUMsQ0FBQyxDQUFDO1FBQUMsSUFBSSxDQUFDQyxJQUFJLEdBQUNELEdBQUUsSUFBSSxDQUFDRSxRQUFRLEdBQUMsTUFBSyxJQUFJLENBQUNDLE9BQU8sR0FBQztJQUFDO0FBQUM7QUFBQyxNQUFNMkIsVUFBVWpDLGdEQUFDQTtJQUFDRSxhQUFhO1FBQUMsS0FBSztJQUFFO0FBQUM7QUFBQyxNQUFNZ0M7SUFBRWhDLFlBQVlDLENBQUMsQ0FBQztRQUFDLElBQUksQ0FBQ2dDLE1BQU0sR0FBQ2hDO0lBQUM7QUFBQztBQUFnVCxDQUMzNkMsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC90eXBlcy9kaXN0L2luZGV4LmVzLmpzPzYwYTQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0e0lFdmVudHMgYXMgZX1mcm9tXCJAd2FsbGV0Y29ubmVjdC9ldmVudHNcIjtpbXBvcnQgYyx7RXZlbnRFbWl0dGVyIGFzIGl9ZnJvbVwiZXZlbnRzXCI7Y2xhc3MgbiBleHRlbmRzIGV7Y29uc3RydWN0b3Iocyl7c3VwZXIoKSx0aGlzLm9wdHM9cyx0aGlzLnByb3RvY29sPVwid2NcIix0aGlzLnZlcnNpb249Mn19Y2xhc3MgbHtjb25zdHJ1Y3RvcihzLHQsbyl7dGhpcy5jb3JlPXMsdGhpcy5sb2dnZXI9dH19Y2xhc3MgaCBleHRlbmRzIGV7Y29uc3RydWN0b3Iocyx0KXtzdXBlcigpLHRoaXMuY29yZT1zLHRoaXMubG9nZ2VyPXQsdGhpcy5yZWNvcmRzPW5ldyBNYXB9fWNsYXNzIGF7Y29uc3RydWN0b3Iocyx0KXt0aGlzLmxvZ2dlcj1zLHRoaXMuY29yZT10fX1jbGFzcyB1IGV4dGVuZHMgZXtjb25zdHJ1Y3RvcihzLHQpe3N1cGVyKCksdGhpcy5yZWxheWVyPXMsdGhpcy5sb2dnZXI9dH19Y2xhc3MgZyBleHRlbmRzIGV7Y29uc3RydWN0b3Iocyl7c3VwZXIoKX19Y2xhc3MgcHtjb25zdHJ1Y3RvcihzLHQsbyxNKXt0aGlzLmNvcmU9cyx0aGlzLmxvZ2dlcj10LHRoaXMubmFtZT1vfX1jbGFzcyBJe2NvbnN0cnVjdG9yKCl7dGhpcy5tYXA9bmV3IE1hcH19Y2xhc3MgZCBleHRlbmRzIGV7Y29uc3RydWN0b3Iocyx0KXtzdXBlcigpLHRoaXMucmVsYXllcj1zLHRoaXMubG9nZ2VyPXR9fWNsYXNzIHh7Y29uc3RydWN0b3Iocyx0KXt0aGlzLmNvcmU9cyx0aGlzLmxvZ2dlcj10fX1jbGFzcyBFIGV4dGVuZHMgZXtjb25zdHJ1Y3RvcihzLHQpe3N1cGVyKCksdGhpcy5jb3JlPXMsdGhpcy5sb2dnZXI9dH19Y2xhc3MgbXtjb25zdHJ1Y3RvcihzLHQpe3RoaXMubG9nZ2VyPXMsdGhpcy5jb3JlPXR9fWNsYXNzIHl7Y29uc3RydWN0b3Iocyx0KXt0aGlzLnByb2plY3RJZD1zLHRoaXMubG9nZ2VyPXR9fWNsYXNzIHZ7Y29uc3RydWN0b3Iocyx0KXt0aGlzLnByb2plY3RJZD1zLHRoaXMubG9nZ2VyPXR9fWNsYXNzIEMgZXh0ZW5kcyBje2NvbnN0cnVjdG9yKCl7c3VwZXIoKX19Y2xhc3MgYntjb25zdHJ1Y3RvcihzKXt0aGlzLm9wdHM9cyx0aGlzLnByb3RvY29sPVwid2NcIix0aGlzLnZlcnNpb249Mn19Y2xhc3MgUyBleHRlbmRzIGl7Y29uc3RydWN0b3IoKXtzdXBlcigpfX1jbGFzcyB3e2NvbnN0cnVjdG9yKHMpe3RoaXMuY2xpZW50PXN9fWV4cG9ydHtuIGFzIElDb3JlLGwgYXMgSUNyeXB0byx2IGFzIElFY2hvQ2xpZW50LHcgYXMgSUVuZ2luZSxTIGFzIElFbmdpbmVFdmVudHMsRSBhcyBJRXhwaXJlcixoIGFzIElKc29uUnBjSGlzdG9yeSx4IGFzIElLZXlDaGFpbixhIGFzIElNZXNzYWdlVHJhY2tlcixtIGFzIElQYWlyaW5nLHUgYXMgSVB1Ymxpc2hlcixnIGFzIElSZWxheWVyLGIgYXMgSVNpZ25DbGllbnQsQyBhcyBJU2lnbkNsaWVudEV2ZW50cyxwIGFzIElTdG9yZSxkIGFzIElTdWJzY3JpYmVyLEkgYXMgSVN1YnNjcmliZXJUb3BpY01hcCx5IGFzIElWZXJpZnl9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXMuanMubWFwXG4iXSwibmFtZXMiOlsiSUV2ZW50cyIsImUiLCJjIiwiRXZlbnRFbWl0dGVyIiwiaSIsIm4iLCJjb25zdHJ1Y3RvciIsInMiLCJvcHRzIiwicHJvdG9jb2wiLCJ2ZXJzaW9uIiwibCIsInQiLCJvIiwiY29yZSIsImxvZ2dlciIsImgiLCJyZWNvcmRzIiwiTWFwIiwiYSIsInUiLCJyZWxheWVyIiwiZyIsInAiLCJNIiwibmFtZSIsIkkiLCJtYXAiLCJkIiwieCIsIkUiLCJtIiwieSIsInByb2plY3RJZCIsInYiLCJDIiwiYiIsIlMiLCJ3IiwiY2xpZW50IiwiSUNvcmUiLCJJQ3J5cHRvIiwiSUVjaG9DbGllbnQiLCJJRW5naW5lIiwiSUVuZ2luZUV2ZW50cyIsIklFeHBpcmVyIiwiSUpzb25ScGNIaXN0b3J5IiwiSUtleUNoYWluIiwiSU1lc3NhZ2VUcmFja2VyIiwiSVBhaXJpbmciLCJJUHVibGlzaGVyIiwiSVJlbGF5ZXIiLCJJU2lnbkNsaWVudCIsIklTaWduQ2xpZW50RXZlbnRzIiwiSVN0b3JlIiwiSVN1YnNjcmliZXIiLCJJU3Vic2NyaWJlclRvcGljTWFwIiwiSVZlcmlmeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/types/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/universal-provider/dist/index.es.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@walletconnect/universal-provider/dist/index.es.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UniversalProvider: function() { return /* binding */ hv; },\n/* harmony export */   \"default\": function() { return /* binding */ lr; }\n/* harmony export */ });\n/* harmony import */ var _walletconnect_sign_client__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @walletconnect/sign-client */ \"(app-pages-browser)/./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/sign-client/dist/index.es.js\");\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @walletconnect/utils */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var _walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/logger */ \"(app-pages-browser)/./node_modules/@walletconnect/logger/dist/index.es.js\");\n/* harmony import */ var _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/jsonrpc-http-connection */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-http-connection/dist/index.es.js\");\n/* harmony import */ var _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/jsonrpc-provider */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-provider/dist/esm/index.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! events */ \"(app-pages-browser)/./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n\n\n\n\n\n\n\nconst xa = \"error\", Mg = \"wss://relay.walletconnect.com\", qg = \"wc\", Bg = \"universal_provider\", Ea = \"\".concat(qg, \"@2:\").concat(Bg, \":\"), Gg = \"https://rpc.walletconnect.com/v1/\", Vn = {\n    DEFAULT_CHAIN_CHANGED: \"default_chain_changed\"\n};\nvar ge = typeof globalThis < \"u\" ? globalThis :  true ? window : 0, Ui = {\n    exports: {}\n}; /**\n * @license\n * Lodash <https://lodash.com/>\n * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */ \n(function(A, u) {\n    (function() {\n        var i, p = \"4.17.21\", w = 200, b = \"Unsupported core-js use. Try https://npms.io/search?q=ponyfill.\", D = \"Expected a function\", En = \"Invalid `variable` option passed into `_.template`\", zt = \"__lodash_hash_undefined__\", pr = 500, It = \"__lodash_placeholder__\", Ln = 1, Fn = 2, xt = 4, Et = 1, ve = 2, vn = 1, ct = 2, Bi = 4, Dn = 8, yt = 16, Nn = 32, St = 64, Mn = 128, Kt = 256, dr = 512, Na = 30, Ha = \"...\", $a = 800, Ua = 16, Gi = 1, Wa = 2, Fa = 3, ht = 1 / 0, kn = 9007199254740991, Ma = 17976931348623157e292, _e = 0 / 0, Hn = 4294967295, qa = Hn - 1, Ba = Hn >>> 1, Ga = [\n            [\n                \"ary\",\n                Mn\n            ],\n            [\n                \"bind\",\n                vn\n            ],\n            [\n                \"bindKey\",\n                ct\n            ],\n            [\n                \"curry\",\n                Dn\n            ],\n            [\n                \"curryRight\",\n                yt\n            ],\n            [\n                \"flip\",\n                dr\n            ],\n            [\n                \"partial\",\n                Nn\n            ],\n            [\n                \"partialRight\",\n                St\n            ],\n            [\n                \"rearg\",\n                Kt\n            ]\n        ], Ot = \"[object Arguments]\", me = \"[object Array]\", za = \"[object AsyncFunction]\", Yt = \"[object Boolean]\", Zt = \"[object Date]\", Ka = \"[object DOMException]\", we = \"[object Error]\", Pe = \"[object Function]\", zi = \"[object GeneratorFunction]\", yn = \"[object Map]\", Jt = \"[object Number]\", Ya = \"[object Null]\", qn = \"[object Object]\", Ki = \"[object Promise]\", Za = \"[object Proxy]\", Xt = \"[object RegExp]\", Sn = \"[object Set]\", Qt = \"[object String]\", Ae = \"[object Symbol]\", Ja = \"[object Undefined]\", Vt = \"[object WeakMap]\", Xa = \"[object WeakSet]\", kt = \"[object ArrayBuffer]\", Rt = \"[object DataView]\", gr = \"[object Float32Array]\", vr = \"[object Float64Array]\", _r = \"[object Int8Array]\", mr = \"[object Int16Array]\", wr = \"[object Int32Array]\", Pr = \"[object Uint8Array]\", Ar = \"[object Uint8ClampedArray]\", Cr = \"[object Uint16Array]\", Ir = \"[object Uint32Array]\", Qa = /\\b__p \\+= '';/g, Va = /\\b(__p \\+=) '' \\+/g, ka = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g, Yi = /&(?:amp|lt|gt|quot|#39);/g, Zi = /[&<>\"']/g, ja = RegExp(Yi.source), no = RegExp(Zi.source), to = /<%-([\\s\\S]+?)%>/g, eo = /<%([\\s\\S]+?)%>/g, Ji = /<%=([\\s\\S]+?)%>/g, ro = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/, io = /^\\w*$/, so = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g, xr = /[\\\\^$.*+?()[\\]{}|]/g, uo = RegExp(xr.source), Er = /^\\s+/, ao = /\\s/, oo = /\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/, fo = /\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/, co = /,? & /, ho = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g, lo = /[()=,{}\\[\\]\\/\\s]/, po = /\\\\(\\\\)?/g, go = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g, Xi = /\\w*$/, vo = /^[-+]0x[0-9a-f]+$/i, _o = /^0b[01]+$/i, mo = /^\\[object .+?Constructor\\]$/, wo = /^0o[0-7]+$/i, Po = /^(?:0|[1-9]\\d*)$/, Ao = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g, Ce = /($^)/, Co = /['\\n\\r\\u2028\\u2029\\\\]/g, Ie = \"\\ud800-\\udfff\", Io = \"\\\\u0300-\\\\u036f\", xo = \"\\\\ufe20-\\\\ufe2f\", Eo = \"\\\\u20d0-\\\\u20ff\", Qi = Io + xo + Eo, Vi = \"\\\\u2700-\\\\u27bf\", ki = \"a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff\", yo = \"\\\\xac\\\\xb1\\\\xd7\\\\xf7\", So = \"\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf\", Oo = \"\\\\u2000-\\\\u206f\", Ro = \" \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000\", ji = \"A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde\", ns = \"\\\\ufe0e\\\\ufe0f\", ts = yo + So + Oo + Ro, yr = \"['’]\", bo = \"[\" + Ie + \"]\", es = \"[\" + ts + \"]\", xe = \"[\" + Qi + \"]\", rs = \"\\\\d+\", To = \"[\" + Vi + \"]\", is = \"[\" + ki + \"]\", ss = \"[^\" + Ie + ts + rs + Vi + ki + ji + \"]\", Sr = \"\\ud83c[\\udffb-\\udfff]\", Lo = \"(?:\" + xe + \"|\" + Sr + \")\", us = \"[^\" + Ie + \"]\", Or = \"(?:\\ud83c[\\udde6-\\uddff]){2}\", Rr = \"[\\ud800-\\udbff][\\udc00-\\udfff]\", bt = \"[\" + ji + \"]\", as = \"\\\\u200d\", os = \"(?:\" + is + \"|\" + ss + \")\", Do = \"(?:\" + bt + \"|\" + ss + \")\", fs = \"(?:\" + yr + \"(?:d|ll|m|re|s|t|ve))?\", cs = \"(?:\" + yr + \"(?:D|LL|M|RE|S|T|VE))?\", hs = Lo + \"?\", ls = \"[\" + ns + \"]?\", No = \"(?:\" + as + \"(?:\" + [\n            us,\n            Or,\n            Rr\n        ].join(\"|\") + \")\" + ls + hs + \")*\", Ho = \"\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])\", $o = \"\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])\", ps = ls + hs + No, Uo = \"(?:\" + [\n            To,\n            Or,\n            Rr\n        ].join(\"|\") + \")\" + ps, Wo = \"(?:\" + [\n            us + xe + \"?\",\n            xe,\n            Or,\n            Rr,\n            bo\n        ].join(\"|\") + \")\", Fo = RegExp(yr, \"g\"), Mo = RegExp(xe, \"g\"), br = RegExp(Sr + \"(?=\" + Sr + \")|\" + Wo + ps, \"g\"), qo = RegExp([\n            bt + \"?\" + is + \"+\" + fs + \"(?=\" + [\n                es,\n                bt,\n                \"$\"\n            ].join(\"|\") + \")\",\n            Do + \"+\" + cs + \"(?=\" + [\n                es,\n                bt + os,\n                \"$\"\n            ].join(\"|\") + \")\",\n            bt + \"?\" + os + \"+\" + fs,\n            bt + \"+\" + cs,\n            $o,\n            Ho,\n            rs,\n            Uo\n        ].join(\"|\"), \"g\"), Bo = RegExp(\"[\" + as + Ie + Qi + ns + \"]\"), Go = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/, zo = [\n            \"Array\",\n            \"Buffer\",\n            \"DataView\",\n            \"Date\",\n            \"Error\",\n            \"Float32Array\",\n            \"Float64Array\",\n            \"Function\",\n            \"Int8Array\",\n            \"Int16Array\",\n            \"Int32Array\",\n            \"Map\",\n            \"Math\",\n            \"Object\",\n            \"Promise\",\n            \"RegExp\",\n            \"Set\",\n            \"String\",\n            \"Symbol\",\n            \"TypeError\",\n            \"Uint8Array\",\n            \"Uint8ClampedArray\",\n            \"Uint16Array\",\n            \"Uint32Array\",\n            \"WeakMap\",\n            \"_\",\n            \"clearTimeout\",\n            \"isFinite\",\n            \"parseInt\",\n            \"setTimeout\"\n        ], Ko = -1, B = {};\n        B[gr] = B[vr] = B[_r] = B[mr] = B[wr] = B[Pr] = B[Ar] = B[Cr] = B[Ir] = !0, B[Ot] = B[me] = B[kt] = B[Yt] = B[Rt] = B[Zt] = B[we] = B[Pe] = B[yn] = B[Jt] = B[qn] = B[Xt] = B[Sn] = B[Qt] = B[Vt] = !1;\n        var q = {};\n        q[Ot] = q[me] = q[kt] = q[Rt] = q[Yt] = q[Zt] = q[gr] = q[vr] = q[_r] = q[mr] = q[wr] = q[yn] = q[Jt] = q[qn] = q[Xt] = q[Sn] = q[Qt] = q[Ae] = q[Pr] = q[Ar] = q[Cr] = q[Ir] = !0, q[we] = q[Pe] = q[Vt] = !1;\n        var Yo = {\n            À: \"A\",\n            Á: \"A\",\n            Â: \"A\",\n            Ã: \"A\",\n            Ä: \"A\",\n            Å: \"A\",\n            à: \"a\",\n            á: \"a\",\n            â: \"a\",\n            ã: \"a\",\n            ä: \"a\",\n            å: \"a\",\n            Ç: \"C\",\n            ç: \"c\",\n            Ð: \"D\",\n            ð: \"d\",\n            È: \"E\",\n            É: \"E\",\n            Ê: \"E\",\n            Ë: \"E\",\n            è: \"e\",\n            é: \"e\",\n            ê: \"e\",\n            ë: \"e\",\n            Ì: \"I\",\n            Í: \"I\",\n            Î: \"I\",\n            Ï: \"I\",\n            ì: \"i\",\n            í: \"i\",\n            î: \"i\",\n            ï: \"i\",\n            Ñ: \"N\",\n            ñ: \"n\",\n            Ò: \"O\",\n            Ó: \"O\",\n            Ô: \"O\",\n            Õ: \"O\",\n            Ö: \"O\",\n            Ø: \"O\",\n            ò: \"o\",\n            ó: \"o\",\n            ô: \"o\",\n            õ: \"o\",\n            ö: \"o\",\n            ø: \"o\",\n            Ù: \"U\",\n            Ú: \"U\",\n            Û: \"U\",\n            Ü: \"U\",\n            ù: \"u\",\n            ú: \"u\",\n            û: \"u\",\n            ü: \"u\",\n            Ý: \"Y\",\n            ý: \"y\",\n            ÿ: \"y\",\n            Æ: \"Ae\",\n            æ: \"ae\",\n            Þ: \"Th\",\n            þ: \"th\",\n            ß: \"ss\",\n            Ā: \"A\",\n            Ă: \"A\",\n            Ą: \"A\",\n            ā: \"a\",\n            ă: \"a\",\n            ą: \"a\",\n            Ć: \"C\",\n            Ĉ: \"C\",\n            Ċ: \"C\",\n            Č: \"C\",\n            ć: \"c\",\n            ĉ: \"c\",\n            ċ: \"c\",\n            č: \"c\",\n            Ď: \"D\",\n            Đ: \"D\",\n            ď: \"d\",\n            đ: \"d\",\n            Ē: \"E\",\n            Ĕ: \"E\",\n            Ė: \"E\",\n            Ę: \"E\",\n            Ě: \"E\",\n            ē: \"e\",\n            ĕ: \"e\",\n            ė: \"e\",\n            ę: \"e\",\n            ě: \"e\",\n            Ĝ: \"G\",\n            Ğ: \"G\",\n            Ġ: \"G\",\n            Ģ: \"G\",\n            ĝ: \"g\",\n            ğ: \"g\",\n            ġ: \"g\",\n            ģ: \"g\",\n            Ĥ: \"H\",\n            Ħ: \"H\",\n            ĥ: \"h\",\n            ħ: \"h\",\n            Ĩ: \"I\",\n            Ī: \"I\",\n            Ĭ: \"I\",\n            Į: \"I\",\n            İ: \"I\",\n            ĩ: \"i\",\n            ī: \"i\",\n            ĭ: \"i\",\n            į: \"i\",\n            ı: \"i\",\n            Ĵ: \"J\",\n            ĵ: \"j\",\n            Ķ: \"K\",\n            ķ: \"k\",\n            ĸ: \"k\",\n            Ĺ: \"L\",\n            Ļ: \"L\",\n            Ľ: \"L\",\n            Ŀ: \"L\",\n            Ł: \"L\",\n            ĺ: \"l\",\n            ļ: \"l\",\n            ľ: \"l\",\n            ŀ: \"l\",\n            ł: \"l\",\n            Ń: \"N\",\n            Ņ: \"N\",\n            Ň: \"N\",\n            Ŋ: \"N\",\n            ń: \"n\",\n            ņ: \"n\",\n            ň: \"n\",\n            ŋ: \"n\",\n            Ō: \"O\",\n            Ŏ: \"O\",\n            Ő: \"O\",\n            ō: \"o\",\n            ŏ: \"o\",\n            ő: \"o\",\n            Ŕ: \"R\",\n            Ŗ: \"R\",\n            Ř: \"R\",\n            ŕ: \"r\",\n            ŗ: \"r\",\n            ř: \"r\",\n            Ś: \"S\",\n            Ŝ: \"S\",\n            Ş: \"S\",\n            Š: \"S\",\n            ś: \"s\",\n            ŝ: \"s\",\n            ş: \"s\",\n            š: \"s\",\n            Ţ: \"T\",\n            Ť: \"T\",\n            Ŧ: \"T\",\n            ţ: \"t\",\n            ť: \"t\",\n            ŧ: \"t\",\n            Ũ: \"U\",\n            Ū: \"U\",\n            Ŭ: \"U\",\n            Ů: \"U\",\n            Ű: \"U\",\n            Ų: \"U\",\n            ũ: \"u\",\n            ū: \"u\",\n            ŭ: \"u\",\n            ů: \"u\",\n            ű: \"u\",\n            ų: \"u\",\n            Ŵ: \"W\",\n            ŵ: \"w\",\n            Ŷ: \"Y\",\n            ŷ: \"y\",\n            Ÿ: \"Y\",\n            Ź: \"Z\",\n            Ż: \"Z\",\n            Ž: \"Z\",\n            ź: \"z\",\n            ż: \"z\",\n            ž: \"z\",\n            Ĳ: \"IJ\",\n            ĳ: \"ij\",\n            Œ: \"Oe\",\n            œ: \"oe\",\n            ŉ: \"'n\",\n            ſ: \"s\"\n        }, Zo = {\n            \"&\": \"&amp;\",\n            \"<\": \"&lt;\",\n            \">\": \"&gt;\",\n            '\"': \"&quot;\",\n            \"'\": \"&#39;\"\n        }, Jo = {\n            \"&amp;\": \"&\",\n            \"&lt;\": \"<\",\n            \"&gt;\": \">\",\n            \"&quot;\": '\"',\n            \"&#39;\": \"'\"\n        }, Xo = {\n            \"\\\\\": \"\\\\\",\n            \"'\": \"'\",\n            \"\\n\": \"n\",\n            \"\\r\": \"r\",\n            \"\\u2028\": \"u2028\",\n            \"\\u2029\": \"u2029\"\n        }, Qo = parseFloat, Vo = parseInt, ds = typeof ge == \"object\" && ge && ge.Object === Object && ge, ko = typeof self == \"object\" && self && self.Object === Object && self, k = ds || ko || Function(\"return this\")(), Tr = u && !u.nodeType && u, lt = Tr && !0 && A && !A.nodeType && A, gs = lt && lt.exports === Tr, Lr = gs && ds.process, _n = function() {\n            try {\n                var h = lt && lt.require && lt.require(\"util\").types;\n                return h || Lr && Lr.binding && Lr.binding(\"util\");\n            } catch (e) {}\n        }(), vs = _n && _n.isArrayBuffer, _s = _n && _n.isDate, ms = _n && _n.isMap, ws = _n && _n.isRegExp, Ps = _n && _n.isSet, As = _n && _n.isTypedArray;\n        function cn(h, g, d) {\n            switch(d.length){\n                case 0:\n                    return h.call(g);\n                case 1:\n                    return h.call(g, d[0]);\n                case 2:\n                    return h.call(g, d[0], d[1]);\n                case 3:\n                    return h.call(g, d[0], d[1], d[2]);\n            }\n            return h.apply(g, d);\n        }\n        function jo(h, g, d, C) {\n            for(var S = -1, U = h == null ? 0 : h.length; ++S < U;){\n                var X = h[S];\n                g(C, X, d(X), h);\n            }\n            return C;\n        }\n        function mn(h, g) {\n            for(var d = -1, C = h == null ? 0 : h.length; ++d < C && g(h[d], d, h) !== !1;);\n            return h;\n        }\n        function nf(h, g) {\n            for(var d = h == null ? 0 : h.length; d-- && g(h[d], d, h) !== !1;);\n            return h;\n        }\n        function Cs(h, g) {\n            for(var d = -1, C = h == null ? 0 : h.length; ++d < C;)if (!g(h[d], d, h)) return !1;\n            return !0;\n        }\n        function jn(h, g) {\n            for(var d = -1, C = h == null ? 0 : h.length, S = 0, U = []; ++d < C;){\n                var X = h[d];\n                g(X, d, h) && (U[S++] = X);\n            }\n            return U;\n        }\n        function Ee(h, g) {\n            var d = h == null ? 0 : h.length;\n            return !!d && Tt(h, g, 0) > -1;\n        }\n        function Dr(h, g, d) {\n            for(var C = -1, S = h == null ? 0 : h.length; ++C < S;)if (d(g, h[C])) return !0;\n            return !1;\n        }\n        function G(h, g) {\n            for(var d = -1, C = h == null ? 0 : h.length, S = Array(C); ++d < C;)S[d] = g(h[d], d, h);\n            return S;\n        }\n        function nt(h, g) {\n            for(var d = -1, C = g.length, S = h.length; ++d < C;)h[S + d] = g[d];\n            return h;\n        }\n        function Nr(h, g, d, C) {\n            var S = -1, U = h == null ? 0 : h.length;\n            for(C && U && (d = h[++S]); ++S < U;)d = g(d, h[S], S, h);\n            return d;\n        }\n        function tf(h, g, d, C) {\n            var S = h == null ? 0 : h.length;\n            for(C && S && (d = h[--S]); S--;)d = g(d, h[S], S, h);\n            return d;\n        }\n        function Hr(h, g) {\n            for(var d = -1, C = h == null ? 0 : h.length; ++d < C;)if (g(h[d], d, h)) return !0;\n            return !1;\n        }\n        var ef = $r(\"length\");\n        function rf(h) {\n            return h.split(\"\");\n        }\n        function sf(h) {\n            return h.match(ho) || [];\n        }\n        function Is(h, g, d) {\n            var C;\n            return d(h, function(S, U, X) {\n                if (g(S, U, X)) return C = U, !1;\n            }), C;\n        }\n        function ye(h, g, d, C) {\n            for(var S = h.length, U = d + (C ? 1 : -1); C ? U-- : ++U < S;)if (g(h[U], U, h)) return U;\n            return -1;\n        }\n        function Tt(h, g, d) {\n            return g === g ? _f(h, g, d) : ye(h, xs, d);\n        }\n        function uf(h, g, d, C) {\n            for(var S = d - 1, U = h.length; ++S < U;)if (C(h[S], g)) return S;\n            return -1;\n        }\n        function xs(h) {\n            return h !== h;\n        }\n        function Es(h, g) {\n            var d = h == null ? 0 : h.length;\n            return d ? Wr(h, g) / d : _e;\n        }\n        function $r(h) {\n            return function(g) {\n                return g == null ? i : g[h];\n            };\n        }\n        function Ur(h) {\n            return function(g) {\n                return h == null ? i : h[g];\n            };\n        }\n        function ys(h, g, d, C, S) {\n            return S(h, function(U, X, M) {\n                d = C ? (C = !1, U) : g(d, U, X, M);\n            }), d;\n        }\n        function af(h, g) {\n            var d = h.length;\n            for(h.sort(g); d--;)h[d] = h[d].value;\n            return h;\n        }\n        function Wr(h, g) {\n            for(var d, C = -1, S = h.length; ++C < S;){\n                var U = g(h[C]);\n                U !== i && (d = d === i ? U : d + U);\n            }\n            return d;\n        }\n        function Fr(h, g) {\n            for(var d = -1, C = Array(h); ++d < h;)C[d] = g(d);\n            return C;\n        }\n        function of(h, g) {\n            return G(g, function(d) {\n                return [\n                    d,\n                    h[d]\n                ];\n            });\n        }\n        function Ss(h) {\n            return h && h.slice(0, Ts(h) + 1).replace(Er, \"\");\n        }\n        function hn(h) {\n            return function(g) {\n                return h(g);\n            };\n        }\n        function Mr(h, g) {\n            return G(g, function(d) {\n                return h[d];\n            });\n        }\n        function jt(h, g) {\n            return h.has(g);\n        }\n        function Os(h, g) {\n            for(var d = -1, C = h.length; ++d < C && Tt(g, h[d], 0) > -1;);\n            return d;\n        }\n        function Rs(h, g) {\n            for(var d = h.length; d-- && Tt(g, h[d], 0) > -1;);\n            return d;\n        }\n        function ff(h, g) {\n            for(var d = h.length, C = 0; d--;)h[d] === g && ++C;\n            return C;\n        }\n        var cf = Ur(Yo), hf = Ur(Zo);\n        function lf(h) {\n            return \"\\\\\" + Xo[h];\n        }\n        function pf(h, g) {\n            return h == null ? i : h[g];\n        }\n        function Lt(h) {\n            return Bo.test(h);\n        }\n        function df(h) {\n            return Go.test(h);\n        }\n        function gf(h) {\n            for(var g, d = []; !(g = h.next()).done;)d.push(g.value);\n            return d;\n        }\n        function qr(h) {\n            var g = -1, d = Array(h.size);\n            return h.forEach(function(C, S) {\n                d[++g] = [\n                    S,\n                    C\n                ];\n            }), d;\n        }\n        function bs(h, g) {\n            return function(d) {\n                return h(g(d));\n            };\n        }\n        function tt(h, g) {\n            for(var d = -1, C = h.length, S = 0, U = []; ++d < C;){\n                var X = h[d];\n                (X === g || X === It) && (h[d] = It, U[S++] = d);\n            }\n            return U;\n        }\n        function Se(h) {\n            var g = -1, d = Array(h.size);\n            return h.forEach(function(C) {\n                d[++g] = C;\n            }), d;\n        }\n        function vf(h) {\n            var g = -1, d = Array(h.size);\n            return h.forEach(function(C) {\n                d[++g] = [\n                    C,\n                    C\n                ];\n            }), d;\n        }\n        function _f(h, g, d) {\n            for(var C = d - 1, S = h.length; ++C < S;)if (h[C] === g) return C;\n            return -1;\n        }\n        function mf(h, g, d) {\n            for(var C = d + 1; C--;)if (h[C] === g) return C;\n            return C;\n        }\n        function Dt(h) {\n            return Lt(h) ? Pf(h) : ef(h);\n        }\n        function On(h) {\n            return Lt(h) ? Af(h) : rf(h);\n        }\n        function Ts(h) {\n            for(var g = h.length; g-- && ao.test(h.charAt(g)););\n            return g;\n        }\n        var wf = Ur(Jo);\n        function Pf(h) {\n            for(var g = br.lastIndex = 0; br.test(h);)++g;\n            return g;\n        }\n        function Af(h) {\n            return h.match(br) || [];\n        }\n        function Cf(h) {\n            return h.match(qo) || [];\n        }\n        var If = function h(g) {\n            g = g == null ? k : Nt.defaults(k.Object(), g, Nt.pick(k, zo));\n            var d = g.Array, C = g.Date, S = g.Error, U = g.Function, X = g.Math, M = g.Object, Br = g.RegExp, xf = g.String, wn = g.TypeError, Oe = d.prototype, Ef = U.prototype, Ht = M.prototype, Re = g[\"__core-js_shared__\"], be = Ef.toString, F = Ht.hasOwnProperty, yf = 0, Ls = function() {\n                var n = /[^.]+$/.exec(Re && Re.keys && Re.keys.IE_PROTO || \"\");\n                return n ? \"Symbol(src)_1.\" + n : \"\";\n            }(), Te = Ht.toString, Sf = be.call(M), Of = k._, Rf = Br(\"^\" + be.call(F).replace(xr, \"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, \"$1.*?\") + \"$\"), Le = gs ? g.Buffer : i, et = g.Symbol, De = g.Uint8Array, Ds = Le ? Le.allocUnsafe : i, Ne = bs(M.getPrototypeOf, M), Ns = M.create, Hs = Ht.propertyIsEnumerable, He = Oe.splice, $s = et ? et.isConcatSpreadable : i, ne = et ? et.iterator : i, pt = et ? et.toStringTag : i, $e = function() {\n                try {\n                    var n = mt(M, \"defineProperty\");\n                    return n({}, \"\", {}), n;\n                } catch (e) {}\n            }(), bf = g.clearTimeout !== k.clearTimeout && g.clearTimeout, Tf = C && C.now !== k.Date.now && C.now, Lf = g.setTimeout !== k.setTimeout && g.setTimeout, Ue = X.ceil, We = X.floor, Gr = M.getOwnPropertySymbols, Df = Le ? Le.isBuffer : i, Us = g.isFinite, Nf = Oe.join, Hf = bs(M.keys, M), Q = X.max, nn = X.min, $f = C.now, Uf = g.parseInt, Ws = X.random, Wf = Oe.reverse, zr = mt(g, \"DataView\"), te = mt(g, \"Map\"), Kr = mt(g, \"Promise\"), $t = mt(g, \"Set\"), ee = mt(g, \"WeakMap\"), re = mt(M, \"create\"), Fe = ee && new ee, Ut = {}, Ff = wt(zr), Mf = wt(te), qf = wt(Kr), Bf = wt($t), Gf = wt(ee), Me = et ? et.prototype : i, ie = Me ? Me.valueOf : i, Fs = Me ? Me.toString : i;\n            function a(n) {\n                if (Y(n) && !O(n) && !(n instanceof H)) {\n                    if (n instanceof Pn) return n;\n                    if (F.call(n, \"__wrapped__\")) return Mu(n);\n                }\n                return new Pn(n);\n            }\n            var Wt = function() {\n                function n() {}\n                return function(t) {\n                    if (!K(t)) return {};\n                    if (Ns) return Ns(t);\n                    n.prototype = t;\n                    var e = new n;\n                    return n.prototype = i, e;\n                };\n            }();\n            function qe() {}\n            function Pn(n, t) {\n                this.__wrapped__ = n, this.__actions__ = [], this.__chain__ = !!t, this.__index__ = 0, this.__values__ = i;\n            }\n            a.templateSettings = {\n                escape: to,\n                evaluate: eo,\n                interpolate: Ji,\n                variable: \"\",\n                imports: {\n                    _: a\n                }\n            }, a.prototype = qe.prototype, a.prototype.constructor = a, Pn.prototype = Wt(qe.prototype), Pn.prototype.constructor = Pn;\n            function H(n) {\n                this.__wrapped__ = n, this.__actions__ = [], this.__dir__ = 1, this.__filtered__ = !1, this.__iteratees__ = [], this.__takeCount__ = Hn, this.__views__ = [];\n            }\n            function zf() {\n                var n = new H(this.__wrapped__);\n                return n.__actions__ = un(this.__actions__), n.__dir__ = this.__dir__, n.__filtered__ = this.__filtered__, n.__iteratees__ = un(this.__iteratees__), n.__takeCount__ = this.__takeCount__, n.__views__ = un(this.__views__), n;\n            }\n            function Kf() {\n                if (this.__filtered__) {\n                    var n = new H(this);\n                    n.__dir__ = -1, n.__filtered__ = !0;\n                } else n = this.clone(), n.__dir__ *= -1;\n                return n;\n            }\n            function Yf() {\n                var n = this.__wrapped__.value(), t = this.__dir__, e = O(n), r = t < 0, s = e ? n.length : 0, o = ih(0, s, this.__views__), f = o.start, c = o.end, l = c - f, v = r ? c : f - 1, _ = this.__iteratees__, m = _.length, P = 0, I = nn(l, this.__takeCount__);\n                if (!e || !r && s == l && I == l) return fu(n, this.__actions__);\n                var E = [];\n                n: for(; l-- && P < I;){\n                    v += t;\n                    for(var T = -1, y = n[v]; ++T < m;){\n                        var N = _[T], $ = N.iteratee, dn = N.type, sn = $(y);\n                        if (dn == Wa) y = sn;\n                        else if (!sn) {\n                            if (dn == Gi) continue n;\n                            break n;\n                        }\n                    }\n                    E[P++] = y;\n                }\n                return E;\n            }\n            H.prototype = Wt(qe.prototype), H.prototype.constructor = H;\n            function dt(n) {\n                var t = -1, e = n == null ? 0 : n.length;\n                for(this.clear(); ++t < e;){\n                    var r = n[t];\n                    this.set(r[0], r[1]);\n                }\n            }\n            function Zf() {\n                this.__data__ = re ? re(null) : {}, this.size = 0;\n            }\n            function Jf(n) {\n                var t = this.has(n) && delete this.__data__[n];\n                return this.size -= t ? 1 : 0, t;\n            }\n            function Xf(n) {\n                var t = this.__data__;\n                if (re) {\n                    var e = t[n];\n                    return e === zt ? i : e;\n                }\n                return F.call(t, n) ? t[n] : i;\n            }\n            function Qf(n) {\n                var t = this.__data__;\n                return re ? t[n] !== i : F.call(t, n);\n            }\n            function Vf(n, t) {\n                var e = this.__data__;\n                return this.size += this.has(n) ? 0 : 1, e[n] = re && t === i ? zt : t, this;\n            }\n            dt.prototype.clear = Zf, dt.prototype.delete = Jf, dt.prototype.get = Xf, dt.prototype.has = Qf, dt.prototype.set = Vf;\n            function Bn(n) {\n                var t = -1, e = n == null ? 0 : n.length;\n                for(this.clear(); ++t < e;){\n                    var r = n[t];\n                    this.set(r[0], r[1]);\n                }\n            }\n            function kf() {\n                this.__data__ = [], this.size = 0;\n            }\n            function jf(n) {\n                var t = this.__data__, e = Be(t, n);\n                if (e < 0) return !1;\n                var r = t.length - 1;\n                return e == r ? t.pop() : He.call(t, e, 1), --this.size, !0;\n            }\n            function nc(n) {\n                var t = this.__data__, e = Be(t, n);\n                return e < 0 ? i : t[e][1];\n            }\n            function tc(n) {\n                return Be(this.__data__, n) > -1;\n            }\n            function ec(n, t) {\n                var e = this.__data__, r = Be(e, n);\n                return r < 0 ? (++this.size, e.push([\n                    n,\n                    t\n                ])) : e[r][1] = t, this;\n            }\n            Bn.prototype.clear = kf, Bn.prototype.delete = jf, Bn.prototype.get = nc, Bn.prototype.has = tc, Bn.prototype.set = ec;\n            function Gn(n) {\n                var t = -1, e = n == null ? 0 : n.length;\n                for(this.clear(); ++t < e;){\n                    var r = n[t];\n                    this.set(r[0], r[1]);\n                }\n            }\n            function rc() {\n                this.size = 0, this.__data__ = {\n                    hash: new dt,\n                    map: new (te || Bn),\n                    string: new dt\n                };\n            }\n            function ic(n) {\n                var t = nr(this, n).delete(n);\n                return this.size -= t ? 1 : 0, t;\n            }\n            function sc(n) {\n                return nr(this, n).get(n);\n            }\n            function uc(n) {\n                return nr(this, n).has(n);\n            }\n            function ac(n, t) {\n                var e = nr(this, n), r = e.size;\n                return e.set(n, t), this.size += e.size == r ? 0 : 1, this;\n            }\n            Gn.prototype.clear = rc, Gn.prototype.delete = ic, Gn.prototype.get = sc, Gn.prototype.has = uc, Gn.prototype.set = ac;\n            function gt(n) {\n                var t = -1, e = n == null ? 0 : n.length;\n                for(this.__data__ = new Gn; ++t < e;)this.add(n[t]);\n            }\n            function oc(n) {\n                return this.__data__.set(n, zt), this;\n            }\n            function fc(n) {\n                return this.__data__.has(n);\n            }\n            gt.prototype.add = gt.prototype.push = oc, gt.prototype.has = fc;\n            function Rn(n) {\n                var t = this.__data__ = new Bn(n);\n                this.size = t.size;\n            }\n            function cc() {\n                this.__data__ = new Bn, this.size = 0;\n            }\n            function hc(n) {\n                var t = this.__data__, e = t.delete(n);\n                return this.size = t.size, e;\n            }\n            function lc(n) {\n                return this.__data__.get(n);\n            }\n            function pc(n) {\n                return this.__data__.has(n);\n            }\n            function dc(n, t) {\n                var e = this.__data__;\n                if (e instanceof Bn) {\n                    var r = e.__data__;\n                    if (!te || r.length < w - 1) return r.push([\n                        n,\n                        t\n                    ]), this.size = ++e.size, this;\n                    e = this.__data__ = new Gn(r);\n                }\n                return e.set(n, t), this.size = e.size, this;\n            }\n            Rn.prototype.clear = cc, Rn.prototype.delete = hc, Rn.prototype.get = lc, Rn.prototype.has = pc, Rn.prototype.set = dc;\n            function Ms(n, t) {\n                var e = O(n), r = !e && Pt(n), s = !e && !r && at(n), o = !e && !r && !s && Bt(n), f = e || r || s || o, c = f ? Fr(n.length, xf) : [], l = c.length;\n                for(var v in n)(t || F.call(n, v)) && !(f && (v == \"length\" || s && (v == \"offset\" || v == \"parent\") || o && (v == \"buffer\" || v == \"byteLength\" || v == \"byteOffset\") || Zn(v, l))) && c.push(v);\n                return c;\n            }\n            function qs(n) {\n                var t = n.length;\n                return t ? n[ei(0, t - 1)] : i;\n            }\n            function gc(n, t) {\n                return tr(un(n), vt(t, 0, n.length));\n            }\n            function vc(n) {\n                return tr(un(n));\n            }\n            function Yr(n, t, e) {\n                (e !== i && !bn(n[t], e) || e === i && !(t in n)) && zn(n, t, e);\n            }\n            function se(n, t, e) {\n                var r = n[t];\n                (!(F.call(n, t) && bn(r, e)) || e === i && !(t in n)) && zn(n, t, e);\n            }\n            function Be(n, t) {\n                for(var e = n.length; e--;)if (bn(n[e][0], t)) return e;\n                return -1;\n            }\n            function _c(n, t, e, r) {\n                return rt(n, function(s, o, f) {\n                    t(r, s, e(s), f);\n                }), r;\n            }\n            function Bs(n, t) {\n                return n && Un(t, V(t), n);\n            }\n            function mc(n, t) {\n                return n && Un(t, on(t), n);\n            }\n            function zn(n, t, e) {\n                t == \"__proto__\" && $e ? $e(n, t, {\n                    configurable: !0,\n                    enumerable: !0,\n                    value: e,\n                    writable: !0\n                }) : n[t] = e;\n            }\n            function Zr(n, t) {\n                for(var e = -1, r = t.length, s = d(r), o = n == null; ++e < r;)s[e] = o ? i : Si(n, t[e]);\n                return s;\n            }\n            function vt(n, t, e) {\n                return n === n && (e !== i && (n = n <= e ? n : e), t !== i && (n = n >= t ? n : t)), n;\n            }\n            function An(n, t, e, r, s, o) {\n                var f, c = t & Ln, l = t & Fn, v = t & xt;\n                if (e && (f = s ? e(n, r, s, o) : e(n)), f !== i) return f;\n                if (!K(n)) return n;\n                var _ = O(n);\n                if (_) {\n                    if (f = uh(n), !c) return un(n, f);\n                } else {\n                    var m = tn(n), P = m == Pe || m == zi;\n                    if (at(n)) return lu(n, c);\n                    if (m == qn || m == Ot || P && !s) {\n                        if (f = l || P ? {} : Tu(n), !c) return l ? Xc(n, mc(f, n)) : Jc(n, Bs(f, n));\n                    } else {\n                        if (!q[m]) return s ? n : {};\n                        f = ah(n, m, c);\n                    }\n                }\n                o || (o = new Rn);\n                var I = o.get(n);\n                if (I) return I;\n                o.set(n, f), ua(n) ? n.forEach(function(y) {\n                    f.add(An(y, t, e, y, n, o));\n                }) : ia(n) && n.forEach(function(y, N) {\n                    f.set(N, An(y, t, e, N, n, o));\n                });\n                var E = v ? l ? pi : li : l ? on : V, T = _ ? i : E(n);\n                return mn(T || n, function(y, N) {\n                    T && (N = y, y = n[N]), se(f, N, An(y, t, e, N, n, o));\n                }), f;\n            }\n            function wc(n) {\n                var t = V(n);\n                return function(e) {\n                    return Gs(e, n, t);\n                };\n            }\n            function Gs(n, t, e) {\n                var r = e.length;\n                if (n == null) return !r;\n                for(n = M(n); r--;){\n                    var s = e[r], o = t[s], f = n[s];\n                    if (f === i && !(s in n) || !o(f)) return !1;\n                }\n                return !0;\n            }\n            function zs(n, t, e) {\n                if (typeof n != \"function\") throw new wn(D);\n                return le(function() {\n                    n.apply(i, e);\n                }, t);\n            }\n            function ue(n, t, e, r) {\n                var s = -1, o = Ee, f = !0, c = n.length, l = [], v = t.length;\n                if (!c) return l;\n                e && (t = G(t, hn(e))), r ? (o = Dr, f = !1) : t.length >= w && (o = jt, f = !1, t = new gt(t));\n                n: for(; ++s < c;){\n                    var _ = n[s], m = e == null ? _ : e(_);\n                    if (_ = r || _ !== 0 ? _ : 0, f && m === m) {\n                        for(var P = v; P--;)if (t[P] === m) continue n;\n                        l.push(_);\n                    } else o(t, m, r) || l.push(_);\n                }\n                return l;\n            }\n            var rt = _u($n), Ks = _u(Xr, !0);\n            function Pc(n, t) {\n                var e = !0;\n                return rt(n, function(r, s, o) {\n                    return e = !!t(r, s, o), e;\n                }), e;\n            }\n            function Ge(n, t, e) {\n                for(var r = -1, s = n.length; ++r < s;){\n                    var o = n[r], f = t(o);\n                    if (f != null && (c === i ? f === f && !pn(f) : e(f, c))) var c = f, l = o;\n                }\n                return l;\n            }\n            function Ac(n, t, e, r) {\n                var s = n.length;\n                for(e = R(e), e < 0 && (e = -e > s ? 0 : s + e), r = r === i || r > s ? s : R(r), r < 0 && (r += s), r = e > r ? 0 : oa(r); e < r;)n[e++] = t;\n                return n;\n            }\n            function Ys(n, t) {\n                var e = [];\n                return rt(n, function(r, s, o) {\n                    t(r, s, o) && e.push(r);\n                }), e;\n            }\n            function j(n, t, e, r, s) {\n                var o = -1, f = n.length;\n                for(e || (e = fh), s || (s = []); ++o < f;){\n                    var c = n[o];\n                    t > 0 && e(c) ? t > 1 ? j(c, t - 1, e, r, s) : nt(s, c) : r || (s[s.length] = c);\n                }\n                return s;\n            }\n            var Jr = mu(), Zs = mu(!0);\n            function $n(n, t) {\n                return n && Jr(n, t, V);\n            }\n            function Xr(n, t) {\n                return n && Zs(n, t, V);\n            }\n            function ze(n, t) {\n                return jn(t, function(e) {\n                    return Jn(n[e]);\n                });\n            }\n            function _t(n, t) {\n                t = st(t, n);\n                for(var e = 0, r = t.length; n != null && e < r;)n = n[Wn(t[e++])];\n                return e && e == r ? n : i;\n            }\n            function Js(n, t, e) {\n                var r = t(n);\n                return O(n) ? r : nt(r, e(n));\n            }\n            function en(n) {\n                return n == null ? n === i ? Ja : Ya : pt && pt in M(n) ? rh(n) : vh(n);\n            }\n            function Qr(n, t) {\n                return n > t;\n            }\n            function Cc(n, t) {\n                return n != null && F.call(n, t);\n            }\n            function Ic(n, t) {\n                return n != null && t in M(n);\n            }\n            function xc(n, t, e) {\n                return n >= nn(t, e) && n < Q(t, e);\n            }\n            function Vr(n, t, e) {\n                for(var r = e ? Dr : Ee, s = n[0].length, o = n.length, f = o, c = d(o), l = 1 / 0, v = []; f--;){\n                    var _ = n[f];\n                    f && t && (_ = G(_, hn(t))), l = nn(_.length, l), c[f] = !e && (t || s >= 120 && _.length >= 120) ? new gt(f && _) : i;\n                }\n                _ = n[0];\n                var m = -1, P = c[0];\n                n: for(; ++m < s && v.length < l;){\n                    var I = _[m], E = t ? t(I) : I;\n                    if (I = e || I !== 0 ? I : 0, !(P ? jt(P, E) : r(v, E, e))) {\n                        for(f = o; --f;){\n                            var T = c[f];\n                            if (!(T ? jt(T, E) : r(n[f], E, e))) continue n;\n                        }\n                        P && P.push(E), v.push(I);\n                    }\n                }\n                return v;\n            }\n            function Ec(n, t, e, r) {\n                return $n(n, function(s, o, f) {\n                    t(r, e(s), o, f);\n                }), r;\n            }\n            function ae(n, t, e) {\n                t = st(t, n), n = Hu(n, t);\n                var r = n == null ? n : n[Wn(In(t))];\n                return r == null ? i : cn(r, n, e);\n            }\n            function Xs(n) {\n                return Y(n) && en(n) == Ot;\n            }\n            function yc(n) {\n                return Y(n) && en(n) == kt;\n            }\n            function Sc(n) {\n                return Y(n) && en(n) == Zt;\n            }\n            function oe(n, t, e, r, s) {\n                return n === t ? !0 : n == null || t == null || !Y(n) && !Y(t) ? n !== n && t !== t : Oc(n, t, e, r, oe, s);\n            }\n            function Oc(n, t, e, r, s, o) {\n                var f = O(n), c = O(t), l = f ? me : tn(n), v = c ? me : tn(t);\n                l = l == Ot ? qn : l, v = v == Ot ? qn : v;\n                var _ = l == qn, m = v == qn, P = l == v;\n                if (P && at(n)) {\n                    if (!at(t)) return !1;\n                    f = !0, _ = !1;\n                }\n                if (P && !_) return o || (o = new Rn), f || Bt(n) ? Ou(n, t, e, r, s, o) : th(n, t, l, e, r, s, o);\n                if (!(e & Et)) {\n                    var I = _ && F.call(n, \"__wrapped__\"), E = m && F.call(t, \"__wrapped__\");\n                    if (I || E) {\n                        var T = I ? n.value() : n, y = E ? t.value() : t;\n                        return o || (o = new Rn), s(T, y, e, r, o);\n                    }\n                }\n                return P ? (o || (o = new Rn), eh(n, t, e, r, s, o)) : !1;\n            }\n            function Rc(n) {\n                return Y(n) && tn(n) == yn;\n            }\n            function kr(n, t, e, r) {\n                var s = e.length, o = s, f = !r;\n                if (n == null) return !o;\n                for(n = M(n); s--;){\n                    var c = e[s];\n                    if (f && c[2] ? c[1] !== n[c[0]] : !(c[0] in n)) return !1;\n                }\n                for(; ++s < o;){\n                    c = e[s];\n                    var l = c[0], v = n[l], _ = c[1];\n                    if (f && c[2]) {\n                        if (v === i && !(l in n)) return !1;\n                    } else {\n                        var m = new Rn;\n                        if (r) var P = r(v, _, l, n, t, m);\n                        if (!(P === i ? oe(_, v, Et | ve, r, m) : P)) return !1;\n                    }\n                }\n                return !0;\n            }\n            function Qs(n) {\n                if (!K(n) || hh(n)) return !1;\n                var t = Jn(n) ? Rf : mo;\n                return t.test(wt(n));\n            }\n            function bc(n) {\n                return Y(n) && en(n) == Xt;\n            }\n            function Tc(n) {\n                return Y(n) && tn(n) == Sn;\n            }\n            function Lc(n) {\n                return Y(n) && ar(n.length) && !!B[en(n)];\n            }\n            function Vs(n) {\n                return typeof n == \"function\" ? n : n == null ? fn : typeof n == \"object\" ? O(n) ? nu(n[0], n[1]) : js(n) : wa(n);\n            }\n            function jr(n) {\n                if (!he(n)) return Hf(n);\n                var t = [];\n                for(var e in M(n))F.call(n, e) && e != \"constructor\" && t.push(e);\n                return t;\n            }\n            function Dc(n) {\n                if (!K(n)) return gh(n);\n                var t = he(n), e = [];\n                for(var r in n)r == \"constructor\" && (t || !F.call(n, r)) || e.push(r);\n                return e;\n            }\n            function ni(n, t) {\n                return n < t;\n            }\n            function ks(n, t) {\n                var e = -1, r = an(n) ? d(n.length) : [];\n                return rt(n, function(s, o, f) {\n                    r[++e] = t(s, o, f);\n                }), r;\n            }\n            function js(n) {\n                var t = gi(n);\n                return t.length == 1 && t[0][2] ? Du(t[0][0], t[0][1]) : function(e) {\n                    return e === n || kr(e, n, t);\n                };\n            }\n            function nu(n, t) {\n                return _i(n) && Lu(t) ? Du(Wn(n), t) : function(e) {\n                    var r = Si(e, n);\n                    return r === i && r === t ? Oi(e, n) : oe(t, r, Et | ve);\n                };\n            }\n            function Ke(n, t, e, r, s) {\n                n !== t && Jr(t, function(o, f) {\n                    if (s || (s = new Rn), K(o)) Nc(n, t, f, e, Ke, r, s);\n                    else {\n                        var c = r ? r(wi(n, f), o, f + \"\", n, t, s) : i;\n                        c === i && (c = o), Yr(n, f, c);\n                    }\n                }, on);\n            }\n            function Nc(n, t, e, r, s, o, f) {\n                var c = wi(n, e), l = wi(t, e), v = f.get(l);\n                if (v) {\n                    Yr(n, e, v);\n                    return;\n                }\n                var _ = o ? o(c, l, e + \"\", n, t, f) : i, m = _ === i;\n                if (m) {\n                    var P = O(l), I = !P && at(l), E = !P && !I && Bt(l);\n                    _ = l, P || I || E ? O(c) ? _ = c : Z(c) ? _ = un(c) : I ? (m = !1, _ = lu(l, !0)) : E ? (m = !1, _ = pu(l, !0)) : _ = [] : pe(l) || Pt(l) ? (_ = c, Pt(c) ? _ = fa(c) : (!K(c) || Jn(c)) && (_ = Tu(l))) : m = !1;\n                }\n                m && (f.set(l, _), s(_, l, r, o, f), f.delete(l)), Yr(n, e, _);\n            }\n            function tu(n, t) {\n                var e = n.length;\n                if (e) return t += t < 0 ? e : 0, Zn(t, e) ? n[t] : i;\n            }\n            function eu(n, t, e) {\n                t.length ? t = G(t, function(o) {\n                    return O(o) ? function(f) {\n                        return _t(f, o.length === 1 ? o[0] : o);\n                    } : o;\n                }) : t = [\n                    fn\n                ];\n                var r = -1;\n                t = G(t, hn(x()));\n                var s = ks(n, function(o, f, c) {\n                    var l = G(t, function(v) {\n                        return v(o);\n                    });\n                    return {\n                        criteria: l,\n                        index: ++r,\n                        value: o\n                    };\n                });\n                return af(s, function(o, f) {\n                    return Zc(o, f, e);\n                });\n            }\n            function Hc(n, t) {\n                return ru(n, t, function(e, r) {\n                    return Oi(n, r);\n                });\n            }\n            function ru(n, t, e) {\n                for(var r = -1, s = t.length, o = {}; ++r < s;){\n                    var f = t[r], c = _t(n, f);\n                    e(c, f) && fe(o, st(f, n), c);\n                }\n                return o;\n            }\n            function $c(n) {\n                return function(t) {\n                    return _t(t, n);\n                };\n            }\n            function ti(n, t, e, r) {\n                var s = r ? uf : Tt, o = -1, f = t.length, c = n;\n                for(n === t && (t = un(t)), e && (c = G(n, hn(e))); ++o < f;)for(var l = 0, v = t[o], _ = e ? e(v) : v; (l = s(c, _, l, r)) > -1;)c !== n && He.call(c, l, 1), He.call(n, l, 1);\n                return n;\n            }\n            function iu(n, t) {\n                for(var e = n ? t.length : 0, r = e - 1; e--;){\n                    var s = t[e];\n                    if (e == r || s !== o) {\n                        var o = s;\n                        Zn(s) ? He.call(n, s, 1) : si(n, s);\n                    }\n                }\n                return n;\n            }\n            function ei(n, t) {\n                return n + We(Ws() * (t - n + 1));\n            }\n            function Uc(n, t, e, r) {\n                for(var s = -1, o = Q(Ue((t - n) / (e || 1)), 0), f = d(o); o--;)f[r ? o : ++s] = n, n += e;\n                return f;\n            }\n            function ri(n, t) {\n                var e = \"\";\n                if (!n || t < 1 || t > kn) return e;\n                do t % 2 && (e += n), t = We(t / 2), t && (n += n);\n                while (t);\n                return e;\n            }\n            function L(n, t) {\n                return Pi(Nu(n, t, fn), n + \"\");\n            }\n            function Wc(n) {\n                return qs(Gt(n));\n            }\n            function Fc(n, t) {\n                var e = Gt(n);\n                return tr(e, vt(t, 0, e.length));\n            }\n            function fe(n, t, e, r) {\n                if (!K(n)) return n;\n                t = st(t, n);\n                for(var s = -1, o = t.length, f = o - 1, c = n; c != null && ++s < o;){\n                    var l = Wn(t[s]), v = e;\n                    if (l === \"__proto__\" || l === \"constructor\" || l === \"prototype\") return n;\n                    if (s != f) {\n                        var _ = c[l];\n                        v = r ? r(_, l, c) : i, v === i && (v = K(_) ? _ : Zn(t[s + 1]) ? [] : {});\n                    }\n                    se(c, l, v), c = c[l];\n                }\n                return n;\n            }\n            var su = Fe ? function(n, t) {\n                return Fe.set(n, t), n;\n            } : fn, Mc = $e ? function(n, t) {\n                return $e(n, \"toString\", {\n                    configurable: !0,\n                    enumerable: !1,\n                    value: bi(t),\n                    writable: !0\n                });\n            } : fn;\n            function qc(n) {\n                return tr(Gt(n));\n            }\n            function Cn(n, t, e) {\n                var r = -1, s = n.length;\n                t < 0 && (t = -t > s ? 0 : s + t), e = e > s ? s : e, e < 0 && (e += s), s = t > e ? 0 : e - t >>> 0, t >>>= 0;\n                for(var o = d(s); ++r < s;)o[r] = n[r + t];\n                return o;\n            }\n            function Bc(n, t) {\n                var e;\n                return rt(n, function(r, s, o) {\n                    return e = t(r, s, o), !e;\n                }), !!e;\n            }\n            function Ye(n, t, e) {\n                var r = 0, s = n == null ? r : n.length;\n                if (typeof t == \"number\" && t === t && s <= Ba) {\n                    for(; r < s;){\n                        var o = r + s >>> 1, f = n[o];\n                        f !== null && !pn(f) && (e ? f <= t : f < t) ? r = o + 1 : s = o;\n                    }\n                    return s;\n                }\n                return ii(n, t, fn, e);\n            }\n            function ii(n, t, e, r) {\n                var s = 0, o = n == null ? 0 : n.length;\n                if (o === 0) return 0;\n                t = e(t);\n                for(var f = t !== t, c = t === null, l = pn(t), v = t === i; s < o;){\n                    var _ = We((s + o) / 2), m = e(n[_]), P = m !== i, I = m === null, E = m === m, T = pn(m);\n                    if (f) var y = r || E;\n                    else v ? y = E && (r || P) : c ? y = E && P && (r || !I) : l ? y = E && P && !I && (r || !T) : I || T ? y = !1 : y = r ? m <= t : m < t;\n                    y ? s = _ + 1 : o = _;\n                }\n                return nn(o, qa);\n            }\n            function uu(n, t) {\n                for(var e = -1, r = n.length, s = 0, o = []; ++e < r;){\n                    var f = n[e], c = t ? t(f) : f;\n                    if (!e || !bn(c, l)) {\n                        var l = c;\n                        o[s++] = f === 0 ? 0 : f;\n                    }\n                }\n                return o;\n            }\n            function au(n) {\n                return typeof n == \"number\" ? n : pn(n) ? _e : +n;\n            }\n            function ln(n) {\n                if (typeof n == \"string\") return n;\n                if (O(n)) return G(n, ln) + \"\";\n                if (pn(n)) return Fs ? Fs.call(n) : \"\";\n                var t = n + \"\";\n                return t == \"0\" && 1 / n == -ht ? \"-0\" : t;\n            }\n            function it(n, t, e) {\n                var r = -1, s = Ee, o = n.length, f = !0, c = [], l = c;\n                if (e) f = !1, s = Dr;\n                else if (o >= w) {\n                    var v = t ? null : jc(n);\n                    if (v) return Se(v);\n                    f = !1, s = jt, l = new gt;\n                } else l = t ? [] : c;\n                n: for(; ++r < o;){\n                    var _ = n[r], m = t ? t(_) : _;\n                    if (_ = e || _ !== 0 ? _ : 0, f && m === m) {\n                        for(var P = l.length; P--;)if (l[P] === m) continue n;\n                        t && l.push(m), c.push(_);\n                    } else s(l, m, e) || (l !== c && l.push(m), c.push(_));\n                }\n                return c;\n            }\n            function si(n, t) {\n                return t = st(t, n), n = Hu(n, t), n == null || delete n[Wn(In(t))];\n            }\n            function ou(n, t, e, r) {\n                return fe(n, t, e(_t(n, t)), r);\n            }\n            function Ze(n, t, e, r) {\n                for(var s = n.length, o = r ? s : -1; (r ? o-- : ++o < s) && t(n[o], o, n););\n                return e ? Cn(n, r ? 0 : o, r ? o + 1 : s) : Cn(n, r ? o + 1 : 0, r ? s : o);\n            }\n            function fu(n, t) {\n                var e = n;\n                return e instanceof H && (e = e.value()), Nr(t, function(r, s) {\n                    return s.func.apply(s.thisArg, nt([\n                        r\n                    ], s.args));\n                }, e);\n            }\n            function ui(n, t, e) {\n                var r = n.length;\n                if (r < 2) return r ? it(n[0]) : [];\n                for(var s = -1, o = d(r); ++s < r;)for(var f = n[s], c = -1; ++c < r;)c != s && (o[s] = ue(o[s] || f, n[c], t, e));\n                return it(j(o, 1), t, e);\n            }\n            function cu(n, t, e) {\n                for(var r = -1, s = n.length, o = t.length, f = {}; ++r < s;){\n                    var c = r < o ? t[r] : i;\n                    e(f, n[r], c);\n                }\n                return f;\n            }\n            function ai(n) {\n                return Z(n) ? n : [];\n            }\n            function oi(n) {\n                return typeof n == \"function\" ? n : fn;\n            }\n            function st(n, t) {\n                return O(n) ? n : _i(n, t) ? [\n                    n\n                ] : Fu(W(n));\n            }\n            var Gc = L;\n            function ut(n, t, e) {\n                var r = n.length;\n                return e = e === i ? r : e, !t && e >= r ? n : Cn(n, t, e);\n            }\n            var hu = bf || function(n) {\n                return k.clearTimeout(n);\n            };\n            function lu(n, t) {\n                if (t) return n.slice();\n                var e = n.length, r = Ds ? Ds(e) : new n.constructor(e);\n                return n.copy(r), r;\n            }\n            function fi(n) {\n                var t = new n.constructor(n.byteLength);\n                return new De(t).set(new De(n)), t;\n            }\n            function zc(n, t) {\n                var e = t ? fi(n.buffer) : n.buffer;\n                return new n.constructor(e, n.byteOffset, n.byteLength);\n            }\n            function Kc(n) {\n                var t = new n.constructor(n.source, Xi.exec(n));\n                return t.lastIndex = n.lastIndex, t;\n            }\n            function Yc(n) {\n                return ie ? M(ie.call(n)) : {};\n            }\n            function pu(n, t) {\n                var e = t ? fi(n.buffer) : n.buffer;\n                return new n.constructor(e, n.byteOffset, n.length);\n            }\n            function du(n, t) {\n                if (n !== t) {\n                    var e = n !== i, r = n === null, s = n === n, o = pn(n), f = t !== i, c = t === null, l = t === t, v = pn(t);\n                    if (!c && !v && !o && n > t || o && f && l && !c && !v || r && f && l || !e && l || !s) return 1;\n                    if (!r && !o && !v && n < t || v && e && s && !r && !o || c && e && s || !f && s || !l) return -1;\n                }\n                return 0;\n            }\n            function Zc(n, t, e) {\n                for(var r = -1, s = n.criteria, o = t.criteria, f = s.length, c = e.length; ++r < f;){\n                    var l = du(s[r], o[r]);\n                    if (l) {\n                        if (r >= c) return l;\n                        var v = e[r];\n                        return l * (v == \"desc\" ? -1 : 1);\n                    }\n                }\n                return n.index - t.index;\n            }\n            function gu(n, t, e, r) {\n                for(var s = -1, o = n.length, f = e.length, c = -1, l = t.length, v = Q(o - f, 0), _ = d(l + v), m = !r; ++c < l;)_[c] = t[c];\n                for(; ++s < f;)(m || s < o) && (_[e[s]] = n[s]);\n                for(; v--;)_[c++] = n[s++];\n                return _;\n            }\n            function vu(n, t, e, r) {\n                for(var s = -1, o = n.length, f = -1, c = e.length, l = -1, v = t.length, _ = Q(o - c, 0), m = d(_ + v), P = !r; ++s < _;)m[s] = n[s];\n                for(var I = s; ++l < v;)m[I + l] = t[l];\n                for(; ++f < c;)(P || s < o) && (m[I + e[f]] = n[s++]);\n                return m;\n            }\n            function un(n, t) {\n                var e = -1, r = n.length;\n                for(t || (t = d(r)); ++e < r;)t[e] = n[e];\n                return t;\n            }\n            function Un(n, t, e, r) {\n                var s = !e;\n                e || (e = {});\n                for(var o = -1, f = t.length; ++o < f;){\n                    var c = t[o], l = r ? r(e[c], n[c], c, e, n) : i;\n                    l === i && (l = n[c]), s ? zn(e, c, l) : se(e, c, l);\n                }\n                return e;\n            }\n            function Jc(n, t) {\n                return Un(n, vi(n), t);\n            }\n            function Xc(n, t) {\n                return Un(n, Ru(n), t);\n            }\n            function Je(n, t) {\n                return function(e, r) {\n                    var s = O(e) ? jo : _c, o = t ? t() : {};\n                    return s(e, n, x(r, 2), o);\n                };\n            }\n            function Ft(n) {\n                return L(function(t, e) {\n                    var r = -1, s = e.length, o = s > 1 ? e[s - 1] : i, f = s > 2 ? e[2] : i;\n                    for(o = n.length > 3 && typeof o == \"function\" ? (s--, o) : i, f && rn(e[0], e[1], f) && (o = s < 3 ? i : o, s = 1), t = M(t); ++r < s;){\n                        var c = e[r];\n                        c && n(t, c, r, o);\n                    }\n                    return t;\n                });\n            }\n            function _u(n, t) {\n                return function(e, r) {\n                    if (e == null) return e;\n                    if (!an(e)) return n(e, r);\n                    for(var s = e.length, o = t ? s : -1, f = M(e); (t ? o-- : ++o < s) && r(f[o], o, f) !== !1;);\n                    return e;\n                };\n            }\n            function mu(n) {\n                return function(t, e, r) {\n                    for(var s = -1, o = M(t), f = r(t), c = f.length; c--;){\n                        var l = f[n ? c : ++s];\n                        if (e(o[l], l, o) === !1) break;\n                    }\n                    return t;\n                };\n            }\n            function Qc(n, t, e) {\n                var r = t & vn, s = ce(n);\n                function o() {\n                    var f = this && this !== k && this instanceof o ? s : n;\n                    return f.apply(r ? e : this, arguments);\n                }\n                return o;\n            }\n            function wu(n) {\n                return function(t) {\n                    t = W(t);\n                    var e = Lt(t) ? On(t) : i, r = e ? e[0] : t.charAt(0), s = e ? ut(e, 1).join(\"\") : t.slice(1);\n                    return r[n]() + s;\n                };\n            }\n            function Mt(n) {\n                return function(t) {\n                    return Nr(_a(va(t).replace(Fo, \"\")), n, \"\");\n                };\n            }\n            function ce(n) {\n                return function() {\n                    var t = arguments;\n                    switch(t.length){\n                        case 0:\n                            return new n;\n                        case 1:\n                            return new n(t[0]);\n                        case 2:\n                            return new n(t[0], t[1]);\n                        case 3:\n                            return new n(t[0], t[1], t[2]);\n                        case 4:\n                            return new n(t[0], t[1], t[2], t[3]);\n                        case 5:\n                            return new n(t[0], t[1], t[2], t[3], t[4]);\n                        case 6:\n                            return new n(t[0], t[1], t[2], t[3], t[4], t[5]);\n                        case 7:\n                            return new n(t[0], t[1], t[2], t[3], t[4], t[5], t[6]);\n                    }\n                    var e = Wt(n.prototype), r = n.apply(e, t);\n                    return K(r) ? r : e;\n                };\n            }\n            function Vc(n, t, e) {\n                var r = ce(n);\n                function s() {\n                    for(var o = arguments.length, f = d(o), c = o, l = qt(s); c--;)f[c] = arguments[c];\n                    var v = o < 3 && f[0] !== l && f[o - 1] !== l ? [] : tt(f, l);\n                    if (o -= v.length, o < e) return xu(n, t, Xe, s.placeholder, i, f, v, i, i, e - o);\n                    var _ = this && this !== k && this instanceof s ? r : n;\n                    return cn(_, this, f);\n                }\n                return s;\n            }\n            function Pu(n) {\n                return function(t, e, r) {\n                    var s = M(t);\n                    if (!an(t)) {\n                        var o = x(e, 3);\n                        t = V(t), e = function(c) {\n                            return o(s[c], c, s);\n                        };\n                    }\n                    var f = n(t, e, r);\n                    return f > -1 ? s[o ? t[f] : f] : i;\n                };\n            }\n            function Au(n) {\n                return Yn(function(t) {\n                    var e = t.length, r = e, s = Pn.prototype.thru;\n                    for(n && t.reverse(); r--;){\n                        var o = t[r];\n                        if (typeof o != \"function\") throw new wn(D);\n                        if (s && !f && je(o) == \"wrapper\") var f = new Pn([], !0);\n                    }\n                    for(r = f ? r : e; ++r < e;){\n                        o = t[r];\n                        var c = je(o), l = c == \"wrapper\" ? di(o) : i;\n                        l && mi(l[0]) && l[1] == (Mn | Dn | Nn | Kt) && !l[4].length && l[9] == 1 ? f = f[je(l[0])].apply(f, l[3]) : f = o.length == 1 && mi(o) ? f[c]() : f.thru(o);\n                    }\n                    return function() {\n                        var v = arguments, _ = v[0];\n                        if (f && v.length == 1 && O(_)) return f.plant(_).value();\n                        for(var m = 0, P = e ? t[m].apply(this, v) : _; ++m < e;)P = t[m].call(this, P);\n                        return P;\n                    };\n                });\n            }\n            function Xe(n, t, e, r, s, o, f, c, l, v) {\n                var _ = t & Mn, m = t & vn, P = t & ct, I = t & (Dn | yt), E = t & dr, T = P ? i : ce(n);\n                function y() {\n                    for(var N = arguments.length, $ = d(N), dn = N; dn--;)$[dn] = arguments[dn];\n                    if (I) var sn = qt(y), gn = ff($, sn);\n                    if (r && ($ = gu($, r, s, I)), o && ($ = vu($, o, f, I)), N -= gn, I && N < v) {\n                        var J = tt($, sn);\n                        return xu(n, t, Xe, y.placeholder, e, $, J, c, l, v - N);\n                    }\n                    var Tn = m ? e : this, Qn = P ? Tn[n] : n;\n                    return N = $.length, c ? $ = _h($, c) : E && N > 1 && $.reverse(), _ && l < N && ($.length = l), this && this !== k && this instanceof y && (Qn = T || ce(Qn)), Qn.apply(Tn, $);\n                }\n                return y;\n            }\n            function Cu(n, t) {\n                return function(e, r) {\n                    return Ec(e, n, t(r), {});\n                };\n            }\n            function Qe(n, t) {\n                return function(e, r) {\n                    var s;\n                    if (e === i && r === i) return t;\n                    if (e !== i && (s = e), r !== i) {\n                        if (s === i) return r;\n                        typeof e == \"string\" || typeof r == \"string\" ? (e = ln(e), r = ln(r)) : (e = au(e), r = au(r)), s = n(e, r);\n                    }\n                    return s;\n                };\n            }\n            function ci(n) {\n                return Yn(function(t) {\n                    return t = G(t, hn(x())), L(function(e) {\n                        var r = this;\n                        return n(t, function(s) {\n                            return cn(s, r, e);\n                        });\n                    });\n                });\n            }\n            function Ve(n, t) {\n                t = t === i ? \" \" : ln(t);\n                var e = t.length;\n                if (e < 2) return e ? ri(t, n) : t;\n                var r = ri(t, Ue(n / Dt(t)));\n                return Lt(t) ? ut(On(r), 0, n).join(\"\") : r.slice(0, n);\n            }\n            function kc(n, t, e, r) {\n                var s = t & vn, o = ce(n);\n                function f() {\n                    for(var c = -1, l = arguments.length, v = -1, _ = r.length, m = d(_ + l), P = this && this !== k && this instanceof f ? o : n; ++v < _;)m[v] = r[v];\n                    for(; l--;)m[v++] = arguments[++c];\n                    return cn(P, s ? e : this, m);\n                }\n                return f;\n            }\n            function Iu(n) {\n                return function(t, e, r) {\n                    return r && typeof r != \"number\" && rn(t, e, r) && (e = r = i), t = Xn(t), e === i ? (e = t, t = 0) : e = Xn(e), r = r === i ? t < e ? 1 : -1 : Xn(r), Uc(t, e, r, n);\n                };\n            }\n            function ke(n) {\n                return function(t, e) {\n                    return typeof t == \"string\" && typeof e == \"string\" || (t = xn(t), e = xn(e)), n(t, e);\n                };\n            }\n            function xu(n, t, e, r, s, o, f, c, l, v) {\n                var _ = t & Dn, m = _ ? f : i, P = _ ? i : f, I = _ ? o : i, E = _ ? i : o;\n                t |= _ ? Nn : St, t &= ~(_ ? St : Nn), t & Bi || (t &= ~(vn | ct));\n                var T = [\n                    n,\n                    t,\n                    s,\n                    I,\n                    m,\n                    E,\n                    P,\n                    c,\n                    l,\n                    v\n                ], y = e.apply(i, T);\n                return mi(n) && $u(y, T), y.placeholder = r, Uu(y, n, t);\n            }\n            function hi(n) {\n                var t = X[n];\n                return function(e, r) {\n                    if (e = xn(e), r = r == null ? 0 : nn(R(r), 292), r && Us(e)) {\n                        var s = (W(e) + \"e\").split(\"e\"), o = t(s[0] + \"e\" + (+s[1] + r));\n                        return s = (W(o) + \"e\").split(\"e\"), +(s[0] + \"e\" + (+s[1] - r));\n                    }\n                    return t(e);\n                };\n            }\n            var jc = $t && 1 / Se(new $t([\n                ,\n                -0\n            ]))[1] == ht ? function(n) {\n                return new $t(n);\n            } : Di;\n            function Eu(n) {\n                return function(t) {\n                    var e = tn(t);\n                    return e == yn ? qr(t) : e == Sn ? vf(t) : of(t, n(t));\n                };\n            }\n            function Kn(n, t, e, r, s, o, f, c) {\n                var l = t & ct;\n                if (!l && typeof n != \"function\") throw new wn(D);\n                var v = r ? r.length : 0;\n                if (v || (t &= ~(Nn | St), r = s = i), f = f === i ? f : Q(R(f), 0), c = c === i ? c : R(c), v -= s ? s.length : 0, t & St) {\n                    var _ = r, m = s;\n                    r = s = i;\n                }\n                var P = l ? i : di(n), I = [\n                    n,\n                    t,\n                    e,\n                    r,\n                    s,\n                    _,\n                    m,\n                    o,\n                    f,\n                    c\n                ];\n                if (P && dh(I, P), n = I[0], t = I[1], e = I[2], r = I[3], s = I[4], c = I[9] = I[9] === i ? l ? 0 : n.length : Q(I[9] - v, 0), !c && t & (Dn | yt) && (t &= ~(Dn | yt)), !t || t == vn) var E = Qc(n, t, e);\n                else t == Dn || t == yt ? E = Vc(n, t, c) : (t == Nn || t == (vn | Nn)) && !s.length ? E = kc(n, t, e, r) : E = Xe.apply(i, I);\n                var T = P ? su : $u;\n                return Uu(T(E, I), n, t);\n            }\n            function yu(n, t, e, r) {\n                return n === i || bn(n, Ht[e]) && !F.call(r, e) ? t : n;\n            }\n            function Su(n, t, e, r, s, o) {\n                return K(n) && K(t) && (o.set(t, n), Ke(n, t, i, Su, o), o.delete(t)), n;\n            }\n            function nh(n) {\n                return pe(n) ? i : n;\n            }\n            function Ou(n, t, e, r, s, o) {\n                var f = e & Et, c = n.length, l = t.length;\n                if (c != l && !(f && l > c)) return !1;\n                var v = o.get(n), _ = o.get(t);\n                if (v && _) return v == t && _ == n;\n                var m = -1, P = !0, I = e & ve ? new gt : i;\n                for(o.set(n, t), o.set(t, n); ++m < c;){\n                    var E = n[m], T = t[m];\n                    if (r) var y = f ? r(T, E, m, t, n, o) : r(E, T, m, n, t, o);\n                    if (y !== i) {\n                        if (y) continue;\n                        P = !1;\n                        break;\n                    }\n                    if (I) {\n                        if (!Hr(t, function(N, $) {\n                            if (!jt(I, $) && (E === N || s(E, N, e, r, o))) return I.push($);\n                        })) {\n                            P = !1;\n                            break;\n                        }\n                    } else if (!(E === T || s(E, T, e, r, o))) {\n                        P = !1;\n                        break;\n                    }\n                }\n                return o.delete(n), o.delete(t), P;\n            }\n            function th(n, t, e, r, s, o, f) {\n                switch(e){\n                    case Rt:\n                        if (n.byteLength != t.byteLength || n.byteOffset != t.byteOffset) return !1;\n                        n = n.buffer, t = t.buffer;\n                    case kt:\n                        return !(n.byteLength != t.byteLength || !o(new De(n), new De(t)));\n                    case Yt:\n                    case Zt:\n                    case Jt:\n                        return bn(+n, +t);\n                    case we:\n                        return n.name == t.name && n.message == t.message;\n                    case Xt:\n                    case Qt:\n                        return n == t + \"\";\n                    case yn:\n                        var c = qr;\n                    case Sn:\n                        var l = r & Et;\n                        if (c || (c = Se), n.size != t.size && !l) return !1;\n                        var v = f.get(n);\n                        if (v) return v == t;\n                        r |= ve, f.set(n, t);\n                        var _ = Ou(c(n), c(t), r, s, o, f);\n                        return f.delete(n), _;\n                    case Ae:\n                        if (ie) return ie.call(n) == ie.call(t);\n                }\n                return !1;\n            }\n            function eh(n, t, e, r, s, o) {\n                var f = e & Et, c = li(n), l = c.length, v = li(t), _ = v.length;\n                if (l != _ && !f) return !1;\n                for(var m = l; m--;){\n                    var P = c[m];\n                    if (!(f ? P in t : F.call(t, P))) return !1;\n                }\n                var I = o.get(n), E = o.get(t);\n                if (I && E) return I == t && E == n;\n                var T = !0;\n                o.set(n, t), o.set(t, n);\n                for(var y = f; ++m < l;){\n                    P = c[m];\n                    var N = n[P], $ = t[P];\n                    if (r) var dn = f ? r($, N, P, t, n, o) : r(N, $, P, n, t, o);\n                    if (!(dn === i ? N === $ || s(N, $, e, r, o) : dn)) {\n                        T = !1;\n                        break;\n                    }\n                    y || (y = P == \"constructor\");\n                }\n                if (T && !y) {\n                    var sn = n.constructor, gn = t.constructor;\n                    sn != gn && \"constructor\" in n && \"constructor\" in t && !(typeof sn == \"function\" && sn instanceof sn && typeof gn == \"function\" && gn instanceof gn) && (T = !1);\n                }\n                return o.delete(n), o.delete(t), T;\n            }\n            function Yn(n) {\n                return Pi(Nu(n, i, Gu), n + \"\");\n            }\n            function li(n) {\n                return Js(n, V, vi);\n            }\n            function pi(n) {\n                return Js(n, on, Ru);\n            }\n            var di = Fe ? function(n) {\n                return Fe.get(n);\n            } : Di;\n            function je(n) {\n                for(var t = n.name + \"\", e = Ut[t], r = F.call(Ut, t) ? e.length : 0; r--;){\n                    var s = e[r], o = s.func;\n                    if (o == null || o == n) return s.name;\n                }\n                return t;\n            }\n            function qt(n) {\n                var t = F.call(a, \"placeholder\") ? a : n;\n                return t.placeholder;\n            }\n            function x() {\n                var n = a.iteratee || Ti;\n                return n = n === Ti ? Vs : n, arguments.length ? n(arguments[0], arguments[1]) : n;\n            }\n            function nr(n, t) {\n                var e = n.__data__;\n                return ch(t) ? e[typeof t == \"string\" ? \"string\" : \"hash\"] : e.map;\n            }\n            function gi(n) {\n                for(var t = V(n), e = t.length; e--;){\n                    var r = t[e], s = n[r];\n                    t[e] = [\n                        r,\n                        s,\n                        Lu(s)\n                    ];\n                }\n                return t;\n            }\n            function mt(n, t) {\n                var e = pf(n, t);\n                return Qs(e) ? e : i;\n            }\n            function rh(n) {\n                var t = F.call(n, pt), e = n[pt];\n                try {\n                    n[pt] = i;\n                    var r = !0;\n                } catch (e) {}\n                var s = Te.call(n);\n                return r && (t ? n[pt] = e : delete n[pt]), s;\n            }\n            var vi = Gr ? function(n) {\n                return n == null ? [] : (n = M(n), jn(Gr(n), function(t) {\n                    return Hs.call(n, t);\n                }));\n            } : Ni, Ru = Gr ? function(n) {\n                for(var t = []; n;)nt(t, vi(n)), n = Ne(n);\n                return t;\n            } : Ni, tn = en;\n            (zr && tn(new zr(new ArrayBuffer(1))) != Rt || te && tn(new te) != yn || Kr && tn(Kr.resolve()) != Ki || $t && tn(new $t) != Sn || ee && tn(new ee) != Vt) && (tn = function(n) {\n                var t = en(n), e = t == qn ? n.constructor : i, r = e ? wt(e) : \"\";\n                if (r) switch(r){\n                    case Ff:\n                        return Rt;\n                    case Mf:\n                        return yn;\n                    case qf:\n                        return Ki;\n                    case Bf:\n                        return Sn;\n                    case Gf:\n                        return Vt;\n                }\n                return t;\n            });\n            function ih(n, t, e) {\n                for(var r = -1, s = e.length; ++r < s;){\n                    var o = e[r], f = o.size;\n                    switch(o.type){\n                        case \"drop\":\n                            n += f;\n                            break;\n                        case \"dropRight\":\n                            t -= f;\n                            break;\n                        case \"take\":\n                            t = nn(t, n + f);\n                            break;\n                        case \"takeRight\":\n                            n = Q(n, t - f);\n                            break;\n                    }\n                }\n                return {\n                    start: n,\n                    end: t\n                };\n            }\n            function sh(n) {\n                var t = n.match(fo);\n                return t ? t[1].split(co) : [];\n            }\n            function bu(n, t, e) {\n                t = st(t, n);\n                for(var r = -1, s = t.length, o = !1; ++r < s;){\n                    var f = Wn(t[r]);\n                    if (!(o = n != null && e(n, f))) break;\n                    n = n[f];\n                }\n                return o || ++r != s ? o : (s = n == null ? 0 : n.length, !!s && ar(s) && Zn(f, s) && (O(n) || Pt(n)));\n            }\n            function uh(n) {\n                var t = n.length, e = new n.constructor(t);\n                return t && typeof n[0] == \"string\" && F.call(n, \"index\") && (e.index = n.index, e.input = n.input), e;\n            }\n            function Tu(n) {\n                return typeof n.constructor == \"function\" && !he(n) ? Wt(Ne(n)) : {};\n            }\n            function ah(n, t, e) {\n                var r = n.constructor;\n                switch(t){\n                    case kt:\n                        return fi(n);\n                    case Yt:\n                    case Zt:\n                        return new r(+n);\n                    case Rt:\n                        return zc(n, e);\n                    case gr:\n                    case vr:\n                    case _r:\n                    case mr:\n                    case wr:\n                    case Pr:\n                    case Ar:\n                    case Cr:\n                    case Ir:\n                        return pu(n, e);\n                    case yn:\n                        return new r;\n                    case Jt:\n                    case Qt:\n                        return new r(n);\n                    case Xt:\n                        return Kc(n);\n                    case Sn:\n                        return new r;\n                    case Ae:\n                        return Yc(n);\n                }\n            }\n            function oh(n, t) {\n                var e = t.length;\n                if (!e) return n;\n                var r = e - 1;\n                return t[r] = (e > 1 ? \"& \" : \"\") + t[r], t = t.join(e > 2 ? \", \" : \" \"), n.replace(oo, \"{\\n/* [wrapped with \" + t + \"] */\\n\");\n            }\n            function fh(n) {\n                return O(n) || Pt(n) || !!($s && n && n[$s]);\n            }\n            function Zn(n, t) {\n                var e = typeof n;\n                return t = t !== null && t !== void 0 ? t : kn, !!t && (e == \"number\" || e != \"symbol\" && Po.test(n)) && n > -1 && n % 1 == 0 && n < t;\n            }\n            function rn(n, t, e) {\n                if (!K(e)) return !1;\n                var r = typeof t;\n                return (r == \"number\" ? an(e) && Zn(t, e.length) : r == \"string\" && t in e) ? bn(e[t], n) : !1;\n            }\n            function _i(n, t) {\n                if (O(n)) return !1;\n                var e = typeof n;\n                return e == \"number\" || e == \"symbol\" || e == \"boolean\" || n == null || pn(n) ? !0 : io.test(n) || !ro.test(n) || t != null && n in M(t);\n            }\n            function ch(n) {\n                var t = typeof n;\n                return t == \"string\" || t == \"number\" || t == \"symbol\" || t == \"boolean\" ? n !== \"__proto__\" : n === null;\n            }\n            function mi(n) {\n                var t = je(n), e = a[t];\n                if (typeof e != \"function\" || !(t in H.prototype)) return !1;\n                if (n === e) return !0;\n                var r = di(e);\n                return !!r && n === r[0];\n            }\n            function hh(n) {\n                return !!Ls && Ls in n;\n            }\n            var lh = Re ? Jn : Hi;\n            function he(n) {\n                var t = n && n.constructor, e = typeof t == \"function\" && t.prototype || Ht;\n                return n === e;\n            }\n            function Lu(n) {\n                return n === n && !K(n);\n            }\n            function Du(n, t) {\n                return function(e) {\n                    return e == null ? !1 : e[n] === t && (t !== i || n in M(e));\n                };\n            }\n            function ph(n) {\n                var t = sr(n, function(r) {\n                    return e.size === pr && e.clear(), r;\n                }), e = t.cache;\n                return t;\n            }\n            function dh(n, t) {\n                var e = n[1], r = t[1], s = e | r, o = s < (vn | ct | Mn), f = r == Mn && e == Dn || r == Mn && e == Kt && n[7].length <= t[8] || r == (Mn | Kt) && t[7].length <= t[8] && e == Dn;\n                if (!(o || f)) return n;\n                r & vn && (n[2] = t[2], s |= e & vn ? 0 : Bi);\n                var c = t[3];\n                if (c) {\n                    var l = n[3];\n                    n[3] = l ? gu(l, c, t[4]) : c, n[4] = l ? tt(n[3], It) : t[4];\n                }\n                return c = t[5], c && (l = n[5], n[5] = l ? vu(l, c, t[6]) : c, n[6] = l ? tt(n[5], It) : t[6]), c = t[7], c && (n[7] = c), r & Mn && (n[8] = n[8] == null ? t[8] : nn(n[8], t[8])), n[9] == null && (n[9] = t[9]), n[0] = t[0], n[1] = s, n;\n            }\n            function gh(n) {\n                var t = [];\n                if (n != null) for(var e in M(n))t.push(e);\n                return t;\n            }\n            function vh(n) {\n                return Te.call(n);\n            }\n            function Nu(n, t, e) {\n                return t = Q(t === i ? n.length - 1 : t, 0), function() {\n                    for(var r = arguments, s = -1, o = Q(r.length - t, 0), f = d(o); ++s < o;)f[s] = r[t + s];\n                    s = -1;\n                    for(var c = d(t + 1); ++s < t;)c[s] = r[s];\n                    return c[t] = e(f), cn(n, this, c);\n                };\n            }\n            function Hu(n, t) {\n                return t.length < 2 ? n : _t(n, Cn(t, 0, -1));\n            }\n            function _h(n, t) {\n                for(var e = n.length, r = nn(t.length, e), s = un(n); r--;){\n                    var o = t[r];\n                    n[r] = Zn(o, e) ? s[o] : i;\n                }\n                return n;\n            }\n            function wi(n, t) {\n                if (!(t === \"constructor\" && typeof n[t] == \"function\") && t != \"__proto__\") return n[t];\n            }\n            var $u = Wu(su), le = Lf || function(n, t) {\n                return k.setTimeout(n, t);\n            }, Pi = Wu(Mc);\n            function Uu(n, t, e) {\n                var r = t + \"\";\n                return Pi(n, oh(r, mh(sh(r), e)));\n            }\n            function Wu(n) {\n                var t = 0, e = 0;\n                return function() {\n                    var r = $f(), s = Ua - (r - e);\n                    if (e = r, s > 0) {\n                        if (++t >= $a) return arguments[0];\n                    } else t = 0;\n                    return n.apply(i, arguments);\n                };\n            }\n            function tr(n, t) {\n                var e = -1, r = n.length, s = r - 1;\n                for(t = t === i ? r : t; ++e < t;){\n                    var o = ei(e, s), f = n[o];\n                    n[o] = n[e], n[e] = f;\n                }\n                return n.length = t, n;\n            }\n            var Fu = ph(function(n) {\n                var t = [];\n                return n.charCodeAt(0) === 46 && t.push(\"\"), n.replace(so, function(e, r, s, o) {\n                    t.push(s ? o.replace(po, \"$1\") : r || e);\n                }), t;\n            });\n            function Wn(n) {\n                if (typeof n == \"string\" || pn(n)) return n;\n                var t = n + \"\";\n                return t == \"0\" && 1 / n == -ht ? \"-0\" : t;\n            }\n            function wt(n) {\n                if (n != null) {\n                    try {\n                        return be.call(n);\n                    } catch (e) {}\n                    try {\n                        return n + \"\";\n                    } catch (e) {}\n                }\n                return \"\";\n            }\n            function mh(n, t) {\n                return mn(Ga, function(e) {\n                    var r = \"_.\" + e[0];\n                    t & e[1] && !Ee(n, r) && n.push(r);\n                }), n.sort();\n            }\n            function Mu(n) {\n                if (n instanceof H) return n.clone();\n                var t = new Pn(n.__wrapped__, n.__chain__);\n                return t.__actions__ = un(n.__actions__), t.__index__ = n.__index__, t.__values__ = n.__values__, t;\n            }\n            function wh(n, t, e) {\n                (e ? rn(n, t, e) : t === i) ? t = 1 : t = Q(R(t), 0);\n                var r = n == null ? 0 : n.length;\n                if (!r || t < 1) return [];\n                for(var s = 0, o = 0, f = d(Ue(r / t)); s < r;)f[o++] = Cn(n, s, s += t);\n                return f;\n            }\n            function Ph(n) {\n                for(var t = -1, e = n == null ? 0 : n.length, r = 0, s = []; ++t < e;){\n                    var o = n[t];\n                    o && (s[r++] = o);\n                }\n                return s;\n            }\n            function Ah() {\n                var n = arguments.length;\n                if (!n) return [];\n                for(var t = d(n - 1), e = arguments[0], r = n; r--;)t[r - 1] = arguments[r];\n                return nt(O(e) ? un(e) : [\n                    e\n                ], j(t, 1));\n            }\n            var Ch = L(function(n, t) {\n                return Z(n) ? ue(n, j(t, 1, Z, !0)) : [];\n            }), Ih = L(function(n, t) {\n                var e = In(t);\n                return Z(e) && (e = i), Z(n) ? ue(n, j(t, 1, Z, !0), x(e, 2)) : [];\n            }), xh = L(function(n, t) {\n                var e = In(t);\n                return Z(e) && (e = i), Z(n) ? ue(n, j(t, 1, Z, !0), i, e) : [];\n            });\n            function Eh(n, t, e) {\n                var r = n == null ? 0 : n.length;\n                return r ? (t = e || t === i ? 1 : R(t), Cn(n, t < 0 ? 0 : t, r)) : [];\n            }\n            function yh(n, t, e) {\n                var r = n == null ? 0 : n.length;\n                return r ? (t = e || t === i ? 1 : R(t), t = r - t, Cn(n, 0, t < 0 ? 0 : t)) : [];\n            }\n            function Sh(n, t) {\n                return n && n.length ? Ze(n, x(t, 3), !0, !0) : [];\n            }\n            function Oh(n, t) {\n                return n && n.length ? Ze(n, x(t, 3), !0) : [];\n            }\n            function Rh(n, t, e, r) {\n                var s = n == null ? 0 : n.length;\n                return s ? (e && typeof e != \"number\" && rn(n, t, e) && (e = 0, r = s), Ac(n, t, e, r)) : [];\n            }\n            function qu(n, t, e) {\n                var r = n == null ? 0 : n.length;\n                if (!r) return -1;\n                var s = e == null ? 0 : R(e);\n                return s < 0 && (s = Q(r + s, 0)), ye(n, x(t, 3), s);\n            }\n            function Bu(n, t, e) {\n                var r = n == null ? 0 : n.length;\n                if (!r) return -1;\n                var s = r - 1;\n                return e !== i && (s = R(e), s = e < 0 ? Q(r + s, 0) : nn(s, r - 1)), ye(n, x(t, 3), s, !0);\n            }\n            function Gu(n) {\n                var t = n == null ? 0 : n.length;\n                return t ? j(n, 1) : [];\n            }\n            function bh(n) {\n                var t = n == null ? 0 : n.length;\n                return t ? j(n, ht) : [];\n            }\n            function Th(n, t) {\n                var e = n == null ? 0 : n.length;\n                return e ? (t = t === i ? 1 : R(t), j(n, t)) : [];\n            }\n            function Lh(n) {\n                for(var t = -1, e = n == null ? 0 : n.length, r = {}; ++t < e;){\n                    var s = n[t];\n                    r[s[0]] = s[1];\n                }\n                return r;\n            }\n            function zu(n) {\n                return n && n.length ? n[0] : i;\n            }\n            function Dh(n, t, e) {\n                var r = n == null ? 0 : n.length;\n                if (!r) return -1;\n                var s = e == null ? 0 : R(e);\n                return s < 0 && (s = Q(r + s, 0)), Tt(n, t, s);\n            }\n            function Nh(n) {\n                var t = n == null ? 0 : n.length;\n                return t ? Cn(n, 0, -1) : [];\n            }\n            var Hh = L(function(n) {\n                var t = G(n, ai);\n                return t.length && t[0] === n[0] ? Vr(t) : [];\n            }), $h = L(function(n) {\n                var t = In(n), e = G(n, ai);\n                return t === In(e) ? t = i : e.pop(), e.length && e[0] === n[0] ? Vr(e, x(t, 2)) : [];\n            }), Uh = L(function(n) {\n                var t = In(n), e = G(n, ai);\n                return t = typeof t == \"function\" ? t : i, t && e.pop(), e.length && e[0] === n[0] ? Vr(e, i, t) : [];\n            });\n            function Wh(n, t) {\n                return n == null ? \"\" : Nf.call(n, t);\n            }\n            function In(n) {\n                var t = n == null ? 0 : n.length;\n                return t ? n[t - 1] : i;\n            }\n            function Fh(n, t, e) {\n                var r = n == null ? 0 : n.length;\n                if (!r) return -1;\n                var s = r;\n                return e !== i && (s = R(e), s = s < 0 ? Q(r + s, 0) : nn(s, r - 1)), t === t ? mf(n, t, s) : ye(n, xs, s, !0);\n            }\n            function Mh(n, t) {\n                return n && n.length ? tu(n, R(t)) : i;\n            }\n            var qh = L(Ku);\n            function Ku(n, t) {\n                return n && n.length && t && t.length ? ti(n, t) : n;\n            }\n            function Bh(n, t, e) {\n                return n && n.length && t && t.length ? ti(n, t, x(e, 2)) : n;\n            }\n            function Gh(n, t, e) {\n                return n && n.length && t && t.length ? ti(n, t, i, e) : n;\n            }\n            var zh = Yn(function(n, t) {\n                var e = n == null ? 0 : n.length, r = Zr(n, t);\n                return iu(n, G(t, function(s) {\n                    return Zn(s, e) ? +s : s;\n                }).sort(du)), r;\n            });\n            function Kh(n, t) {\n                var e = [];\n                if (!(n && n.length)) return e;\n                var r = -1, s = [], o = n.length;\n                for(t = x(t, 3); ++r < o;){\n                    var f = n[r];\n                    t(f, r, n) && (e.push(f), s.push(r));\n                }\n                return iu(n, s), e;\n            }\n            function Ai(n) {\n                return n == null ? n : Wf.call(n);\n            }\n            function Yh(n, t, e) {\n                var r = n == null ? 0 : n.length;\n                return r ? (e && typeof e != \"number\" && rn(n, t, e) ? (t = 0, e = r) : (t = t == null ? 0 : R(t), e = e === i ? r : R(e)), Cn(n, t, e)) : [];\n            }\n            function Zh(n, t) {\n                return Ye(n, t);\n            }\n            function Jh(n, t, e) {\n                return ii(n, t, x(e, 2));\n            }\n            function Xh(n, t) {\n                var e = n == null ? 0 : n.length;\n                if (e) {\n                    var r = Ye(n, t);\n                    if (r < e && bn(n[r], t)) return r;\n                }\n                return -1;\n            }\n            function Qh(n, t) {\n                return Ye(n, t, !0);\n            }\n            function Vh(n, t, e) {\n                return ii(n, t, x(e, 2), !0);\n            }\n            function kh(n, t) {\n                var e = n == null ? 0 : n.length;\n                if (e) {\n                    var r = Ye(n, t, !0) - 1;\n                    if (bn(n[r], t)) return r;\n                }\n                return -1;\n            }\n            function jh(n) {\n                return n && n.length ? uu(n) : [];\n            }\n            function nl(n, t) {\n                return n && n.length ? uu(n, x(t, 2)) : [];\n            }\n            function tl(n) {\n                var t = n == null ? 0 : n.length;\n                return t ? Cn(n, 1, t) : [];\n            }\n            function el(n, t, e) {\n                return n && n.length ? (t = e || t === i ? 1 : R(t), Cn(n, 0, t < 0 ? 0 : t)) : [];\n            }\n            function rl(n, t, e) {\n                var r = n == null ? 0 : n.length;\n                return r ? (t = e || t === i ? 1 : R(t), t = r - t, Cn(n, t < 0 ? 0 : t, r)) : [];\n            }\n            function il(n, t) {\n                return n && n.length ? Ze(n, x(t, 3), !1, !0) : [];\n            }\n            function sl(n, t) {\n                return n && n.length ? Ze(n, x(t, 3)) : [];\n            }\n            var ul = L(function(n) {\n                return it(j(n, 1, Z, !0));\n            }), al = L(function(n) {\n                var t = In(n);\n                return Z(t) && (t = i), it(j(n, 1, Z, !0), x(t, 2));\n            }), ol = L(function(n) {\n                var t = In(n);\n                return t = typeof t == \"function\" ? t : i, it(j(n, 1, Z, !0), i, t);\n            });\n            function fl(n) {\n                return n && n.length ? it(n) : [];\n            }\n            function cl(n, t) {\n                return n && n.length ? it(n, x(t, 2)) : [];\n            }\n            function hl(n, t) {\n                return t = typeof t == \"function\" ? t : i, n && n.length ? it(n, i, t) : [];\n            }\n            function Ci(n) {\n                if (!(n && n.length)) return [];\n                var t = 0;\n                return n = jn(n, function(e) {\n                    if (Z(e)) return t = Q(e.length, t), !0;\n                }), Fr(t, function(e) {\n                    return G(n, $r(e));\n                });\n            }\n            function Yu(n, t) {\n                if (!(n && n.length)) return [];\n                var e = Ci(n);\n                return t == null ? e : G(e, function(r) {\n                    return cn(t, i, r);\n                });\n            }\n            var ll = L(function(n, t) {\n                return Z(n) ? ue(n, t) : [];\n            }), pl = L(function(n) {\n                return ui(jn(n, Z));\n            }), dl = L(function(n) {\n                var t = In(n);\n                return Z(t) && (t = i), ui(jn(n, Z), x(t, 2));\n            }), gl = L(function(n) {\n                var t = In(n);\n                return t = typeof t == \"function\" ? t : i, ui(jn(n, Z), i, t);\n            }), vl = L(Ci);\n            function _l(n, t) {\n                return cu(n || [], t || [], se);\n            }\n            function ml(n, t) {\n                return cu(n || [], t || [], fe);\n            }\n            var wl = L(function(n) {\n                var t = n.length, e = t > 1 ? n[t - 1] : i;\n                return e = typeof e == \"function\" ? (n.pop(), e) : i, Yu(n, e);\n            });\n            function Zu(n) {\n                var t = a(n);\n                return t.__chain__ = !0, t;\n            }\n            function Pl(n, t) {\n                return t(n), n;\n            }\n            function er(n, t) {\n                return t(n);\n            }\n            var Al = Yn(function(n) {\n                var t = n.length, e = t ? n[0] : 0, r = this.__wrapped__, s = function(o) {\n                    return Zr(o, n);\n                };\n                return t > 1 || this.__actions__.length || !(r instanceof H) || !Zn(e) ? this.thru(s) : (r = r.slice(e, +e + (t ? 1 : 0)), r.__actions__.push({\n                    func: er,\n                    args: [\n                        s\n                    ],\n                    thisArg: i\n                }), new Pn(r, this.__chain__).thru(function(o) {\n                    return t && !o.length && o.push(i), o;\n                }));\n            });\n            function Cl() {\n                return Zu(this);\n            }\n            function Il() {\n                return new Pn(this.value(), this.__chain__);\n            }\n            function xl() {\n                this.__values__ === i && (this.__values__ = aa(this.value()));\n                var n = this.__index__ >= this.__values__.length, t = n ? i : this.__values__[this.__index__++];\n                return {\n                    done: n,\n                    value: t\n                };\n            }\n            function El() {\n                return this;\n            }\n            function yl(n) {\n                for(var t, e = this; e instanceof qe;){\n                    var r = Mu(e);\n                    r.__index__ = 0, r.__values__ = i, t ? s.__wrapped__ = r : t = r;\n                    var s = r;\n                    e = e.__wrapped__;\n                }\n                return s.__wrapped__ = n, t;\n            }\n            function Sl() {\n                var n = this.__wrapped__;\n                if (n instanceof H) {\n                    var t = n;\n                    return this.__actions__.length && (t = new H(this)), t = t.reverse(), t.__actions__.push({\n                        func: er,\n                        args: [\n                            Ai\n                        ],\n                        thisArg: i\n                    }), new Pn(t, this.__chain__);\n                }\n                return this.thru(Ai);\n            }\n            function Ol() {\n                return fu(this.__wrapped__, this.__actions__);\n            }\n            var Rl = Je(function(n, t, e) {\n                F.call(n, e) ? ++n[e] : zn(n, e, 1);\n            });\n            function bl(n, t, e) {\n                var r = O(n) ? Cs : Pc;\n                return e && rn(n, t, e) && (t = i), r(n, x(t, 3));\n            }\n            function Tl(n, t) {\n                var e = O(n) ? jn : Ys;\n                return e(n, x(t, 3));\n            }\n            var Ll = Pu(qu), Dl = Pu(Bu);\n            function Nl(n, t) {\n                return j(rr(n, t), 1);\n            }\n            function Hl(n, t) {\n                return j(rr(n, t), ht);\n            }\n            function $l(n, t, e) {\n                return e = e === i ? 1 : R(e), j(rr(n, t), e);\n            }\n            function Ju(n, t) {\n                var e = O(n) ? mn : rt;\n                return e(n, x(t, 3));\n            }\n            function Xu(n, t) {\n                var e = O(n) ? nf : Ks;\n                return e(n, x(t, 3));\n            }\n            var Ul = Je(function(n, t, e) {\n                F.call(n, e) ? n[e].push(t) : zn(n, e, [\n                    t\n                ]);\n            });\n            function Wl(n, t, e, r) {\n                n = an(n) ? n : Gt(n), e = e && !r ? R(e) : 0;\n                var s = n.length;\n                return e < 0 && (e = Q(s + e, 0)), or(n) ? e <= s && n.indexOf(t, e) > -1 : !!s && Tt(n, t, e) > -1;\n            }\n            var Fl = L(function(n, t, e) {\n                var r = -1, s = typeof t == \"function\", o = an(n) ? d(n.length) : [];\n                return rt(n, function(f) {\n                    o[++r] = s ? cn(t, f, e) : ae(f, t, e);\n                }), o;\n            }), Ml = Je(function(n, t, e) {\n                zn(n, e, t);\n            });\n            function rr(n, t) {\n                var e = O(n) ? G : ks;\n                return e(n, x(t, 3));\n            }\n            function ql(n, t, e, r) {\n                return n == null ? [] : (O(t) || (t = t == null ? [] : [\n                    t\n                ]), e = r ? i : e, O(e) || (e = e == null ? [] : [\n                    e\n                ]), eu(n, t, e));\n            }\n            var Bl = Je(function(n, t, e) {\n                n[e ? 0 : 1].push(t);\n            }, function() {\n                return [\n                    [],\n                    []\n                ];\n            });\n            function Gl(n, t, e) {\n                var r = O(n) ? Nr : ys, s = arguments.length < 3;\n                return r(n, x(t, 4), e, s, rt);\n            }\n            function zl(n, t, e) {\n                var r = O(n) ? tf : ys, s = arguments.length < 3;\n                return r(n, x(t, 4), e, s, Ks);\n            }\n            function Kl(n, t) {\n                var e = O(n) ? jn : Ys;\n                return e(n, ur(x(t, 3)));\n            }\n            function Yl(n) {\n                var t = O(n) ? qs : Wc;\n                return t(n);\n            }\n            function Zl(n, t, e) {\n                (e ? rn(n, t, e) : t === i) ? t = 1 : t = R(t);\n                var r = O(n) ? gc : Fc;\n                return r(n, t);\n            }\n            function Jl(n) {\n                var t = O(n) ? vc : qc;\n                return t(n);\n            }\n            function Xl(n) {\n                if (n == null) return 0;\n                if (an(n)) return or(n) ? Dt(n) : n.length;\n                var t = tn(n);\n                return t == yn || t == Sn ? n.size : jr(n).length;\n            }\n            function Ql(n, t, e) {\n                var r = O(n) ? Hr : Bc;\n                return e && rn(n, t, e) && (t = i), r(n, x(t, 3));\n            }\n            var Vl = L(function(n, t) {\n                if (n == null) return [];\n                var e = t.length;\n                return e > 1 && rn(n, t[0], t[1]) ? t = [] : e > 2 && rn(t[0], t[1], t[2]) && (t = [\n                    t[0]\n                ]), eu(n, j(t, 1), []);\n            }), ir = Tf || function() {\n                return k.Date.now();\n            };\n            function kl(n, t) {\n                if (typeof t != \"function\") throw new wn(D);\n                return n = R(n), function() {\n                    if (--n < 1) return t.apply(this, arguments);\n                };\n            }\n            function Qu(n, t, e) {\n                return t = e ? i : t, t = n && t == null ? n.length : t, Kn(n, Mn, i, i, i, i, t);\n            }\n            function Vu(n, t) {\n                var e;\n                if (typeof t != \"function\") throw new wn(D);\n                return n = R(n), function() {\n                    return --n > 0 && (e = t.apply(this, arguments)), n <= 1 && (t = i), e;\n                };\n            }\n            var Ii = L(function(n, t, e) {\n                var r = vn;\n                if (e.length) {\n                    var s = tt(e, qt(Ii));\n                    r |= Nn;\n                }\n                return Kn(n, r, t, e, s);\n            }), ku = L(function(n, t, e) {\n                var r = vn | ct;\n                if (e.length) {\n                    var s = tt(e, qt(ku));\n                    r |= Nn;\n                }\n                return Kn(t, r, n, e, s);\n            });\n            function ju(n, t, e) {\n                t = e ? i : t;\n                var r = Kn(n, Dn, i, i, i, i, i, t);\n                return r.placeholder = ju.placeholder, r;\n            }\n            function na(n, t, e) {\n                t = e ? i : t;\n                var r = Kn(n, yt, i, i, i, i, i, t);\n                return r.placeholder = na.placeholder, r;\n            }\n            function ta(n, t, e) {\n                var r, s, o, f, c, l, v = 0, _ = !1, m = !1, P = !0;\n                if (typeof n != \"function\") throw new wn(D);\n                t = xn(t) || 0, K(e) && (_ = !!e.leading, m = \"maxWait\" in e, o = m ? Q(xn(e.maxWait) || 0, t) : o, P = \"trailing\" in e ? !!e.trailing : P);\n                function I(J) {\n                    var Tn = r, Qn = s;\n                    return r = s = i, v = J, f = n.apply(Qn, Tn), f;\n                }\n                function E(J) {\n                    return v = J, c = le(N, t), _ ? I(J) : f;\n                }\n                function T(J) {\n                    var Tn = J - l, Qn = J - v, Pa = t - Tn;\n                    return m ? nn(Pa, o - Qn) : Pa;\n                }\n                function y(J) {\n                    var Tn = J - l, Qn = J - v;\n                    return l === i || Tn >= t || Tn < 0 || m && Qn >= o;\n                }\n                function N() {\n                    var J = ir();\n                    if (y(J)) return $(J);\n                    c = le(N, T(J));\n                }\n                function $(J) {\n                    return c = i, P && r ? I(J) : (r = s = i, f);\n                }\n                function dn() {\n                    c !== i && hu(c), v = 0, r = l = s = c = i;\n                }\n                function sn() {\n                    return c === i ? f : $(ir());\n                }\n                function gn() {\n                    var J = ir(), Tn = y(J);\n                    if (r = arguments, s = this, l = J, Tn) {\n                        if (c === i) return E(l);\n                        if (m) return hu(c), c = le(N, t), I(l);\n                    }\n                    return c === i && (c = le(N, t)), f;\n                }\n                return gn.cancel = dn, gn.flush = sn, gn;\n            }\n            var jl = L(function(n, t) {\n                return zs(n, 1, t);\n            }), np = L(function(n, t, e) {\n                return zs(n, xn(t) || 0, e);\n            });\n            function tp(n) {\n                return Kn(n, dr);\n            }\n            function sr(n, t) {\n                if (typeof n != \"function\" || t != null && typeof t != \"function\") throw new wn(D);\n                var e = function() {\n                    var r = arguments, s = t ? t.apply(this, r) : r[0], o = e.cache;\n                    if (o.has(s)) return o.get(s);\n                    var f = n.apply(this, r);\n                    return e.cache = o.set(s, f) || o, f;\n                };\n                return e.cache = new (sr.Cache || Gn), e;\n            }\n            sr.Cache = Gn;\n            function ur(n) {\n                if (typeof n != \"function\") throw new wn(D);\n                return function() {\n                    var t = arguments;\n                    switch(t.length){\n                        case 0:\n                            return !n.call(this);\n                        case 1:\n                            return !n.call(this, t[0]);\n                        case 2:\n                            return !n.call(this, t[0], t[1]);\n                        case 3:\n                            return !n.call(this, t[0], t[1], t[2]);\n                    }\n                    return !n.apply(this, t);\n                };\n            }\n            function ep(n) {\n                return Vu(2, n);\n            }\n            var rp = Gc(function(n, t) {\n                t = t.length == 1 && O(t[0]) ? G(t[0], hn(x())) : G(j(t, 1), hn(x()));\n                var e = t.length;\n                return L(function(r) {\n                    for(var s = -1, o = nn(r.length, e); ++s < o;)r[s] = t[s].call(this, r[s]);\n                    return cn(n, this, r);\n                });\n            }), xi = L(function(n, t) {\n                var e = tt(t, qt(xi));\n                return Kn(n, Nn, i, t, e);\n            }), ea = L(function(n, t) {\n                var e = tt(t, qt(ea));\n                return Kn(n, St, i, t, e);\n            }), ip = Yn(function(n, t) {\n                return Kn(n, Kt, i, i, i, t);\n            });\n            function sp(n, t) {\n                if (typeof n != \"function\") throw new wn(D);\n                return t = t === i ? t : R(t), L(n, t);\n            }\n            function up(n, t) {\n                if (typeof n != \"function\") throw new wn(D);\n                return t = t == null ? 0 : Q(R(t), 0), L(function(e) {\n                    var r = e[t], s = ut(e, 0, t);\n                    return r && nt(s, r), cn(n, this, s);\n                });\n            }\n            function ap(n, t, e) {\n                var r = !0, s = !0;\n                if (typeof n != \"function\") throw new wn(D);\n                return K(e) && (r = \"leading\" in e ? !!e.leading : r, s = \"trailing\" in e ? !!e.trailing : s), ta(n, t, {\n                    leading: r,\n                    maxWait: t,\n                    trailing: s\n                });\n            }\n            function op(n) {\n                return Qu(n, 1);\n            }\n            function fp(n, t) {\n                return xi(oi(t), n);\n            }\n            function cp() {\n                if (!arguments.length) return [];\n                var n = arguments[0];\n                return O(n) ? n : [\n                    n\n                ];\n            }\n            function hp(n) {\n                return An(n, xt);\n            }\n            function lp(n, t) {\n                return t = typeof t == \"function\" ? t : i, An(n, xt, t);\n            }\n            function pp(n) {\n                return An(n, Ln | xt);\n            }\n            function dp(n, t) {\n                return t = typeof t == \"function\" ? t : i, An(n, Ln | xt, t);\n            }\n            function gp(n, t) {\n                return t == null || Gs(n, t, V(t));\n            }\n            function bn(n, t) {\n                return n === t || n !== n && t !== t;\n            }\n            var vp = ke(Qr), _p = ke(function(n, t) {\n                return n >= t;\n            }), Pt = Xs(function() {\n                return arguments;\n            }()) ? Xs : function(n) {\n                return Y(n) && F.call(n, \"callee\") && !Hs.call(n, \"callee\");\n            }, O = d.isArray, mp = vs ? hn(vs) : yc;\n            function an(n) {\n                return n != null && ar(n.length) && !Jn(n);\n            }\n            function Z(n) {\n                return Y(n) && an(n);\n            }\n            function wp(n) {\n                return n === !0 || n === !1 || Y(n) && en(n) == Yt;\n            }\n            var at = Df || Hi, Pp = _s ? hn(_s) : Sc;\n            function Ap(n) {\n                return Y(n) && n.nodeType === 1 && !pe(n);\n            }\n            function Cp(n) {\n                if (n == null) return !0;\n                if (an(n) && (O(n) || typeof n == \"string\" || typeof n.splice == \"function\" || at(n) || Bt(n) || Pt(n))) return !n.length;\n                var t = tn(n);\n                if (t == yn || t == Sn) return !n.size;\n                if (he(n)) return !jr(n).length;\n                for(var e in n)if (F.call(n, e)) return !1;\n                return !0;\n            }\n            function Ip(n, t) {\n                return oe(n, t);\n            }\n            function xp(n, t, e) {\n                e = typeof e == \"function\" ? e : i;\n                var r = e ? e(n, t) : i;\n                return r === i ? oe(n, t, i, e) : !!r;\n            }\n            function Ei(n) {\n                if (!Y(n)) return !1;\n                var t = en(n);\n                return t == we || t == Ka || typeof n.message == \"string\" && typeof n.name == \"string\" && !pe(n);\n            }\n            function Ep(n) {\n                return typeof n == \"number\" && Us(n);\n            }\n            function Jn(n) {\n                if (!K(n)) return !1;\n                var t = en(n);\n                return t == Pe || t == zi || t == za || t == Za;\n            }\n            function ra(n) {\n                return typeof n == \"number\" && n == R(n);\n            }\n            function ar(n) {\n                return typeof n == \"number\" && n > -1 && n % 1 == 0 && n <= kn;\n            }\n            function K(n) {\n                var t = typeof n;\n                return n != null && (t == \"object\" || t == \"function\");\n            }\n            function Y(n) {\n                return n != null && typeof n == \"object\";\n            }\n            var ia = ms ? hn(ms) : Rc;\n            function yp(n, t) {\n                return n === t || kr(n, t, gi(t));\n            }\n            function Sp(n, t, e) {\n                return e = typeof e == \"function\" ? e : i, kr(n, t, gi(t), e);\n            }\n            function Op(n) {\n                return sa(n) && n != +n;\n            }\n            function Rp(n) {\n                if (lh(n)) throw new S(b);\n                return Qs(n);\n            }\n            function bp(n) {\n                return n === null;\n            }\n            function Tp(n) {\n                return n == null;\n            }\n            function sa(n) {\n                return typeof n == \"number\" || Y(n) && en(n) == Jt;\n            }\n            function pe(n) {\n                if (!Y(n) || en(n) != qn) return !1;\n                var t = Ne(n);\n                if (t === null) return !0;\n                var e = F.call(t, \"constructor\") && t.constructor;\n                return typeof e == \"function\" && e instanceof e && be.call(e) == Sf;\n            }\n            var yi = ws ? hn(ws) : bc;\n            function Lp(n) {\n                return ra(n) && n >= -kn && n <= kn;\n            }\n            var ua = Ps ? hn(Ps) : Tc;\n            function or(n) {\n                return typeof n == \"string\" || !O(n) && Y(n) && en(n) == Qt;\n            }\n            function pn(n) {\n                return typeof n == \"symbol\" || Y(n) && en(n) == Ae;\n            }\n            var Bt = As ? hn(As) : Lc;\n            function Dp(n) {\n                return n === i;\n            }\n            function Np(n) {\n                return Y(n) && tn(n) == Vt;\n            }\n            function Hp(n) {\n                return Y(n) && en(n) == Xa;\n            }\n            var $p = ke(ni), Up = ke(function(n, t) {\n                return n <= t;\n            });\n            function aa(n) {\n                if (!n) return [];\n                if (an(n)) return or(n) ? On(n) : un(n);\n                if (ne && n[ne]) return gf(n[ne]());\n                var t = tn(n), e = t == yn ? qr : t == Sn ? Se : Gt;\n                return e(n);\n            }\n            function Xn(n) {\n                if (!n) return n === 0 ? n : 0;\n                if (n = xn(n), n === ht || n === -ht) {\n                    var t = n < 0 ? -1 : 1;\n                    return t * Ma;\n                }\n                return n === n ? n : 0;\n            }\n            function R(n) {\n                var t = Xn(n), e = t % 1;\n                return t === t ? e ? t - e : t : 0;\n            }\n            function oa(n) {\n                return n ? vt(R(n), 0, Hn) : 0;\n            }\n            function xn(n) {\n                if (typeof n == \"number\") return n;\n                if (pn(n)) return _e;\n                if (K(n)) {\n                    var t = typeof n.valueOf == \"function\" ? n.valueOf() : n;\n                    n = K(t) ? t + \"\" : t;\n                }\n                if (typeof n != \"string\") return n === 0 ? n : +n;\n                n = Ss(n);\n                var e = _o.test(n);\n                return e || wo.test(n) ? Vo(n.slice(2), e ? 2 : 8) : vo.test(n) ? _e : +n;\n            }\n            function fa(n) {\n                return Un(n, on(n));\n            }\n            function Wp(n) {\n                return n ? vt(R(n), -kn, kn) : n === 0 ? n : 0;\n            }\n            function W(n) {\n                return n == null ? \"\" : ln(n);\n            }\n            var Fp = Ft(function(n, t) {\n                if (he(t) || an(t)) {\n                    Un(t, V(t), n);\n                    return;\n                }\n                for(var e in t)F.call(t, e) && se(n, e, t[e]);\n            }), ca = Ft(function(n, t) {\n                Un(t, on(t), n);\n            }), fr = Ft(function(n, t, e, r) {\n                Un(t, on(t), n, r);\n            }), Mp = Ft(function(n, t, e, r) {\n                Un(t, V(t), n, r);\n            }), qp = Yn(Zr);\n            function Bp(n, t) {\n                var e = Wt(n);\n                return t == null ? e : Bs(e, t);\n            }\n            var Gp = L(function(n, t) {\n                n = M(n);\n                var e = -1, r = t.length, s = r > 2 ? t[2] : i;\n                for(s && rn(t[0], t[1], s) && (r = 1); ++e < r;)for(var o = t[e], f = on(o), c = -1, l = f.length; ++c < l;){\n                    var v = f[c], _ = n[v];\n                    (_ === i || bn(_, Ht[v]) && !F.call(n, v)) && (n[v] = o[v]);\n                }\n                return n;\n            }), zp = L(function(n) {\n                return n.push(i, Su), cn(ha, i, n);\n            });\n            function Kp(n, t) {\n                return Is(n, x(t, 3), $n);\n            }\n            function Yp(n, t) {\n                return Is(n, x(t, 3), Xr);\n            }\n            function Zp(n, t) {\n                return n == null ? n : Jr(n, x(t, 3), on);\n            }\n            function Jp(n, t) {\n                return n == null ? n : Zs(n, x(t, 3), on);\n            }\n            function Xp(n, t) {\n                return n && $n(n, x(t, 3));\n            }\n            function Qp(n, t) {\n                return n && Xr(n, x(t, 3));\n            }\n            function Vp(n) {\n                return n == null ? [] : ze(n, V(n));\n            }\n            function kp(n) {\n                return n == null ? [] : ze(n, on(n));\n            }\n            function Si(n, t, e) {\n                var r = n == null ? i : _t(n, t);\n                return r === i ? e : r;\n            }\n            function jp(n, t) {\n                return n != null && bu(n, t, Cc);\n            }\n            function Oi(n, t) {\n                return n != null && bu(n, t, Ic);\n            }\n            var nd = Cu(function(n, t, e) {\n                t != null && typeof t.toString != \"function\" && (t = Te.call(t)), n[t] = e;\n            }, bi(fn)), td = Cu(function(n, t, e) {\n                t != null && typeof t.toString != \"function\" && (t = Te.call(t)), F.call(n, t) ? n[t].push(e) : n[t] = [\n                    e\n                ];\n            }, x), ed = L(ae);\n            function V(n) {\n                return an(n) ? Ms(n) : jr(n);\n            }\n            function on(n) {\n                return an(n) ? Ms(n, !0) : Dc(n);\n            }\n            function rd(n, t) {\n                var e = {};\n                return t = x(t, 3), $n(n, function(r, s, o) {\n                    zn(e, t(r, s, o), r);\n                }), e;\n            }\n            function id(n, t) {\n                var e = {};\n                return t = x(t, 3), $n(n, function(r, s, o) {\n                    zn(e, s, t(r, s, o));\n                }), e;\n            }\n            var sd = Ft(function(n, t, e) {\n                Ke(n, t, e);\n            }), ha = Ft(function(n, t, e, r) {\n                Ke(n, t, e, r);\n            }), ud = Yn(function(n, t) {\n                var e = {};\n                if (n == null) return e;\n                var r = !1;\n                t = G(t, function(o) {\n                    return o = st(o, n), r || (r = o.length > 1), o;\n                }), Un(n, pi(n), e), r && (e = An(e, Ln | Fn | xt, nh));\n                for(var s = t.length; s--;)si(e, t[s]);\n                return e;\n            });\n            function ad(n, t) {\n                return la(n, ur(x(t)));\n            }\n            var od = Yn(function(n, t) {\n                return n == null ? {} : Hc(n, t);\n            });\n            function la(n, t) {\n                if (n == null) return {};\n                var e = G(pi(n), function(r) {\n                    return [\n                        r\n                    ];\n                });\n                return t = x(t), ru(n, e, function(r, s) {\n                    return t(r, s[0]);\n                });\n            }\n            function fd(n, t, e) {\n                t = st(t, n);\n                var r = -1, s = t.length;\n                for(s || (s = 1, n = i); ++r < s;){\n                    var o = n == null ? i : n[Wn(t[r])];\n                    o === i && (r = s, o = e), n = Jn(o) ? o.call(n) : o;\n                }\n                return n;\n            }\n            function cd(n, t, e) {\n                return n == null ? n : fe(n, t, e);\n            }\n            function hd(n, t, e, r) {\n                return r = typeof r == \"function\" ? r : i, n == null ? n : fe(n, t, e, r);\n            }\n            var pa = Eu(V), da = Eu(on);\n            function ld(n, t, e) {\n                var r = O(n), s = r || at(n) || Bt(n);\n                if (t = x(t, 4), e == null) {\n                    var o = n && n.constructor;\n                    s ? e = r ? new o : [] : K(n) ? e = Jn(o) ? Wt(Ne(n)) : {} : e = {};\n                }\n                return (s ? mn : $n)(n, function(f, c, l) {\n                    return t(e, f, c, l);\n                }), e;\n            }\n            function pd(n, t) {\n                return n == null ? !0 : si(n, t);\n            }\n            function dd(n, t, e) {\n                return n == null ? n : ou(n, t, oi(e));\n            }\n            function gd(n, t, e, r) {\n                return r = typeof r == \"function\" ? r : i, n == null ? n : ou(n, t, oi(e), r);\n            }\n            function Gt(n) {\n                return n == null ? [] : Mr(n, V(n));\n            }\n            function vd(n) {\n                return n == null ? [] : Mr(n, on(n));\n            }\n            function _d(n, t, e) {\n                return e === i && (e = t, t = i), e !== i && (e = xn(e), e = e === e ? e : 0), t !== i && (t = xn(t), t = t === t ? t : 0), vt(xn(n), t, e);\n            }\n            function md(n, t, e) {\n                return t = Xn(t), e === i ? (e = t, t = 0) : e = Xn(e), n = xn(n), xc(n, t, e);\n            }\n            function wd(n, t, e) {\n                if (e && typeof e != \"boolean\" && rn(n, t, e) && (t = e = i), e === i && (typeof t == \"boolean\" ? (e = t, t = i) : typeof n == \"boolean\" && (e = n, n = i)), n === i && t === i ? (n = 0, t = 1) : (n = Xn(n), t === i ? (t = n, n = 0) : t = Xn(t)), n > t) {\n                    var r = n;\n                    n = t, t = r;\n                }\n                if (e || n % 1 || t % 1) {\n                    var s = Ws();\n                    return nn(n + s * (t - n + Qo(\"1e-\" + ((s + \"\").length - 1))), t);\n                }\n                return ei(n, t);\n            }\n            var Pd = Mt(function(n, t, e) {\n                return t = t.toLowerCase(), n + (e ? ga(t) : t);\n            });\n            function ga(n) {\n                return Ri(W(n).toLowerCase());\n            }\n            function va(n) {\n                return n = W(n), n && n.replace(Ao, cf).replace(Mo, \"\");\n            }\n            function Ad(n, t, e) {\n                n = W(n), t = ln(t);\n                var r = n.length;\n                e = e === i ? r : vt(R(e), 0, r);\n                var s = e;\n                return e -= t.length, e >= 0 && n.slice(e, s) == t;\n            }\n            function Cd(n) {\n                return n = W(n), n && no.test(n) ? n.replace(Zi, hf) : n;\n            }\n            function Id(n) {\n                return n = W(n), n && uo.test(n) ? n.replace(xr, \"\\\\$&\") : n;\n            }\n            var xd = Mt(function(n, t, e) {\n                return n + (e ? \"-\" : \"\") + t.toLowerCase();\n            }), Ed = Mt(function(n, t, e) {\n                return n + (e ? \" \" : \"\") + t.toLowerCase();\n            }), yd = wu(\"toLowerCase\");\n            function Sd(n, t, e) {\n                n = W(n), t = R(t);\n                var r = t ? Dt(n) : 0;\n                if (!t || r >= t) return n;\n                var s = (t - r) / 2;\n                return Ve(We(s), e) + n + Ve(Ue(s), e);\n            }\n            function Od(n, t, e) {\n                n = W(n), t = R(t);\n                var r = t ? Dt(n) : 0;\n                return t && r < t ? n + Ve(t - r, e) : n;\n            }\n            function Rd(n, t, e) {\n                n = W(n), t = R(t);\n                var r = t ? Dt(n) : 0;\n                return t && r < t ? Ve(t - r, e) + n : n;\n            }\n            function bd(n, t, e) {\n                return e || t == null ? t = 0 : t && (t = +t), Uf(W(n).replace(Er, \"\"), t || 0);\n            }\n            function Td(n, t, e) {\n                return (e ? rn(n, t, e) : t === i) ? t = 1 : t = R(t), ri(W(n), t);\n            }\n            function Ld() {\n                var n = arguments, t = W(n[0]);\n                return n.length < 3 ? t : t.replace(n[1], n[2]);\n            }\n            var Dd = Mt(function(n, t, e) {\n                return n + (e ? \"_\" : \"\") + t.toLowerCase();\n            });\n            function Nd(n, t, e) {\n                return e && typeof e != \"number\" && rn(n, t, e) && (t = e = i), e = e === i ? Hn : e >>> 0, e ? (n = W(n), n && (typeof t == \"string\" || t != null && !yi(t)) && (t = ln(t), !t && Lt(n)) ? ut(On(n), 0, e) : n.split(t, e)) : [];\n            }\n            var Hd = Mt(function(n, t, e) {\n                return n + (e ? \" \" : \"\") + Ri(t);\n            });\n            function $d(n, t, e) {\n                return n = W(n), e = e == null ? 0 : vt(R(e), 0, n.length), t = ln(t), n.slice(e, e + t.length) == t;\n            }\n            function Ud(n, t, e) {\n                var r = a.templateSettings;\n                e && rn(n, t, e) && (t = i), n = W(n), t = fr({}, t, r, yu);\n                var s = fr({}, t.imports, r.imports, yu), o = V(s), f = Mr(s, o), c, l, v = 0, _ = t.interpolate || Ce, m = \"__p += '\", P = Br((t.escape || Ce).source + \"|\" + _.source + \"|\" + (_ === Ji ? go : Ce).source + \"|\" + (t.evaluate || Ce).source + \"|$\", \"g\"), I = \"//# sourceURL=\" + (F.call(t, \"sourceURL\") ? (t.sourceURL + \"\").replace(/\\s/g, \" \") : \"lodash.templateSources[\" + ++Ko + \"]\") + \"\\n\";\n                n.replace(P, function(y, N, $, dn, sn, gn) {\n                    return $ || ($ = dn), m += n.slice(v, gn).replace(Co, lf), N && (c = !0, m += \"' +\\n__e(\" + N + \") +\\n'\"), sn && (l = !0, m += \"';\\n\" + sn + \";\\n__p += '\"), $ && (m += \"' +\\n((__t = (\" + $ + \")) == null ? '' : __t) +\\n'\"), v = gn + y.length, y;\n                }), m += \"';\\n\";\n                var E = F.call(t, \"variable\") && t.variable;\n                if (!E) m = \"with (obj) {\\n\" + m + \"\\n}\\n\";\n                else if (lo.test(E)) throw new S(En);\n                m = (l ? m.replace(Qa, \"\") : m).replace(Va, \"$1\").replace(ka, \"$1;\"), m = \"function(\" + (E || \"obj\") + \") {\\n\" + (E ? \"\" : \"obj || (obj = {});\\n\") + \"var __t, __p = ''\" + (c ? \", __e = _.escape\" : \"\") + (l ? \", __j = Array.prototype.join;\\nfunction print() { __p += __j.call(arguments, '') }\\n\" : \";\\n\") + m + \"return __p\\n}\";\n                var T = ma(function() {\n                    return U(o, I + \"return \" + m).apply(i, f);\n                });\n                if (T.source = m, Ei(T)) throw T;\n                return T;\n            }\n            function Wd(n) {\n                return W(n).toLowerCase();\n            }\n            function Fd(n) {\n                return W(n).toUpperCase();\n            }\n            function Md(n, t, e) {\n                if (n = W(n), n && (e || t === i)) return Ss(n);\n                if (!n || !(t = ln(t))) return n;\n                var r = On(n), s = On(t), o = Os(r, s), f = Rs(r, s) + 1;\n                return ut(r, o, f).join(\"\");\n            }\n            function qd(n, t, e) {\n                if (n = W(n), n && (e || t === i)) return n.slice(0, Ts(n) + 1);\n                if (!n || !(t = ln(t))) return n;\n                var r = On(n), s = Rs(r, On(t)) + 1;\n                return ut(r, 0, s).join(\"\");\n            }\n            function Bd(n, t, e) {\n                if (n = W(n), n && (e || t === i)) return n.replace(Er, \"\");\n                if (!n || !(t = ln(t))) return n;\n                var r = On(n), s = Os(r, On(t));\n                return ut(r, s).join(\"\");\n            }\n            function Gd(n, t) {\n                var e = Na, r = Ha;\n                if (K(t)) {\n                    var s = \"separator\" in t ? t.separator : s;\n                    e = \"length\" in t ? R(t.length) : e, r = \"omission\" in t ? ln(t.omission) : r;\n                }\n                n = W(n);\n                var o = n.length;\n                if (Lt(n)) {\n                    var f = On(n);\n                    o = f.length;\n                }\n                if (e >= o) return n;\n                var c = e - Dt(r);\n                if (c < 1) return r;\n                var l = f ? ut(f, 0, c).join(\"\") : n.slice(0, c);\n                if (s === i) return l + r;\n                if (f && (c += l.length - c), yi(s)) {\n                    if (n.slice(c).search(s)) {\n                        var v, _ = l;\n                        for(s.global || (s = Br(s.source, W(Xi.exec(s)) + \"g\")), s.lastIndex = 0; v = s.exec(_);)var m = v.index;\n                        l = l.slice(0, m === i ? c : m);\n                    }\n                } else if (n.indexOf(ln(s), c) != c) {\n                    var P = l.lastIndexOf(s);\n                    P > -1 && (l = l.slice(0, P));\n                }\n                return l + r;\n            }\n            function zd(n) {\n                return n = W(n), n && ja.test(n) ? n.replace(Yi, wf) : n;\n            }\n            var Kd = Mt(function(n, t, e) {\n                return n + (e ? \" \" : \"\") + t.toUpperCase();\n            }), Ri = wu(\"toUpperCase\");\n            function _a(n, t, e) {\n                return n = W(n), t = e ? i : t, t === i ? df(n) ? Cf(n) : sf(n) : n.match(t) || [];\n            }\n            var ma = L(function(n, t) {\n                try {\n                    return cn(n, i, t);\n                } catch (e) {\n                    return Ei(e) ? e : new S(e);\n                }\n            }), Yd = Yn(function(n, t) {\n                return mn(t, function(e) {\n                    e = Wn(e), zn(n, e, Ii(n[e], n));\n                }), n;\n            });\n            function Zd(n) {\n                var t = n == null ? 0 : n.length, e = x();\n                return n = t ? G(n, function(r) {\n                    if (typeof r[1] != \"function\") throw new wn(D);\n                    return [\n                        e(r[0]),\n                        r[1]\n                    ];\n                }) : [], L(function(r) {\n                    for(var s = -1; ++s < t;){\n                        var o = n[s];\n                        if (cn(o[0], this, r)) return cn(o[1], this, r);\n                    }\n                });\n            }\n            function Jd(n) {\n                return wc(An(n, Ln));\n            }\n            function bi(n) {\n                return function() {\n                    return n;\n                };\n            }\n            function Xd(n, t) {\n                return n == null || n !== n ? t : n;\n            }\n            var Qd = Au(), Vd = Au(!0);\n            function fn(n) {\n                return n;\n            }\n            function Ti(n) {\n                return Vs(typeof n == \"function\" ? n : An(n, Ln));\n            }\n            function kd(n) {\n                return js(An(n, Ln));\n            }\n            function jd(n, t) {\n                return nu(n, An(t, Ln));\n            }\n            var ng = L(function(n, t) {\n                return function(e) {\n                    return ae(e, n, t);\n                };\n            }), tg = L(function(n, t) {\n                return function(e) {\n                    return ae(n, e, t);\n                };\n            });\n            function Li(n, t, e) {\n                var r = V(t), s = ze(t, r);\n                e == null && !(K(t) && (s.length || !r.length)) && (e = t, t = n, n = this, s = ze(t, V(t)));\n                var o = !(K(e) && \"chain\" in e) || !!e.chain, f = Jn(n);\n                return mn(s, function(c) {\n                    var l = t[c];\n                    n[c] = l, f && (n.prototype[c] = function() {\n                        var v = this.__chain__;\n                        if (o || v) {\n                            var _ = n(this.__wrapped__), m = _.__actions__ = un(this.__actions__);\n                            return m.push({\n                                func: l,\n                                args: arguments,\n                                thisArg: n\n                            }), _.__chain__ = v, _;\n                        }\n                        return l.apply(n, nt([\n                            this.value()\n                        ], arguments));\n                    });\n                }), n;\n            }\n            function eg() {\n                return k._ === this && (k._ = Of), this;\n            }\n            function Di() {}\n            function rg(n) {\n                return n = R(n), L(function(t) {\n                    return tu(t, n);\n                });\n            }\n            var ig = ci(G), sg = ci(Cs), ug = ci(Hr);\n            function wa(n) {\n                return _i(n) ? $r(Wn(n)) : $c(n);\n            }\n            function ag(n) {\n                return function(t) {\n                    return n == null ? i : _t(n, t);\n                };\n            }\n            var og = Iu(), fg = Iu(!0);\n            function Ni() {\n                return [];\n            }\n            function Hi() {\n                return !1;\n            }\n            function cg() {\n                return {};\n            }\n            function hg() {\n                return \"\";\n            }\n            function lg() {\n                return !0;\n            }\n            function pg(n, t) {\n                if (n = R(n), n < 1 || n > kn) return [];\n                var e = Hn, r = nn(n, Hn);\n                t = x(t), n -= Hn;\n                for(var s = Fr(r, t); ++e < n;)t(e);\n                return s;\n            }\n            function dg(n) {\n                return O(n) ? G(n, Wn) : pn(n) ? [\n                    n\n                ] : un(Fu(W(n)));\n            }\n            function gg(n) {\n                var t = ++yf;\n                return W(n) + t;\n            }\n            var vg = Qe(function(n, t) {\n                return n + t;\n            }, 0), _g = hi(\"ceil\"), mg = Qe(function(n, t) {\n                return n / t;\n            }, 1), wg = hi(\"floor\");\n            function Pg(n) {\n                return n && n.length ? Ge(n, fn, Qr) : i;\n            }\n            function Ag(n, t) {\n                return n && n.length ? Ge(n, x(t, 2), Qr) : i;\n            }\n            function Cg(n) {\n                return Es(n, fn);\n            }\n            function Ig(n, t) {\n                return Es(n, x(t, 2));\n            }\n            function xg(n) {\n                return n && n.length ? Ge(n, fn, ni) : i;\n            }\n            function Eg(n, t) {\n                return n && n.length ? Ge(n, x(t, 2), ni) : i;\n            }\n            var yg = Qe(function(n, t) {\n                return n * t;\n            }, 1), Sg = hi(\"round\"), Og = Qe(function(n, t) {\n                return n - t;\n            }, 0);\n            function Rg(n) {\n                return n && n.length ? Wr(n, fn) : 0;\n            }\n            function bg(n, t) {\n                return n && n.length ? Wr(n, x(t, 2)) : 0;\n            }\n            return a.after = kl, a.ary = Qu, a.assign = Fp, a.assignIn = ca, a.assignInWith = fr, a.assignWith = Mp, a.at = qp, a.before = Vu, a.bind = Ii, a.bindAll = Yd, a.bindKey = ku, a.castArray = cp, a.chain = Zu, a.chunk = wh, a.compact = Ph, a.concat = Ah, a.cond = Zd, a.conforms = Jd, a.constant = bi, a.countBy = Rl, a.create = Bp, a.curry = ju, a.curryRight = na, a.debounce = ta, a.defaults = Gp, a.defaultsDeep = zp, a.defer = jl, a.delay = np, a.difference = Ch, a.differenceBy = Ih, a.differenceWith = xh, a.drop = Eh, a.dropRight = yh, a.dropRightWhile = Sh, a.dropWhile = Oh, a.fill = Rh, a.filter = Tl, a.flatMap = Nl, a.flatMapDeep = Hl, a.flatMapDepth = $l, a.flatten = Gu, a.flattenDeep = bh, a.flattenDepth = Th, a.flip = tp, a.flow = Qd, a.flowRight = Vd, a.fromPairs = Lh, a.functions = Vp, a.functionsIn = kp, a.groupBy = Ul, a.initial = Nh, a.intersection = Hh, a.intersectionBy = $h, a.intersectionWith = Uh, a.invert = nd, a.invertBy = td, a.invokeMap = Fl, a.iteratee = Ti, a.keyBy = Ml, a.keys = V, a.keysIn = on, a.map = rr, a.mapKeys = rd, a.mapValues = id, a.matches = kd, a.matchesProperty = jd, a.memoize = sr, a.merge = sd, a.mergeWith = ha, a.method = ng, a.methodOf = tg, a.mixin = Li, a.negate = ur, a.nthArg = rg, a.omit = ud, a.omitBy = ad, a.once = ep, a.orderBy = ql, a.over = ig, a.overArgs = rp, a.overEvery = sg, a.overSome = ug, a.partial = xi, a.partialRight = ea, a.partition = Bl, a.pick = od, a.pickBy = la, a.property = wa, a.propertyOf = ag, a.pull = qh, a.pullAll = Ku, a.pullAllBy = Bh, a.pullAllWith = Gh, a.pullAt = zh, a.range = og, a.rangeRight = fg, a.rearg = ip, a.reject = Kl, a.remove = Kh, a.rest = sp, a.reverse = Ai, a.sampleSize = Zl, a.set = cd, a.setWith = hd, a.shuffle = Jl, a.slice = Yh, a.sortBy = Vl, a.sortedUniq = jh, a.sortedUniqBy = nl, a.split = Nd, a.spread = up, a.tail = tl, a.take = el, a.takeRight = rl, a.takeRightWhile = il, a.takeWhile = sl, a.tap = Pl, a.throttle = ap, a.thru = er, a.toArray = aa, a.toPairs = pa, a.toPairsIn = da, a.toPath = dg, a.toPlainObject = fa, a.transform = ld, a.unary = op, a.union = ul, a.unionBy = al, a.unionWith = ol, a.uniq = fl, a.uniqBy = cl, a.uniqWith = hl, a.unset = pd, a.unzip = Ci, a.unzipWith = Yu, a.update = dd, a.updateWith = gd, a.values = Gt, a.valuesIn = vd, a.without = ll, a.words = _a, a.wrap = fp, a.xor = pl, a.xorBy = dl, a.xorWith = gl, a.zip = vl, a.zipObject = _l, a.zipObjectDeep = ml, a.zipWith = wl, a.entries = pa, a.entriesIn = da, a.extend = ca, a.extendWith = fr, Li(a, a), a.add = vg, a.attempt = ma, a.camelCase = Pd, a.capitalize = ga, a.ceil = _g, a.clamp = _d, a.clone = hp, a.cloneDeep = pp, a.cloneDeepWith = dp, a.cloneWith = lp, a.conformsTo = gp, a.deburr = va, a.defaultTo = Xd, a.divide = mg, a.endsWith = Ad, a.eq = bn, a.escape = Cd, a.escapeRegExp = Id, a.every = bl, a.find = Ll, a.findIndex = qu, a.findKey = Kp, a.findLast = Dl, a.findLastIndex = Bu, a.findLastKey = Yp, a.floor = wg, a.forEach = Ju, a.forEachRight = Xu, a.forIn = Zp, a.forInRight = Jp, a.forOwn = Xp, a.forOwnRight = Qp, a.get = Si, a.gt = vp, a.gte = _p, a.has = jp, a.hasIn = Oi, a.head = zu, a.identity = fn, a.includes = Wl, a.indexOf = Dh, a.inRange = md, a.invoke = ed, a.isArguments = Pt, a.isArray = O, a.isArrayBuffer = mp, a.isArrayLike = an, a.isArrayLikeObject = Z, a.isBoolean = wp, a.isBuffer = at, a.isDate = Pp, a.isElement = Ap, a.isEmpty = Cp, a.isEqual = Ip, a.isEqualWith = xp, a.isError = Ei, a.isFinite = Ep, a.isFunction = Jn, a.isInteger = ra, a.isLength = ar, a.isMap = ia, a.isMatch = yp, a.isMatchWith = Sp, a.isNaN = Op, a.isNative = Rp, a.isNil = Tp, a.isNull = bp, a.isNumber = sa, a.isObject = K, a.isObjectLike = Y, a.isPlainObject = pe, a.isRegExp = yi, a.isSafeInteger = Lp, a.isSet = ua, a.isString = or, a.isSymbol = pn, a.isTypedArray = Bt, a.isUndefined = Dp, a.isWeakMap = Np, a.isWeakSet = Hp, a.join = Wh, a.kebabCase = xd, a.last = In, a.lastIndexOf = Fh, a.lowerCase = Ed, a.lowerFirst = yd, a.lt = $p, a.lte = Up, a.max = Pg, a.maxBy = Ag, a.mean = Cg, a.meanBy = Ig, a.min = xg, a.minBy = Eg, a.stubArray = Ni, a.stubFalse = Hi, a.stubObject = cg, a.stubString = hg, a.stubTrue = lg, a.multiply = yg, a.nth = Mh, a.noConflict = eg, a.noop = Di, a.now = ir, a.pad = Sd, a.padEnd = Od, a.padStart = Rd, a.parseInt = bd, a.random = wd, a.reduce = Gl, a.reduceRight = zl, a.repeat = Td, a.replace = Ld, a.result = fd, a.round = Sg, a.runInContext = h, a.sample = Yl, a.size = Xl, a.snakeCase = Dd, a.some = Ql, a.sortedIndex = Zh, a.sortedIndexBy = Jh, a.sortedIndexOf = Xh, a.sortedLastIndex = Qh, a.sortedLastIndexBy = Vh, a.sortedLastIndexOf = kh, a.startCase = Hd, a.startsWith = $d, a.subtract = Og, a.sum = Rg, a.sumBy = bg, a.template = Ud, a.times = pg, a.toFinite = Xn, a.toInteger = R, a.toLength = oa, a.toLower = Wd, a.toNumber = xn, a.toSafeInteger = Wp, a.toString = W, a.toUpper = Fd, a.trim = Md, a.trimEnd = qd, a.trimStart = Bd, a.truncate = Gd, a.unescape = zd, a.uniqueId = gg, a.upperCase = Kd, a.upperFirst = Ri, a.each = Ju, a.eachRight = Xu, a.first = zu, Li(a, function() {\n                var n = {};\n                return $n(a, function(t, e) {\n                    F.call(a.prototype, e) || (n[e] = t);\n                }), n;\n            }(), {\n                chain: !1\n            }), a.VERSION = p, mn([\n                \"bind\",\n                \"bindKey\",\n                \"curry\",\n                \"curryRight\",\n                \"partial\",\n                \"partialRight\"\n            ], function(n) {\n                a[n].placeholder = a;\n            }), mn([\n                \"drop\",\n                \"take\"\n            ], function(n, t) {\n                H.prototype[n] = function(e) {\n                    e = e === i ? 1 : Q(R(e), 0);\n                    var r = this.__filtered__ && !t ? new H(this) : this.clone();\n                    return r.__filtered__ ? r.__takeCount__ = nn(e, r.__takeCount__) : r.__views__.push({\n                        size: nn(e, Hn),\n                        type: n + (r.__dir__ < 0 ? \"Right\" : \"\")\n                    }), r;\n                }, H.prototype[n + \"Right\"] = function(e) {\n                    return this.reverse()[n](e).reverse();\n                };\n            }), mn([\n                \"filter\",\n                \"map\",\n                \"takeWhile\"\n            ], function(n, t) {\n                var e = t + 1, r = e == Gi || e == Fa;\n                H.prototype[n] = function(s) {\n                    var o = this.clone();\n                    return o.__iteratees__.push({\n                        iteratee: x(s, 3),\n                        type: e\n                    }), o.__filtered__ = o.__filtered__ || r, o;\n                };\n            }), mn([\n                \"head\",\n                \"last\"\n            ], function(n, t) {\n                var e = \"take\" + (t ? \"Right\" : \"\");\n                H.prototype[n] = function() {\n                    return this[e](1).value()[0];\n                };\n            }), mn([\n                \"initial\",\n                \"tail\"\n            ], function(n, t) {\n                var e = \"drop\" + (t ? \"\" : \"Right\");\n                H.prototype[n] = function() {\n                    return this.__filtered__ ? new H(this) : this[e](1);\n                };\n            }), H.prototype.compact = function() {\n                return this.filter(fn);\n            }, H.prototype.find = function(n) {\n                return this.filter(n).head();\n            }, H.prototype.findLast = function(n) {\n                return this.reverse().find(n);\n            }, H.prototype.invokeMap = L(function(n, t) {\n                return typeof n == \"function\" ? new H(this) : this.map(function(e) {\n                    return ae(e, n, t);\n                });\n            }), H.prototype.reject = function(n) {\n                return this.filter(ur(x(n)));\n            }, H.prototype.slice = function(n, t) {\n                n = R(n);\n                var e = this;\n                return e.__filtered__ && (n > 0 || t < 0) ? new H(e) : (n < 0 ? e = e.takeRight(-n) : n && (e = e.drop(n)), t !== i && (t = R(t), e = t < 0 ? e.dropRight(-t) : e.take(t - n)), e);\n            }, H.prototype.takeRightWhile = function(n) {\n                return this.reverse().takeWhile(n).reverse();\n            }, H.prototype.toArray = function() {\n                return this.take(Hn);\n            }, $n(H.prototype, function(n, t) {\n                var e = /^(?:filter|find|map|reject)|While$/.test(t), r = /^(?:head|last)$/.test(t), s = a[r ? \"take\" + (t == \"last\" ? \"Right\" : \"\") : t], o = r || /^find/.test(t);\n                s && (a.prototype[t] = function() {\n                    var f = this.__wrapped__, c = r ? [\n                        1\n                    ] : arguments, l = f instanceof H, v = c[0], _ = l || O(f), m = function(N) {\n                        var $ = s.apply(a, nt([\n                            N\n                        ], c));\n                        return r && P ? $[0] : $;\n                    };\n                    _ && e && typeof v == \"function\" && v.length != 1 && (l = _ = !1);\n                    var P = this.__chain__, I = !!this.__actions__.length, E = o && !P, T = l && !I;\n                    if (!o && _) {\n                        f = T ? f : new H(this);\n                        var y = n.apply(f, c);\n                        return y.__actions__.push({\n                            func: er,\n                            args: [\n                                m\n                            ],\n                            thisArg: i\n                        }), new Pn(y, P);\n                    }\n                    return E && T ? n.apply(this, c) : (y = this.thru(m), E ? r ? y.value()[0] : y.value() : y);\n                });\n            }), mn([\n                \"pop\",\n                \"push\",\n                \"shift\",\n                \"sort\",\n                \"splice\",\n                \"unshift\"\n            ], function(n) {\n                var t = Oe[n], e = /^(?:push|sort|unshift)$/.test(n) ? \"tap\" : \"thru\", r = /^(?:pop|shift)$/.test(n);\n                a.prototype[n] = function() {\n                    var s = arguments;\n                    if (r && !this.__chain__) {\n                        var o = this.value();\n                        return t.apply(O(o) ? o : [], s);\n                    }\n                    return this[e](function(f) {\n                        return t.apply(O(f) ? f : [], s);\n                    });\n                };\n            }), $n(H.prototype, function(n, t) {\n                var e = a[t];\n                if (e) {\n                    var r = e.name + \"\";\n                    F.call(Ut, r) || (Ut[r] = []), Ut[r].push({\n                        name: t,\n                        func: e\n                    });\n                }\n            }), Ut[Xe(i, ct).name] = [\n                {\n                    name: \"wrapper\",\n                    func: i\n                }\n            ], H.prototype.clone = zf, H.prototype.reverse = Kf, H.prototype.value = Yf, a.prototype.at = Al, a.prototype.chain = Cl, a.prototype.commit = Il, a.prototype.next = xl, a.prototype.plant = yl, a.prototype.reverse = Sl, a.prototype.toJSON = a.prototype.valueOf = a.prototype.value = Ol, a.prototype.first = a.prototype.head, ne && (a.prototype[ne] = El), a;\n        }, Nt = If();\n        lt ? ((lt.exports = Nt)._ = Nt, Tr._ = Nt) : k._ = Nt;\n    }).call(ge);\n})(Ui, Ui.exports);\nvar zg = Object.defineProperty, Kg = Object.defineProperties, Yg = Object.getOwnPropertyDescriptors, ya = Object.getOwnPropertySymbols, Zg = Object.prototype.hasOwnProperty, Jg = Object.prototype.propertyIsEnumerable, Sa = (A, u, i)=>u in A ? zg(A, u, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: i\n    }) : A[u] = i, cr = (A, u)=>{\n    for(var i in u || (u = {}))Zg.call(u, i) && Sa(A, i, u[i]);\n    if (ya) for (var i of ya(u))Jg.call(u, i) && Sa(A, i, u[i]);\n    return A;\n}, Xg = (A, u)=>Kg(A, Yg(u));\nfunction ft(A, u, i) {\n    var p;\n    const w = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseChainId)(A);\n    return ((p = u.rpcMap) == null ? void 0 : p[w.reference]) || \"\".concat(Gg, \"?chainId=\").concat(w.namespace, \":\").concat(w.reference, \"&projectId=\").concat(i);\n}\nfunction Ct(A) {\n    return A.includes(\":\") ? A.split(\":\")[1] : A;\n}\n_c = Ct;\nfunction Oa(A) {\n    return A.map((u)=>\"\".concat(u.split(\":\")[0], \":\").concat(u.split(\":\")[1]));\n}\n_c1 = Oa;\nfunction Qg(A, u) {\n    const i = Object.keys(u.namespaces).filter((w)=>w.includes(A));\n    if (!i.length) return [];\n    const p = [];\n    return i.forEach((w)=>{\n        const b = u.namespaces[w].accounts;\n        p.push(...b);\n    }), p;\n}\n_c2 = Qg;\nfunction Wi() {\n    let A = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, u = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const i = Ra(A), p = Ra(u);\n    return Ui.exports.merge(i, p);\n}\n_c3 = Wi;\nfunction Ra(A) {\n    var u, i, p, w;\n    const b = {};\n    if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidObject)(A)) return b;\n    for (const [D, En] of Object.entries(A)){\n        const zt = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isCaipNamespace)(D) ? [\n            D\n        ] : En.chains, pr = En.methods || [], It = En.events || [], Ln = En.rpcMap || {}, Fn = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseNamespaceKey)(D);\n        b[Fn] = Xg(cr(cr({}, b[Fn]), En), {\n            chains: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.mergeArrays)(zt, (u = b[Fn]) == null ? void 0 : u.chains),\n            methods: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.mergeArrays)(pr, (i = b[Fn]) == null ? void 0 : i.methods),\n            events: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.mergeArrays)(It, (p = b[Fn]) == null ? void 0 : p.events),\n            rpcMap: cr(cr({}, Ln), (w = b[Fn]) == null ? void 0 : w.rpcMap)\n        });\n    }\n    return b;\n}\n_c4 = Ra;\nfunction Vg(A) {\n    return A.includes(\":\") ? A.split(\":\")[2] : A;\n}\n_c5 = Vg;\nfunction ba(A) {\n    const u = {};\n    for (const [i, p] of Object.entries(A)){\n        const w = p.methods || [], b = p.events || [], D = p.accounts || [], En = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isCaipNamespace)(i) ? [\n            i\n        ] : p.chains ? p.chains : Oa(p.accounts);\n        u[i] = {\n            chains: En,\n            methods: w,\n            events: b,\n            accounts: D\n        };\n    }\n    return u;\n}\nfunction Fi(A) {\n    return typeof A == \"number\" ? A : A.includes(\"0x\") ? parseInt(A, 16) : (A = A.includes(\":\") ? A.split(\":\")[1] : A, isNaN(Number(A)) ? A : Number(A));\n}\n_c6 = Fi;\nconst Ta = {}, z = (A)=>Ta[A], Mi = (A, u)=>{\n    Ta[A] = u;\n};\nclass kg {\n    updateNamespace(u) {\n        this.namespace = Object.assign(this.namespace, u);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const u = this.namespace.chains[0];\n        if (!u) throw new Error(\"ChainId not found\");\n        return u.split(\":\")[1];\n    }\n    request(u) {\n        return this.namespace.methods.includes(u.request.method) ? this.client.request(u) : this.getHttpProvider().request(u.request);\n    }\n    setDefaultChain(u, i) {\n        this.httpProviders[u] || this.setHttpProvider(u, i), this.chainId = u, this.events.emit(Vn.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(u));\n    }\n    getAccounts() {\n        const u = this.namespace.accounts;\n        return u ? u.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]) || [] : [];\n    }\n    createHttpProviders() {\n        const u = {};\n        return this.namespace.chains.forEach((i)=>{\n            var p;\n            const w = Ct(i);\n            u[w] = this.createHttpProvider(w, (p = this.namespace.rpcMap) == null ? void 0 : p[i]);\n        }), u;\n    }\n    getHttpProvider() {\n        const u = \"\".concat(this.name, \":\").concat(this.chainId), i = this.httpProviders[u];\n        if (typeof i > \"u\") throw new Error(\"JSON-RPC provider for \".concat(u, \" not found\"));\n        return i;\n    }\n    setHttpProvider(u, i) {\n        const p = this.createHttpProvider(u, i);\n        p && (this.httpProviders[u] = p);\n    }\n    createHttpProvider(u, i) {\n        const p = i || ft(u, this.namespace, this.client.core.projectId);\n        if (!p) throw new Error(\"No RPC url provided for chainId: \".concat(u));\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](p, z(\"disableProviderPing\")));\n    }\n    constructor(u){\n        this.name = \"polkadot\", this.namespace = u.namespace, this.events = z(\"events\"), this.client = z(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n}\nclass jg {\n    async request(u) {\n        switch(u.request.method){\n            case \"eth_requestAccounts\":\n                return this.getAccounts();\n            case \"eth_accounts\":\n                return this.getAccounts();\n            case \"wallet_switchEthereumChain\":\n                return await this.handleSwitchChain(u);\n            case \"eth_chainId\":\n                return parseInt(this.getDefaultChain());\n        }\n        return this.namespace.methods.includes(u.request.method) ? await this.client.request(u) : this.getHttpProvider().request(u.request);\n    }\n    updateNamespace(u) {\n        this.namespace = Object.assign(this.namespace, u);\n    }\n    setDefaultChain(u, i) {\n        this.httpProviders[u] || this.setHttpProvider(parseInt(u), i), this.chainId = parseInt(u), this.events.emit(Vn.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(u));\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId.toString();\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const u = this.namespace.chains[0];\n        if (!u) throw new Error(\"ChainId not found\");\n        return u.split(\":\")[1];\n    }\n    createHttpProvider(u, i) {\n        const p = i || ft(\"\".concat(this.name, \":\").concat(u), this.namespace, this.client.core.projectId);\n        if (!p) throw new Error(\"No RPC url provided for chainId: \".concat(u));\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__.HttpConnection(p, z(\"disableProviderPing\")));\n    }\n    setHttpProvider(u, i) {\n        const p = this.createHttpProvider(u, i);\n        p && (this.httpProviders[u] = p);\n    }\n    createHttpProviders() {\n        const u = {};\n        return this.namespace.chains.forEach((i)=>{\n            var p;\n            const w = parseInt(Ct(i));\n            u[w] = this.createHttpProvider(w, (p = this.namespace.rpcMap) == null ? void 0 : p[i]);\n        }), u;\n    }\n    getAccounts() {\n        const u = this.namespace.accounts;\n        return u ? [\n            ...new Set(u.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]))\n        ] : [];\n    }\n    getHttpProvider() {\n        const u = this.chainId, i = this.httpProviders[u];\n        if (typeof i > \"u\") throw new Error(\"JSON-RPC provider for \".concat(u, \" not found\"));\n        return i;\n    }\n    async handleSwitchChain(u) {\n        var i, p;\n        let w = u.request.params ? (i = u.request.params[0]) == null ? void 0 : i.chainId : \"0x0\";\n        w = w.startsWith(\"0x\") ? w : \"0x\".concat(w);\n        const b = parseInt(w, 16);\n        if (this.isChainApproved(b)) this.setDefaultChain(\"\".concat(b));\n        else if (this.namespace.methods.includes(\"wallet_switchEthereumChain\")) await this.client.request({\n            topic: u.topic,\n            request: {\n                method: u.request.method,\n                params: [\n                    {\n                        chainId: w\n                    }\n                ]\n            },\n            chainId: (p = this.namespace.chains) == null ? void 0 : p[0]\n        }), this.setDefaultChain(\"\".concat(b));\n        else throw new Error(\"Failed to switch to chain 'eip155:\".concat(b, \"'. The chain is not approved or the wallet does not support 'wallet_switchEthereumChain' method.\"));\n        return null;\n    }\n    isChainApproved(u) {\n        return this.namespace.chains.includes(\"\".concat(this.name, \":\").concat(u));\n    }\n    constructor(u){\n        this.name = \"eip155\", this.namespace = u.namespace, this.events = z(\"events\"), this.client = z(\"client\"), this.httpProviders = this.createHttpProviders(), this.chainId = parseInt(this.getDefaultChain());\n    }\n}\nclass nv {\n    updateNamespace(u) {\n        this.namespace = Object.assign(this.namespace, u);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    request(u) {\n        return this.namespace.methods.includes(u.request.method) ? this.client.request(u) : this.getHttpProvider().request(u.request);\n    }\n    setDefaultChain(u, i) {\n        this.httpProviders[u] || this.setHttpProvider(u, i), this.chainId = u, this.events.emit(Vn.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(u));\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const u = this.namespace.chains[0];\n        if (!u) throw new Error(\"ChainId not found\");\n        return u.split(\":\")[1];\n    }\n    getAccounts() {\n        const u = this.namespace.accounts;\n        return u ? [\n            ...new Set(u.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const u = {};\n        return this.namespace.chains.forEach((i)=>{\n            var p;\n            const w = Ct(i);\n            u[w] = this.createHttpProvider(w, (p = this.namespace.rpcMap) == null ? void 0 : p[i]);\n        }), u;\n    }\n    getHttpProvider() {\n        const u = \"\".concat(this.name, \":\").concat(this.chainId), i = this.httpProviders[u];\n        if (typeof i > \"u\") throw new Error(\"JSON-RPC provider for \".concat(u, \" not found\"));\n        return i;\n    }\n    setHttpProvider(u, i) {\n        const p = this.createHttpProvider(u, i);\n        p && (this.httpProviders[u] = p);\n    }\n    createHttpProvider(u, i) {\n        const p = i || ft(u, this.namespace, this.client.core.projectId);\n        if (!p) throw new Error(\"No RPC url provided for chainId: \".concat(u));\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](p, z(\"disableProviderPing\")));\n    }\n    constructor(u){\n        this.name = \"solana\", this.namespace = u.namespace, this.events = z(\"events\"), this.client = z(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n}\nclass tv {\n    updateNamespace(u) {\n        this.namespace = Object.assign(this.namespace, u);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const u = this.namespace.chains[0];\n        if (!u) throw new Error(\"ChainId not found\");\n        return u.split(\":\")[1];\n    }\n    request(u) {\n        return this.namespace.methods.includes(u.request.method) ? this.client.request(u) : this.getHttpProvider().request(u.request);\n    }\n    setDefaultChain(u, i) {\n        this.httpProviders[u] || this.setHttpProvider(u, i), this.chainId = u, this.events.emit(Vn.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(this.chainId));\n    }\n    getAccounts() {\n        const u = this.namespace.accounts;\n        return u ? [\n            ...new Set(u.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const u = {};\n        return this.namespace.chains.forEach((i)=>{\n            var p;\n            const w = Ct(i);\n            u[w] = this.createHttpProvider(w, (p = this.namespace.rpcMap) == null ? void 0 : p[i]);\n        }), u;\n    }\n    getHttpProvider() {\n        const u = \"\".concat(this.name, \":\").concat(this.chainId), i = this.httpProviders[u];\n        if (typeof i > \"u\") throw new Error(\"JSON-RPC provider for \".concat(u, \" not found\"));\n        return i;\n    }\n    setHttpProvider(u, i) {\n        const p = this.createHttpProvider(u, i);\n        p && (this.httpProviders[u] = p);\n    }\n    createHttpProvider(u, i) {\n        const p = i || ft(u, this.namespace, this.client.core.projectId);\n        if (!p) throw new Error(\"No RPC url provided for chainId: \".concat(u));\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](p, z(\"disableProviderPing\")));\n    }\n    constructor(u){\n        this.name = \"cosmos\", this.namespace = u.namespace, this.events = z(\"events\"), this.client = z(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n}\nclass ev {\n    updateNamespace(u) {\n        this.namespace = Object.assign(this.namespace, u);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const u = this.namespace.chains[0];\n        if (!u) throw new Error(\"ChainId not found\");\n        return u.split(\":\")[1];\n    }\n    request(u) {\n        return this.namespace.methods.includes(u.request.method) ? this.client.request(u) : this.getHttpProvider().request(u.request);\n    }\n    setDefaultChain(u, i) {\n        this.httpProviders[u] || this.setHttpProvider(u, i), this.chainId = u, this.events.emit(Vn.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(this.chainId));\n    }\n    getAccounts() {\n        const u = this.namespace.accounts;\n        return u ? [\n            ...new Set(u.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const u = {};\n        return this.namespace.chains.forEach((i)=>{\n            const p = this.getCardanoRPCUrl(i), w = Ct(i);\n            u[w] = this.createHttpProvider(w, p);\n        }), u;\n    }\n    getHttpProvider() {\n        const u = \"\".concat(this.name, \":\").concat(this.chainId), i = this.httpProviders[u];\n        if (typeof i > \"u\") throw new Error(\"JSON-RPC provider for \".concat(u, \" not found\"));\n        return i;\n    }\n    getCardanoRPCUrl(u) {\n        const i = this.namespace.rpcMap;\n        if (i) return i[u];\n    }\n    setHttpProvider(u, i) {\n        const p = this.createHttpProvider(u, i);\n        p && (this.httpProviders[u] = p);\n    }\n    createHttpProvider(u, i) {\n        const p = i || this.getCardanoRPCUrl(u);\n        if (!p) throw new Error(\"No RPC url provided for chainId: \".concat(u));\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](p, z(\"disableProviderPing\")));\n    }\n    constructor(u){\n        this.name = \"cip34\", this.namespace = u.namespace, this.events = z(\"events\"), this.client = z(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n}\nclass rv {\n    updateNamespace(u) {\n        this.namespace = Object.assign(this.namespace, u);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    request(u) {\n        return this.namespace.methods.includes(u.request.method) ? this.client.request(u) : this.getHttpProvider().request(u.request);\n    }\n    setDefaultChain(u, i) {\n        this.httpProviders[u] || this.setHttpProvider(u, i), this.chainId = u, this.events.emit(Vn.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(u));\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const u = this.namespace.chains[0];\n        if (!u) throw new Error(\"ChainId not found\");\n        return u.split(\":\")[1];\n    }\n    getAccounts() {\n        const u = this.namespace.accounts;\n        return u ? [\n            ...new Set(u.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const u = {};\n        return this.namespace.chains.forEach((i)=>{\n            var p;\n            const w = Ct(i);\n            u[w] = this.createHttpProvider(w, (p = this.namespace.rpcMap) == null ? void 0 : p[i]);\n        }), u;\n    }\n    getHttpProvider() {\n        const u = \"\".concat(this.name, \":\").concat(this.chainId), i = this.httpProviders[u];\n        if (typeof i > \"u\") throw new Error(\"JSON-RPC provider for \".concat(u, \" not found\"));\n        return i;\n    }\n    setHttpProvider(u, i) {\n        const p = this.createHttpProvider(u, i);\n        p && (this.httpProviders[u] = p);\n    }\n    createHttpProvider(u, i) {\n        const p = i || ft(u, this.namespace, this.client.core.projectId);\n        if (!p) throw new Error(\"No RPC url provided for chainId: \".concat(u));\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](p, z(\"disableProviderPing\")));\n    }\n    constructor(u){\n        this.name = \"elrond\", this.namespace = u.namespace, this.events = z(\"events\"), this.client = z(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n}\nclass iv {\n    updateNamespace(u) {\n        this.namespace = Object.assign(this.namespace, u);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    request(u) {\n        return this.namespace.methods.includes(u.request.method) ? this.client.request(u) : this.getHttpProvider().request(u.request);\n    }\n    setDefaultChain(u, i) {\n        this.httpProviders[u] || this.setHttpProvider(u, i), this.chainId = u, this.events.emit(Vn.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(u));\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const u = this.namespace.chains[0];\n        if (!u) throw new Error(\"ChainId not found\");\n        return u.split(\":\")[1];\n    }\n    getAccounts() {\n        const u = this.namespace.accounts;\n        return u ? [\n            ...new Set(u.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const u = {};\n        return this.namespace.chains.forEach((i)=>{\n            var p;\n            const w = Ct(i);\n            u[w] = this.createHttpProvider(w, (p = this.namespace.rpcMap) == null ? void 0 : p[i]);\n        }), u;\n    }\n    getHttpProvider() {\n        const u = \"\".concat(this.name, \":\").concat(this.chainId), i = this.httpProviders[u];\n        if (typeof i > \"u\") throw new Error(\"JSON-RPC provider for \".concat(u, \" not found\"));\n        return i;\n    }\n    setHttpProvider(u, i) {\n        const p = this.createHttpProvider(u, i);\n        p && (this.httpProviders[u] = p);\n    }\n    createHttpProvider(u, i) {\n        const p = i || ft(u, this.namespace, this.client.core.projectId);\n        if (!p) throw new Error(\"No RPC url provided for chainId: \".concat(u));\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](p, z(\"disableProviderPing\")));\n    }\n    constructor(u){\n        this.name = \"multiversx\", this.namespace = u.namespace, this.events = z(\"events\"), this.client = z(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n}\nclass sv {\n    updateNamespace(u) {\n        this.namespace = Object.assign(this.namespace, u);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const u = this.namespace.chains[0];\n        if (!u) throw new Error(\"ChainId not found\");\n        return u.split(\":\")[1];\n    }\n    request(u) {\n        return this.namespace.methods.includes(u.request.method) ? this.client.request(u) : this.getHttpProvider().request(u.request);\n    }\n    setDefaultChain(u, i) {\n        if (this.chainId = u, !this.httpProviders[u]) {\n            const p = i || ft(\"\".concat(this.name, \":\").concat(u), this.namespace);\n            if (!p) throw new Error(\"No RPC url provided for chainId: \".concat(u));\n            this.setHttpProvider(u, p);\n        }\n        this.events.emit(Vn.DEFAULT_CHAIN_CHANGED, \"\".concat(this.name, \":\").concat(this.chainId));\n    }\n    getAccounts() {\n        const u = this.namespace.accounts;\n        return u ? u.filter((i)=>i.split(\":\")[1] === this.chainId.toString()).map((i)=>i.split(\":\")[2]) || [] : [];\n    }\n    createHttpProviders() {\n        const u = {};\n        return this.namespace.chains.forEach((i)=>{\n            var p;\n            u[i] = this.createHttpProvider(i, (p = this.namespace.rpcMap) == null ? void 0 : p[i]);\n        }), u;\n    }\n    getHttpProvider() {\n        const u = \"\".concat(this.name, \":\").concat(this.chainId), i = this.httpProviders[u];\n        if (typeof i > \"u\") throw new Error(\"JSON-RPC provider for \".concat(u, \" not found\"));\n        return i;\n    }\n    setHttpProvider(u, i) {\n        const p = this.createHttpProvider(u, i);\n        p && (this.httpProviders[u] = p);\n    }\n    createHttpProvider(u, i) {\n        const p = i || ft(u, this.namespace);\n        return typeof p > \"u\" ? void 0 : new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](p, z(\"disableProviderPing\")));\n    }\n    constructor(u){\n        this.name = \"near\", this.namespace = u.namespace, this.events = z(\"events\"), this.client = z(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n}\nvar uv = Object.defineProperty, av = Object.defineProperties, ov = Object.getOwnPropertyDescriptors, La = Object.getOwnPropertySymbols, fv = Object.prototype.hasOwnProperty, cv = Object.prototype.propertyIsEnumerable, Da = (A, u, i)=>u in A ? uv(A, u, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: i\n    }) : A[u] = i, hr = (A, u)=>{\n    for(var i in u || (u = {}))fv.call(u, i) && Da(A, i, u[i]);\n    if (La) for (var i of La(u))cv.call(u, i) && Da(A, i, u[i]);\n    return A;\n}, qi = (A, u)=>av(A, ov(u));\nclass lr {\n    static async init(u) {\n        const i = new lr(u);\n        return await i.initialize(), i;\n    }\n    async request(u, i, p) {\n        const [w, b] = this.validateChain(i);\n        if (!this.session) throw new Error(\"Please call connect() before request()\");\n        return await this.getProvider(w).request({\n            request: hr({}, u),\n            chainId: \"\".concat(w, \":\").concat(b),\n            topic: this.session.topic,\n            expiry: p\n        });\n    }\n    sendAsync(u, i, p, w) {\n        const b = new Date().getTime();\n        this.request(u, p, w).then((D)=>i(null, (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_4__.formatJsonRpcResult)(b, D))).catch((D)=>i(D, void 0));\n    }\n    async enable() {\n        if (!this.client) throw new Error(\"Sign Client not initialized\");\n        return this.session || await this.connect({\n            namespaces: this.namespaces,\n            optionalNamespaces: this.optionalNamespaces,\n            sessionProperties: this.sessionProperties\n        }), await this.requestAccounts();\n    }\n    async disconnect() {\n        var u;\n        if (!this.session) throw new Error(\"Please call connect() before enable()\");\n        await this.client.disconnect({\n            topic: (u = this.session) == null ? void 0 : u.topic,\n            reason: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")\n        }), await this.cleanup();\n    }\n    async connect(u) {\n        if (!this.client) throw new Error(\"Sign Client not initialized\");\n        if (this.setNamespaces(u), await this.cleanupPendingPairings(), !u.skipPairing) return await this.pair(u.pairingTopic);\n    }\n    async authenticate(u) {\n        if (!this.client) throw new Error(\"Sign Client not initialized\");\n        this.setNamespaces(u), await this.cleanupPendingPairings();\n        const { uri: i, response: p } = await this.client.authenticate(u);\n        i && (this.uri = i, this.events.emit(\"display_uri\", i));\n        const w = await p();\n        if (this.session = w.session, this.session) {\n            const b = ba(this.session.namespaces);\n            this.namespaces = Wi(this.namespaces, b), this.persist(\"namespaces\", this.namespaces), this.onConnect();\n        }\n        return w;\n    }\n    on(u, i) {\n        this.events.on(u, i);\n    }\n    once(u, i) {\n        this.events.once(u, i);\n    }\n    removeListener(u, i) {\n        this.events.removeListener(u, i);\n    }\n    off(u, i) {\n        this.events.off(u, i);\n    }\n    get isWalletConnect() {\n        return !0;\n    }\n    async pair(u) {\n        this.shouldAbortPairingAttempt = !1;\n        let i = 0;\n        do {\n            if (this.shouldAbortPairingAttempt) throw new Error(\"Pairing aborted\");\n            if (i >= this.maxPairingAttempts) throw new Error(\"Max auto pairing attempts reached\");\n            const { uri: p, approval: w } = await this.client.connect({\n                pairingTopic: u,\n                requiredNamespaces: this.namespaces,\n                optionalNamespaces: this.optionalNamespaces,\n                sessionProperties: this.sessionProperties\n            });\n            p && (this.uri = p, this.events.emit(\"display_uri\", p)), await w().then((b)=>{\n                this.session = b;\n                const D = ba(b.namespaces);\n                this.namespaces = Wi(this.namespaces, D), this.persist(\"namespaces\", this.namespaces);\n            }).catch((b)=>{\n                if (b.message !== _walletconnect_sign_client__WEBPACK_IMPORTED_MODULE_6__.PROPOSAL_EXPIRY_MESSAGE) throw b;\n                i++;\n            });\n        }while (!this.session);\n        return this.onConnect(), this.session;\n    }\n    setDefaultChain(u, i) {\n        try {\n            if (!this.session) return;\n            const [p, w] = this.validateChain(u);\n            this.getProvider(p).setDefaultChain(w, i);\n        } catch (p) {\n            if (!/Please call connect/.test(p.message)) throw p;\n        }\n    }\n    async cleanupPendingPairings() {\n        let u = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        this.logger.info(\"Cleaning up inactive pairings...\");\n        const i = this.client.pairing.getAll();\n        if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidArray)(i)) {\n            for (const p of i)u.deletePairings ? this.client.core.expirer.set(p.topic, 0) : await this.client.core.relayer.subscriber.unsubscribe(p.topic);\n            this.logger.info(\"Inactive pairings cleared: \".concat(i.length));\n        }\n    }\n    abortPairingAttempt() {\n        this.shouldAbortPairingAttempt = !0;\n    }\n    async checkStorage() {\n        if (this.namespaces = await this.getFromStore(\"namespaces\"), this.optionalNamespaces = await this.getFromStore(\"optionalNamespaces\") || {}, this.client.session.length) {\n            const u = this.client.session.keys.length - 1;\n            this.session = this.client.session.get(this.client.session.keys[u]), this.createProviders();\n        }\n    }\n    async initialize() {\n        this.logger.trace(\"Initialized\"), await this.createClient(), await this.checkStorage(), this.registerEventListeners();\n    }\n    async createClient() {\n        this.client = this.providerOpts.client || await _walletconnect_sign_client__WEBPACK_IMPORTED_MODULE_6__[\"default\"].init({\n            logger: this.providerOpts.logger || xa,\n            relayUrl: this.providerOpts.relayUrl || Mg,\n            projectId: this.providerOpts.projectId,\n            metadata: this.providerOpts.metadata,\n            storageOptions: this.providerOpts.storageOptions,\n            storage: this.providerOpts.storage,\n            name: this.providerOpts.name\n        }), this.logger.trace(\"SignClient Initialized\");\n    }\n    createProviders() {\n        if (!this.client) throw new Error(\"Sign Client not initialized\");\n        if (!this.session) throw new Error(\"Session not initialized. Please call connect() before enable()\");\n        const u = [\n            ...new Set(Object.keys(this.session.namespaces).map((i)=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseNamespaceKey)(i)))\n        ];\n        Mi(\"client\", this.client), Mi(\"events\", this.events), Mi(\"disableProviderPing\", this.disableProviderPing), u.forEach((i)=>{\n            if (!this.session) return;\n            const p = Qg(i, this.session), w = Oa(p), b = Wi(this.namespaces, this.optionalNamespaces), D = qi(hr({}, b[i]), {\n                accounts: p,\n                chains: w\n            });\n            switch(i){\n                case \"eip155\":\n                    this.rpcProviders[i] = new jg({\n                        namespace: D\n                    });\n                    break;\n                case \"solana\":\n                    this.rpcProviders[i] = new nv({\n                        namespace: D\n                    });\n                    break;\n                case \"cosmos\":\n                    this.rpcProviders[i] = new tv({\n                        namespace: D\n                    });\n                    break;\n                case \"polkadot\":\n                    this.rpcProviders[i] = new kg({\n                        namespace: D\n                    });\n                    break;\n                case \"cip34\":\n                    this.rpcProviders[i] = new ev({\n                        namespace: D\n                    });\n                    break;\n                case \"elrond\":\n                    this.rpcProviders[i] = new rv({\n                        namespace: D\n                    });\n                    break;\n                case \"multiversx\":\n                    this.rpcProviders[i] = new iv({\n                        namespace: D\n                    });\n                    break;\n                case \"near\":\n                    this.rpcProviders[i] = new sv({\n                        namespace: D\n                    });\n                    break;\n            }\n        });\n    }\n    registerEventListeners() {\n        if (typeof this.client > \"u\") throw new Error(\"Sign Client is not initialized\");\n        this.client.on(\"session_ping\", (u)=>{\n            this.events.emit(\"session_ping\", u);\n        }), this.client.on(\"session_event\", (u)=>{\n            const { params: i } = u, { event: p } = i;\n            if (p.name === \"accountsChanged\") {\n                const w = p.data;\n                w && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidArray)(w) && this.events.emit(\"accountsChanged\", w.map(Vg));\n            } else if (p.name === \"chainChanged\") {\n                const w = i.chainId, b = i.event.data, D = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseNamespaceKey)(w), En = Fi(w) !== Fi(b) ? \"\".concat(D, \":\").concat(Fi(b)) : w;\n                this.onChainChanged(En);\n            } else this.events.emit(p.name, p.data);\n            this.events.emit(\"session_event\", u);\n        }), this.client.on(\"session_update\", (param)=>{\n            let { topic: u, params: i } = param;\n            var p;\n            const { namespaces: w } = i, b = (p = this.client) == null ? void 0 : p.session.get(u);\n            this.session = qi(hr({}, b), {\n                namespaces: w\n            }), this.onSessionUpdate(), this.events.emit(\"session_update\", {\n                topic: u,\n                params: i\n            });\n        }), this.client.on(\"session_delete\", async (u)=>{\n            await this.cleanup(), this.events.emit(\"session_delete\", u), this.events.emit(\"disconnect\", qi(hr({}, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")), {\n                data: u.topic\n            }));\n        }), this.on(Vn.DEFAULT_CHAIN_CHANGED, (u)=>{\n            this.onChainChanged(u, !0);\n        });\n    }\n    getProvider(u) {\n        if (!this.rpcProviders[u]) throw new Error(\"Provider not found: \".concat(u));\n        return this.rpcProviders[u];\n    }\n    onSessionUpdate() {\n        Object.keys(this.rpcProviders).forEach((u)=>{\n            var i;\n            this.getProvider(u).updateNamespace((i = this.session) == null ? void 0 : i.namespaces[u]);\n        });\n    }\n    setNamespaces(u) {\n        const { namespaces: i, optionalNamespaces: p, sessionProperties: w } = u;\n        i && Object.keys(i).length && (this.namespaces = i), p && Object.keys(p).length && (this.optionalNamespaces = p), this.sessionProperties = w, this.persist(\"namespaces\", i), this.persist(\"optionalNamespaces\", p);\n    }\n    validateChain(u) {\n        const [i, p] = (u === null || u === void 0 ? void 0 : u.split(\":\")) || [\n            \"\",\n            \"\"\n        ];\n        if (!this.namespaces || !Object.keys(this.namespaces).length) return [\n            i,\n            p\n        ];\n        if (i && !Object.keys(this.namespaces || {}).map((D)=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseNamespaceKey)(D)).includes(i)) throw new Error(\"Namespace '\".concat(i, \"' is not configured. Please call connect() first with namespace config.\"));\n        if (i && p) return [\n            i,\n            p\n        ];\n        const w = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseNamespaceKey)(Object.keys(this.namespaces)[0]), b = this.rpcProviders[w].getDefaultChain();\n        return [\n            w,\n            b\n        ];\n    }\n    async requestAccounts() {\n        const [u] = this.validateChain();\n        return await this.getProvider(u).requestAccounts();\n    }\n    onChainChanged(u) {\n        let i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;\n        if (!this.namespaces) return;\n        const [p, w] = this.validateChain(u);\n        w && (i || this.getProvider(p).setDefaultChain(w), this.namespaces[p] ? this.namespaces[p].defaultChain = w : this.namespaces[\"\".concat(p, \":\").concat(w)] ? this.namespaces[\"\".concat(p, \":\").concat(w)].defaultChain = w : this.namespaces[\"\".concat(p, \":\").concat(w)] = {\n            defaultChain: w\n        }, this.persist(\"namespaces\", this.namespaces), this.events.emit(\"chainChanged\", w));\n    }\n    onConnect() {\n        this.createProviders(), this.events.emit(\"connect\", {\n            session: this.session\n        });\n    }\n    async cleanup() {\n        this.session = void 0, this.namespaces = void 0, this.optionalNamespaces = void 0, this.sessionProperties = void 0, this.persist(\"namespaces\", void 0), this.persist(\"optionalNamespaces\", void 0), this.persist(\"sessionProperties\", void 0), await this.cleanupPendingPairings({\n            deletePairings: !0\n        });\n    }\n    persist(u, i) {\n        this.client.core.storage.setItem(\"\".concat(Ea, \"/\").concat(u), i);\n    }\n    async getFromStore(u) {\n        return await this.client.core.storage.getItem(\"\".concat(Ea, \"/\").concat(u));\n    }\n    constructor(u){\n        this.events = new (events__WEBPACK_IMPORTED_MODULE_3___default()), this.rpcProviders = {}, this.shouldAbortPairingAttempt = !1, this.maxPairingAttempts = 10, this.disableProviderPing = !1, this.providerOpts = u, this.logger = typeof (u === null || u === void 0 ? void 0 : u.logger) < \"u\" && typeof (u === null || u === void 0 ? void 0 : u.logger) != \"string\" ? u.logger : (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.pino)((0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.getDefaultLoggerOptions)({\n            level: (u === null || u === void 0 ? void 0 : u.logger) || xa\n        })), this.disableProviderPing = (u === null || u === void 0 ? void 0 : u.disableProviderPing) || !1;\n    }\n}\nconst hv = lr;\n //# sourceMappingURL=index.es.js.map\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"Ct\");\n$RefreshReg$(_c1, \"Oa\");\n$RefreshReg$(_c2, \"Qg\");\n$RefreshReg$(_c3, \"Wi\");\n$RefreshReg$(_c4, \"Ra\");\n$RefreshReg$(_c5, \"Vg\");\n$RefreshReg$(_c6, \"Fi\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/universal-provider/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/core/dist/index.es.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/core/dist/index.es.js ***!
  \**********************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CORE_CONTEXT: function() { return /* binding */ Z; },\n/* harmony export */   CORE_DEFAULT: function() { return /* binding */ et; },\n/* harmony export */   CORE_PROTOCOL: function() { return /* binding */ De; },\n/* harmony export */   CORE_STORAGE_OPTIONS: function() { return /* binding */ tt; },\n/* harmony export */   CORE_STORAGE_PREFIX: function() { return /* binding */ z; },\n/* harmony export */   CORE_VERSION: function() { return /* binding */ Ze; },\n/* harmony export */   CRYPTO_CLIENT_SEED: function() { return /* binding */ ye; },\n/* harmony export */   CRYPTO_CONTEXT: function() { return /* binding */ it; },\n/* harmony export */   CRYPTO_JWT_TTL: function() { return /* binding */ st; },\n/* harmony export */   Core: function() { return /* binding */ Br; },\n/* harmony export */   Crypto: function() { return /* binding */ At; },\n/* harmony export */   ECHO_CONTEXT: function() { return /* binding */ Pt; },\n/* harmony export */   ECHO_URL: function() { return /* binding */ xt; },\n/* harmony export */   EXPIRER_CONTEXT: function() { return /* binding */ Rt; },\n/* harmony export */   EXPIRER_DEFAULT_TTL: function() { return /* binding */ vr; },\n/* harmony export */   EXPIRER_EVENTS: function() { return /* binding */ C; },\n/* harmony export */   EXPIRER_STORAGE_VERSION: function() { return /* binding */ Tt; },\n/* harmony export */   EchoClient: function() { return /* binding */ Ht; },\n/* harmony export */   Expirer: function() { return /* binding */ Gt; },\n/* harmony export */   HISTORY_CONTEXT: function() { return /* binding */ Ct; },\n/* harmony export */   HISTORY_EVENTS: function() { return /* binding */ I; },\n/* harmony export */   HISTORY_STORAGE_VERSION: function() { return /* binding */ _t; },\n/* harmony export */   JsonRpcHistory: function() { return /* binding */ jt; },\n/* harmony export */   KEYCHAIN_CONTEXT: function() { return /* binding */ rt; },\n/* harmony export */   KEYCHAIN_STORAGE_VERSION: function() { return /* binding */ nt; },\n/* harmony export */   KeyChain: function() { return /* binding */ Ot; },\n/* harmony export */   MESSAGES_CONTEXT: function() { return /* binding */ ot; },\n/* harmony export */   MESSAGES_STORAGE_VERSION: function() { return /* binding */ at; },\n/* harmony export */   MessageTracker: function() { return /* binding */ zt; },\n/* harmony export */   PAIRING_CONTEXT: function() { return /* binding */ vt; },\n/* harmony export */   PAIRING_DEFAULT_TTL: function() { return /* binding */ wr; },\n/* harmony export */   PAIRING_EVENTS: function() { return /* binding */ V; },\n/* harmony export */   PAIRING_RPC_OPTS: function() { return /* binding */ F; },\n/* harmony export */   PAIRING_STORAGE_VERSION: function() { return /* binding */ It; },\n/* harmony export */   PENDING_SUB_RESOLUTION_TIMEOUT: function() { return /* binding */ wt; },\n/* harmony export */   PUBLISHER_CONTEXT: function() { return /* binding */ ct; },\n/* harmony export */   PUBLISHER_DEFAULT_TTL: function() { return /* binding */ ht; },\n/* harmony export */   Pairing: function() { return /* binding */ qt; },\n/* harmony export */   RELAYER_CONTEXT: function() { return /* binding */ dt; },\n/* harmony export */   RELAYER_DEFAULT_LOGGER: function() { return /* binding */ ut; },\n/* harmony export */   RELAYER_DEFAULT_PROTOCOL: function() { return /* binding */ lt; },\n/* harmony export */   RELAYER_DEFAULT_RELAY_URL: function() { return /* binding */ me; },\n/* harmony export */   RELAYER_EVENTS: function() { return /* binding */ v; },\n/* harmony export */   RELAYER_FAILOVER_RELAY_URL: function() { return /* binding */ be; },\n/* harmony export */   RELAYER_PROVIDER_EVENTS: function() { return /* binding */ f; },\n/* harmony export */   RELAYER_RECONNECT_TIMEOUT: function() { return /* binding */ pt; },\n/* harmony export */   RELAYER_SDK_VERSION: function() { return /* binding */ Dt; },\n/* harmony export */   RELAYER_STORAGE_OPTIONS: function() { return /* binding */ fr; },\n/* harmony export */   RELAYER_SUBSCRIBER_SUFFIX: function() { return /* binding */ gt; },\n/* harmony export */   RELAYER_TRANSPORT_CUTOFF: function() { return /* binding */ yt; },\n/* harmony export */   Relayer: function() { return /* binding */ kt; },\n/* harmony export */   STORE_STORAGE_VERSION: function() { return /* binding */ mt; },\n/* harmony export */   SUBSCRIBER_CONTEXT: function() { return /* binding */ ft; },\n/* harmony export */   SUBSCRIBER_DEFAULT_TTL: function() { return /* binding */ Er; },\n/* harmony export */   SUBSCRIBER_EVENTS: function() { return /* binding */ S; },\n/* harmony export */   SUBSCRIBER_STORAGE_VERSION: function() { return /* binding */ Et; },\n/* harmony export */   Store: function() { return /* binding */ Vt; },\n/* harmony export */   Subscriber: function() { return /* binding */ Ut; },\n/* harmony export */   TRUSTED_VERIFY_URLS: function() { return /* binding */ St; },\n/* harmony export */   VERIFY_CONTEXT: function() { return /* binding */ ee; },\n/* harmony export */   VERIFY_FALLBACK_SERVER: function() { return /* binding */ te; },\n/* harmony export */   VERIFY_SERVER: function() { return /* binding */ k; },\n/* harmony export */   Verify: function() { return /* binding */ Yt; },\n/* harmony export */   WALLETCONNECT_CLIENT_ID: function() { return /* binding */ bt; },\n/* harmony export */   \"default\": function() { return /* binding */ ie; }\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"(app-pages-browser)/./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_keyvaluestorage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/keyvaluestorage */ \"(app-pages-browser)/./node_modules/@walletconnect/keyvaluestorage/dist/index.es.js\");\n/* harmony import */ var _walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/heartbeat */ \"(app-pages-browser)/./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/heartbeat/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @walletconnect/logger */ \"(app-pages-browser)/./node_modules/@walletconnect/logger/dist/index.es.js\");\n/* harmony import */ var _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @walletconnect/types */ \"(app-pages-browser)/./node_modules/@walletconnect/types/dist/index.es.js\");\n/* harmony import */ var _walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @walletconnect/safe-json */ \"(app-pages-browser)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @walletconnect/relay-auth */ \"(app-pages-browser)/./node_modules/@walletconnect/relay-auth/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @walletconnect/utils */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var uint8arrays__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! uint8arrays */ \"(app-pages-browser)/./node_modules/uint8arrays/esm/src/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @walletconnect/time */ \"(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @walletconnect/jsonrpc-provider */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-provider/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_jsonrpc_ws_connection__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @walletconnect/jsonrpc-ws-connection */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js\");\n/* harmony import */ var lodash_isequal__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash.isequal */ \"(app-pages-browser)/./node_modules/lodash.isequal/index.js\");\n/* harmony import */ var lodash_isequal__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(lodash_isequal__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var isomorphic_unfetch__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! isomorphic-unfetch */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/fetch/index.js\");\n/* harmony import */ var isomorphic_unfetch__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(isomorphic_unfetch__WEBPACK_IMPORTED_MODULE_12__);\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/process/browser.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction Ji(n, e) {\n    if (n.length >= 255) throw new TypeError(\"Alphabet too long\");\n    for(var t = new Uint8Array(256), i = 0; i < t.length; i++)t[i] = 255;\n    for(var s = 0; s < n.length; s++){\n        var r = n.charAt(s), o = r.charCodeAt(0);\n        if (t[o] !== 255) throw new TypeError(r + \" is ambiguous\");\n        t[o] = s;\n    }\n    var a = n.length, h = n.charAt(0), l = Math.log(a) / Math.log(256), d = Math.log(256) / Math.log(a);\n    function g(u) {\n        if (u instanceof Uint8Array || (ArrayBuffer.isView(u) ? u = new Uint8Array(u.buffer, u.byteOffset, u.byteLength) : Array.isArray(u) && (u = Uint8Array.from(u))), !(u instanceof Uint8Array)) throw new TypeError(\"Expected Uint8Array\");\n        if (u.length === 0) return \"\";\n        for(var p = 0, _ = 0, D = 0, P = u.length; D !== P && u[D] === 0;)D++, p++;\n        for(var x = (P - D) * d + 1 >>> 0, E = new Uint8Array(x); D !== P;){\n            for(var O = u[D], N = 0, R = x - 1; (O !== 0 || N < _) && R !== -1; R--, N++)O += 256 * E[R] >>> 0, E[R] = O % a >>> 0, O = O / a >>> 0;\n            if (O !== 0) throw new Error(\"Non-zero carry\");\n            _ = N, D++;\n        }\n        for(var A = x - _; A !== x && E[A] === 0;)A++;\n        for(var j = h.repeat(p); A < x; ++A)j += n.charAt(E[A]);\n        return j;\n    }\n    function m(u) {\n        if (typeof u != \"string\") throw new TypeError(\"Expected String\");\n        if (u.length === 0) return new Uint8Array;\n        var p = 0;\n        if (u[p] !== \" \") {\n            for(var _ = 0, D = 0; u[p] === h;)_++, p++;\n            for(var P = (u.length - p) * l + 1 >>> 0, x = new Uint8Array(P); u[p];){\n                var E = t[u.charCodeAt(p)];\n                if (E === 255) return;\n                for(var O = 0, N = P - 1; (E !== 0 || O < D) && N !== -1; N--, O++)E += a * x[N] >>> 0, x[N] = E % 256 >>> 0, E = E / 256 >>> 0;\n                if (E !== 0) throw new Error(\"Non-zero carry\");\n                D = O, p++;\n            }\n            if (u[p] !== \" \") {\n                for(var R = P - D; R !== P && x[R] === 0;)R++;\n                for(var A = new Uint8Array(_ + (P - R)), j = _; R !== P;)A[j++] = x[R++];\n                return A;\n            }\n        }\n    }\n    function L(u) {\n        var p = m(u);\n        if (p) return p;\n        throw new Error(\"Non-\".concat(e, \" character\"));\n    }\n    return {\n        encode: g,\n        decodeUnsafe: m,\n        decode: L\n    };\n}\n_c = Ji;\nvar Xi = Ji, Wi = Xi;\nconst Ue = (n)=>{\n    if (n instanceof Uint8Array && n.constructor.name === \"Uint8Array\") return n;\n    if (n instanceof ArrayBuffer) return new Uint8Array(n);\n    if (ArrayBuffer.isView(n)) return new Uint8Array(n.buffer, n.byteOffset, n.byteLength);\n    throw new Error(\"Unknown type, must be binary type\");\n}, Qi = (n)=>new TextEncoder().encode(n), Zi = (n)=>new TextDecoder().decode(n);\nclass es {\n    encode(e) {\n        if (e instanceof Uint8Array) return \"\".concat(this.prefix).concat(this.baseEncode(e));\n        throw Error(\"Unknown type, must be binary type\");\n    }\n    constructor(e, t, i){\n        this.name = e, this.prefix = t, this.baseEncode = i;\n    }\n}\nclass ts {\n    decode(e) {\n        if (typeof e == \"string\") {\n            if (e.codePointAt(0) !== this.prefixCodePoint) throw Error(\"Unable to decode multibase string \".concat(JSON.stringify(e), \", \").concat(this.name, \" decoder only supports inputs prefixed with \").concat(this.prefix));\n            return this.baseDecode(e.slice(this.prefix.length));\n        } else throw Error(\"Can only multibase decode strings\");\n    }\n    or(e) {\n        return $e(this, e);\n    }\n    constructor(e, t, i){\n        if (this.name = e, this.prefix = t, t.codePointAt(0) === void 0) throw new Error(\"Invalid prefix character\");\n        this.prefixCodePoint = t.codePointAt(0), this.baseDecode = i;\n    }\n}\nclass is {\n    or(e) {\n        return $e(this, e);\n    }\n    decode(e) {\n        const t = e[0], i = this.decoders[t];\n        if (i) return i.decode(e);\n        throw RangeError(\"Unable to decode multibase string \".concat(JSON.stringify(e), \", only inputs prefixed with \").concat(Object.keys(this.decoders), \" are supported\"));\n    }\n    constructor(e){\n        this.decoders = e;\n    }\n}\nconst $e = (n, e)=>new is({\n        ...n.decoders || {\n            [n.prefix]: n\n        },\n        ...e.decoders || {\n            [e.prefix]: e\n        }\n    });\nclass ss {\n    encode(e) {\n        return this.encoder.encode(e);\n    }\n    decode(e) {\n        return this.decoder.decode(e);\n    }\n    constructor(e, t, i, s){\n        this.name = e, this.prefix = t, this.baseEncode = i, this.baseDecode = s, this.encoder = new es(e, t, i), this.decoder = new ts(e, t, s);\n    }\n}\nconst Q = (param)=>{\n    let { name: n, prefix: e, encode: t, decode: i } = param;\n    return new ss(n, e, t, i);\n}, K = (param)=>{\n    let { prefix: n, name: e, alphabet: t } = param;\n    const { encode: i, decode: s } = Wi(t, e);\n    return Q({\n        prefix: n,\n        name: e,\n        encode: i,\n        decode: (r)=>Ue(s(r))\n    });\n}, rs = (n, e, t, i)=>{\n    const s = {};\n    for(let d = 0; d < e.length; ++d)s[e[d]] = d;\n    let r = n.length;\n    for(; n[r - 1] === \"=\";)--r;\n    const o = new Uint8Array(r * t / 8 | 0);\n    let a = 0, h = 0, l = 0;\n    for(let d = 0; d < r; ++d){\n        const g = s[n[d]];\n        if (g === void 0) throw new SyntaxError(\"Non-\".concat(i, \" character\"));\n        h = h << t | g, a += t, a >= 8 && (a -= 8, o[l++] = 255 & h >> a);\n    }\n    if (a >= t || 255 & h << 8 - a) throw new SyntaxError(\"Unexpected end of data\");\n    return o;\n}, ns = (n, e, t)=>{\n    const i = e[e.length - 1] === \"=\", s = (1 << t) - 1;\n    let r = \"\", o = 0, a = 0;\n    for(let h = 0; h < n.length; ++h)for(a = a << 8 | n[h], o += 8; o > t;)o -= t, r += e[s & a >> o];\n    if (o && (r += e[s & a << t - o]), i) for(; r.length * t & 7;)r += \"=\";\n    return r;\n}, y = (param)=>{\n    let { name: n, prefix: e, bitsPerChar: t, alphabet: i } = param;\n    return Q({\n        prefix: e,\n        name: n,\n        encode (s) {\n            return ns(s, i, t);\n        },\n        decode (s) {\n            return rs(s, i, t, n);\n        }\n    });\n}, os = Q({\n    prefix: \"\\x00\",\n    name: \"identity\",\n    encode: (n)=>Zi(n),\n    decode: (n)=>Qi(n)\n});\nvar as = Object.freeze({\n    __proto__: null,\n    identity: os\n});\nconst hs = y({\n    prefix: \"0\",\n    name: \"base2\",\n    alphabet: \"01\",\n    bitsPerChar: 1\n});\nvar cs = Object.freeze({\n    __proto__: null,\n    base2: hs\n});\nconst ls = y({\n    prefix: \"7\",\n    name: \"base8\",\n    alphabet: \"01234567\",\n    bitsPerChar: 3\n});\nvar us = Object.freeze({\n    __proto__: null,\n    base8: ls\n});\nconst ds = K({\n    prefix: \"9\",\n    name: \"base10\",\n    alphabet: \"0123456789\"\n});\nvar gs = Object.freeze({\n    __proto__: null,\n    base10: ds\n});\nconst ps = y({\n    prefix: \"f\",\n    name: \"base16\",\n    alphabet: \"0123456789abcdef\",\n    bitsPerChar: 4\n}), Ds = y({\n    prefix: \"F\",\n    name: \"base16upper\",\n    alphabet: \"0123456789ABCDEF\",\n    bitsPerChar: 4\n});\nvar ys = Object.freeze({\n    __proto__: null,\n    base16: ps,\n    base16upper: Ds\n});\nconst ms = y({\n    prefix: \"b\",\n    name: \"base32\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567\",\n    bitsPerChar: 5\n}), bs = y({\n    prefix: \"B\",\n    name: \"base32upper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\",\n    bitsPerChar: 5\n}), fs = y({\n    prefix: \"c\",\n    name: \"base32pad\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567=\",\n    bitsPerChar: 5\n}), Es = y({\n    prefix: \"C\",\n    name: \"base32padupper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=\",\n    bitsPerChar: 5\n}), ws = y({\n    prefix: \"v\",\n    name: \"base32hex\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv\",\n    bitsPerChar: 5\n}), vs = y({\n    prefix: \"V\",\n    name: \"base32hexupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV\",\n    bitsPerChar: 5\n}), Is = y({\n    prefix: \"t\",\n    name: \"base32hexpad\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv=\",\n    bitsPerChar: 5\n}), Cs = y({\n    prefix: \"T\",\n    name: \"base32hexpadupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV=\",\n    bitsPerChar: 5\n}), _s = y({\n    prefix: \"h\",\n    name: \"base32z\",\n    alphabet: \"ybndrfg8ejkmcpqxot1uwisza345h769\",\n    bitsPerChar: 5\n});\nvar Rs = Object.freeze({\n    __proto__: null,\n    base32: ms,\n    base32upper: bs,\n    base32pad: fs,\n    base32padupper: Es,\n    base32hex: ws,\n    base32hexupper: vs,\n    base32hexpad: Is,\n    base32hexpadupper: Cs,\n    base32z: _s\n});\nconst Ts = K({\n    prefix: \"k\",\n    name: \"base36\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuvwxyz\"\n}), Ss = K({\n    prefix: \"K\",\n    name: \"base36upper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n});\nvar Ps = Object.freeze({\n    __proto__: null,\n    base36: Ts,\n    base36upper: Ss\n});\nconst xs = K({\n    name: \"base58btc\",\n    prefix: \"z\",\n    alphabet: \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n}), Os = K({\n    name: \"base58flickr\",\n    prefix: \"Z\",\n    alphabet: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\"\n});\nvar As = Object.freeze({\n    __proto__: null,\n    base58btc: xs,\n    base58flickr: Os\n});\nconst zs = y({\n    prefix: \"m\",\n    name: \"base64\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\n    bitsPerChar: 6\n}), Ns = y({\n    prefix: \"M\",\n    name: \"base64pad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n    bitsPerChar: 6\n}), Ls = y({\n    prefix: \"u\",\n    name: \"base64url\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\",\n    bitsPerChar: 6\n}), Us = y({\n    prefix: \"U\",\n    name: \"base64urlpad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\",\n    bitsPerChar: 6\n});\nvar $s = Object.freeze({\n    __proto__: null,\n    base64: zs,\n    base64pad: Ns,\n    base64url: Ls,\n    base64urlpad: Us\n});\nconst Fe = Array.from(\"\\uD83D\\uDE80\\uD83E\\uDE90☄\\uD83D\\uDEF0\\uD83C\\uDF0C\\uD83C\\uDF11\\uD83C\\uDF12\\uD83C\\uDF13\\uD83C\\uDF14\\uD83C\\uDF15\\uD83C\\uDF16\\uD83C\\uDF17\\uD83C\\uDF18\\uD83C\\uDF0D\\uD83C\\uDF0F\\uD83C\\uDF0E\\uD83D\\uDC09☀\\uD83D\\uDCBB\\uD83D\\uDDA5\\uD83D\\uDCBE\\uD83D\\uDCBF\\uD83D\\uDE02❤\\uD83D\\uDE0D\\uD83E\\uDD23\\uD83D\\uDE0A\\uD83D\\uDE4F\\uD83D\\uDC95\\uD83D\\uDE2D\\uD83D\\uDE18\\uD83D\\uDC4D\\uD83D\\uDE05\\uD83D\\uDC4F\\uD83D\\uDE01\\uD83D\\uDD25\\uD83E\\uDD70\\uD83D\\uDC94\\uD83D\\uDC96\\uD83D\\uDC99\\uD83D\\uDE22\\uD83E\\uDD14\\uD83D\\uDE06\\uD83D\\uDE44\\uD83D\\uDCAA\\uD83D\\uDE09☺\\uD83D\\uDC4C\\uD83E\\uDD17\\uD83D\\uDC9C\\uD83D\\uDE14\\uD83D\\uDE0E\\uD83D\\uDE07\\uD83C\\uDF39\\uD83E\\uDD26\\uD83C\\uDF89\\uD83D\\uDC9E✌✨\\uD83E\\uDD37\\uD83D\\uDE31\\uD83D\\uDE0C\\uD83C\\uDF38\\uD83D\\uDE4C\\uD83D\\uDE0B\\uD83D\\uDC97\\uD83D\\uDC9A\\uD83D\\uDE0F\\uD83D\\uDC9B\\uD83D\\uDE42\\uD83D\\uDC93\\uD83E\\uDD29\\uD83D\\uDE04\\uD83D\\uDE00\\uD83D\\uDDA4\\uD83D\\uDE03\\uD83D\\uDCAF\\uD83D\\uDE48\\uD83D\\uDC47\\uD83C\\uDFB6\\uD83D\\uDE12\\uD83E\\uDD2D❣\\uD83D\\uDE1C\\uD83D\\uDC8B\\uD83D\\uDC40\\uD83D\\uDE2A\\uD83D\\uDE11\\uD83D\\uDCA5\\uD83D\\uDE4B\\uD83D\\uDE1E\\uD83D\\uDE29\\uD83D\\uDE21\\uD83E\\uDD2A\\uD83D\\uDC4A\\uD83E\\uDD73\\uD83D\\uDE25\\uD83E\\uDD24\\uD83D\\uDC49\\uD83D\\uDC83\\uD83D\\uDE33✋\\uD83D\\uDE1A\\uD83D\\uDE1D\\uD83D\\uDE34\\uD83C\\uDF1F\\uD83D\\uDE2C\\uD83D\\uDE43\\uD83C\\uDF40\\uD83C\\uDF37\\uD83D\\uDE3B\\uD83D\\uDE13⭐✅\\uD83E\\uDD7A\\uD83C\\uDF08\\uD83D\\uDE08\\uD83E\\uDD18\\uD83D\\uDCA6✔\\uD83D\\uDE23\\uD83C\\uDFC3\\uD83D\\uDC90☹\\uD83C\\uDF8A\\uD83D\\uDC98\\uD83D\\uDE20☝\\uD83D\\uDE15\\uD83C\\uDF3A\\uD83C\\uDF82\\uD83C\\uDF3B\\uD83D\\uDE10\\uD83D\\uDD95\\uD83D\\uDC9D\\uD83D\\uDE4A\\uD83D\\uDE39\\uD83D\\uDDE3\\uD83D\\uDCAB\\uD83D\\uDC80\\uD83D\\uDC51\\uD83C\\uDFB5\\uD83E\\uDD1E\\uD83D\\uDE1B\\uD83D\\uDD34\\uD83D\\uDE24\\uD83C\\uDF3C\\uD83D\\uDE2B⚽\\uD83E\\uDD19☕\\uD83C\\uDFC6\\uD83E\\uDD2B\\uD83D\\uDC48\\uD83D\\uDE2E\\uD83D\\uDE46\\uD83C\\uDF7B\\uD83C\\uDF43\\uD83D\\uDC36\\uD83D\\uDC81\\uD83D\\uDE32\\uD83C\\uDF3F\\uD83E\\uDDE1\\uD83C\\uDF81⚡\\uD83C\\uDF1E\\uD83C\\uDF88❌✊\\uD83D\\uDC4B\\uD83D\\uDE30\\uD83E\\uDD28\\uD83D\\uDE36\\uD83E\\uDD1D\\uD83D\\uDEB6\\uD83D\\uDCB0\\uD83C\\uDF53\\uD83D\\uDCA2\\uD83E\\uDD1F\\uD83D\\uDE41\\uD83D\\uDEA8\\uD83D\\uDCA8\\uD83E\\uDD2C✈\\uD83C\\uDF80\\uD83C\\uDF7A\\uD83E\\uDD13\\uD83D\\uDE19\\uD83D\\uDC9F\\uD83C\\uDF31\\uD83D\\uDE16\\uD83D\\uDC76\\uD83E\\uDD74▶➡❓\\uD83D\\uDC8E\\uD83D\\uDCB8⬇\\uD83D\\uDE28\\uD83C\\uDF1A\\uD83E\\uDD8B\\uD83D\\uDE37\\uD83D\\uDD7A⚠\\uD83D\\uDE45\\uD83D\\uDE1F\\uD83D\\uDE35\\uD83D\\uDC4E\\uD83E\\uDD32\\uD83E\\uDD20\\uD83E\\uDD27\\uD83D\\uDCCC\\uD83D\\uDD35\\uD83D\\uDC85\\uD83E\\uDDD0\\uD83D\\uDC3E\\uD83C\\uDF52\\uD83D\\uDE17\\uD83E\\uDD11\\uD83C\\uDF0A\\uD83E\\uDD2F\\uD83D\\uDC37☎\\uD83D\\uDCA7\\uD83D\\uDE2F\\uD83D\\uDC86\\uD83D\\uDC46\\uD83C\\uDFA4\\uD83D\\uDE47\\uD83C\\uDF51❄\\uD83C\\uDF34\\uD83D\\uDCA3\\uD83D\\uDC38\\uD83D\\uDC8C\\uD83D\\uDCCD\\uD83E\\uDD40\\uD83E\\uDD22\\uD83D\\uDC45\\uD83D\\uDCA1\\uD83D\\uDCA9\\uD83D\\uDC50\\uD83D\\uDCF8\\uD83D\\uDC7B\\uD83E\\uDD10\\uD83E\\uDD2E\\uD83C\\uDFBC\\uD83E\\uDD75\\uD83D\\uDEA9\\uD83C\\uDF4E\\uD83C\\uDF4A\\uD83D\\uDC7C\\uD83D\\uDC8D\\uD83D\\uDCE3\\uD83E\\uDD42\"), Fs = Fe.reduce((n, e, t)=>(n[t] = e, n), []), ks = Fe.reduce((n, e, t)=>(n[e.codePointAt(0)] = t, n), []);\nfunction Bs(n) {\n    return n.reduce((e, t)=>(e += Fs[t], e), \"\");\n}\n_c1 = Bs;\nfunction Ms(n) {\n    const e = [];\n    for (const t of n){\n        const i = ks[t.codePointAt(0)];\n        if (i === void 0) throw new Error(\"Non-base256emoji character: \".concat(t));\n        e.push(i);\n    }\n    return new Uint8Array(e);\n}\n_c2 = Ms;\nconst Ks = Q({\n    prefix: \"\\uD83D\\uDE80\",\n    name: \"base256emoji\",\n    encode: Bs,\n    decode: Ms\n});\nvar Vs = Object.freeze({\n    __proto__: null,\n    base256emoji: Ks\n}), qs = Be, ke = 128, js = 127, Gs = ~js, Ys = Math.pow(2, 31);\nfunction Be(n, e, t) {\n    e = e || [], t = t || 0;\n    for(var i = t; n >= Ys;)e[t++] = n & 255 | ke, n /= 128;\n    for(; n & Gs;)e[t++] = n & 255 | ke, n >>>= 7;\n    return e[t] = n | 0, Be.bytes = t - i + 1, e;\n}\n_c3 = Be;\nvar Hs = de, Js = 128, Me = 127;\nfunction de(n, i) {\n    var t = 0, i = i || 0, s = 0, r = i, o, a = n.length;\n    do {\n        if (r >= a) throw de.bytes = 0, new RangeError(\"Could not decode varint\");\n        o = n[r++], t += s < 28 ? (o & Me) << s : (o & Me) * Math.pow(2, s), s += 7;\n    }while (o >= Js);\n    return de.bytes = r - i, t;\n}\nvar Xs = Math.pow(2, 7), Ws = Math.pow(2, 14), Qs = Math.pow(2, 21), Zs = Math.pow(2, 28), er = Math.pow(2, 35), tr = Math.pow(2, 42), ir = Math.pow(2, 49), sr = Math.pow(2, 56), rr = Math.pow(2, 63), nr = function(n) {\n    return n < Xs ? 1 : n < Ws ? 2 : n < Qs ? 3 : n < Zs ? 4 : n < er ? 5 : n < tr ? 6 : n < ir ? 7 : n < sr ? 8 : n < rr ? 9 : 10;\n}, or = {\n    encode: qs,\n    decode: Hs,\n    encodingLength: nr\n}, Ke = or;\nconst Ve = function(n, e) {\n    let t = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n    return Ke.encode(n, e, t), e;\n}, qe = (n)=>Ke.encodingLength(n), ge = (n, e)=>{\n    const t = e.byteLength, i = qe(n), s = i + qe(t), r = new Uint8Array(s + t);\n    return Ve(n, r, 0), Ve(t, r, i), r.set(e, s), new ar(n, t, e, r);\n};\nclass ar {\n    constructor(e, t, i, s){\n        this.code = e, this.size = t, this.digest = i, this.bytes = s;\n    }\n}\nconst je = (param)=>{\n    let { name: n, code: e, encode: t } = param;\n    return new hr(n, e, t);\n};\nclass hr {\n    digest(e) {\n        if (e instanceof Uint8Array) {\n            const t = this.encode(e);\n            return t instanceof Uint8Array ? ge(this.code, t) : t.then((i)=>ge(this.code, i));\n        } else throw Error(\"Unknown type, must be binary type\");\n    }\n    constructor(e, t, i){\n        this.name = e, this.code = t, this.encode = i;\n    }\n}\nconst Ge = (n)=>async (e)=>new Uint8Array(await crypto.subtle.digest(n, e)), cr = je({\n    name: \"sha2-256\",\n    code: 18,\n    encode: Ge(\"SHA-256\")\n}), lr = je({\n    name: \"sha2-512\",\n    code: 19,\n    encode: Ge(\"SHA-512\")\n});\nvar ur = Object.freeze({\n    __proto__: null,\n    sha256: cr,\n    sha512: lr\n});\nconst Ye = 0, dr = \"identity\", He = Ue, gr = (n)=>ge(Ye, He(n)), pr = {\n    code: Ye,\n    name: dr,\n    encode: He,\n    digest: gr\n};\nvar Dr = Object.freeze({\n    __proto__: null,\n    identity: pr\n});\nnew TextEncoder, new TextDecoder;\nconst Je = {\n    ...as,\n    ...cs,\n    ...us,\n    ...gs,\n    ...ys,\n    ...Rs,\n    ...Ps,\n    ...As,\n    ...$s,\n    ...Vs\n};\n({\n    ...ur,\n    ...Dr\n});\nfunction Xe(n) {\n    return globalThis.Buffer != null ? new Uint8Array(n.buffer, n.byteOffset, n.byteLength) : n;\n}\n_c4 = Xe;\nfunction yr() {\n    let n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;\n    return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? Xe(globalThis.Buffer.allocUnsafe(n)) : new Uint8Array(n);\n}\nfunction We(n, e, t, i) {\n    return {\n        name: n,\n        prefix: e,\n        encoder: {\n            name: n,\n            prefix: e,\n            encode: t\n        },\n        decoder: {\n            decode: i\n        }\n    };\n}\n_c5 = We;\nconst Qe = We(\"utf8\", \"u\", (n)=>\"u\" + new TextDecoder(\"utf8\").decode(n), (n)=>new TextEncoder().encode(n.substring(1))), pe = We(\"ascii\", \"a\", (n)=>{\n    let e = \"a\";\n    for(let t = 0; t < n.length; t++)e += String.fromCharCode(n[t]);\n    return e;\n}, (n)=>{\n    n = n.substring(1);\n    const e = yr(n.length);\n    for(let t = 0; t < n.length; t++)e[t] = n.charCodeAt(t);\n    return e;\n}), mr = {\n    utf8: Qe,\n    \"utf-8\": Qe,\n    hex: Je.base16,\n    latin1: pe,\n    ascii: pe,\n    binary: pe,\n    ...Je\n};\nfunction br(n) {\n    let e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"utf8\";\n    const t = mr[e];\n    if (!t) throw new Error('Unsupported encoding \"'.concat(e, '\"'));\n    return (e === \"utf8\" || e === \"utf-8\") && globalThis.Buffer != null && globalThis.Buffer.from != null ? Xe(globalThis.Buffer.from(n, \"utf-8\")) : t.decoder.decode(\"\".concat(t.prefix).concat(n));\n}\nconst De = \"wc\", Ze = 2, Z = \"core\", z = \"\".concat(De, \"@2:\").concat(Z, \":\"), et = {\n    name: Z,\n    logger: \"error\"\n}, tt = {\n    database: \":memory:\"\n}, it = \"crypto\", ye = \"client_ed25519_seed\", st = _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_DAY, rt = \"keychain\", nt = \"0.3\", ot = \"messages\", at = \"0.3\", ht = _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.SIX_HOURS, ct = \"publisher\", lt = \"irn\", ut = \"error\", me = \"wss://relay.walletconnect.com\", be = \"wss://relay.walletconnect.org\", dt = \"relayer\", v = {\n    message: \"relayer_message\",\n    message_ack: \"relayer_message_ack\",\n    connect: \"relayer_connect\",\n    disconnect: \"relayer_disconnect\",\n    error: \"relayer_error\",\n    connection_stalled: \"relayer_connection_stalled\",\n    transport_closed: \"relayer_transport_closed\",\n    publish: \"relayer_publish\"\n}, gt = \"_subscription\", f = {\n    payload: \"payload\",\n    connect: \"connect\",\n    disconnect: \"disconnect\",\n    error: \"error\"\n}, pt = _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_SECOND, fr = {\n    database: \":memory:\"\n}, Dt = \"2.12.2\", yt = 1e4, mt = \"0.3\", bt = \"WALLETCONNECT_CLIENT_ID\", S = {\n    created: \"subscription_created\",\n    deleted: \"subscription_deleted\",\n    expired: \"subscription_expired\",\n    disabled: \"subscription_disabled\",\n    sync: \"subscription_sync\",\n    resubscribed: \"subscription_resubscribed\"\n}, Er = _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.THIRTY_DAYS, ft = \"subscription\", Et = \"0.3\", wt = _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.FIVE_SECONDS * 1e3, vt = \"pairing\", It = \"0.3\", wr = _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.THIRTY_DAYS, F = {\n    wc_pairingDelete: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_DAY,\n            prompt: !1,\n            tag: 1e3\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_DAY,\n            prompt: !1,\n            tag: 1001\n        }\n    },\n    wc_pairingPing: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.THIRTY_SECONDS,\n            prompt: !1,\n            tag: 1002\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.THIRTY_SECONDS,\n            prompt: !1,\n            tag: 1003\n        }\n    },\n    unregistered_method: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_DAY,\n            prompt: !1,\n            tag: 0\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_DAY,\n            prompt: !1,\n            tag: 0\n        }\n    }\n}, V = {\n    create: \"pairing_create\",\n    expire: \"pairing_expire\",\n    delete: \"pairing_delete\",\n    ping: \"pairing_ping\"\n}, I = {\n    created: \"history_created\",\n    updated: \"history_updated\",\n    deleted: \"history_deleted\",\n    sync: \"history_sync\"\n}, Ct = \"history\", _t = \"0.3\", Rt = \"expirer\", C = {\n    created: \"expirer_created\",\n    deleted: \"expirer_deleted\",\n    expired: \"expirer_expired\",\n    sync: \"expirer_sync\"\n}, Tt = \"0.3\", vr = _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_DAY, ee = \"verify-api\", k = \"https://verify.walletconnect.com\", te = \"https://verify.walletconnect.org\", St = [\n    k,\n    te\n], Pt = \"echo\", xt = \"https://echo.walletconnect.com\";\nclass Ot {\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    async setKeyChain(e) {\n        await this.core.storage.setItem(this.storageKey, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.mapToObj)(e));\n    }\n    async getKeyChain() {\n        const e = await this.core.storage.getItem(this.storageKey);\n        return typeof e < \"u\" ? (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.objToMap)(e) : void 0;\n    }\n    async persist() {\n        await this.setKeyChain(this.keychain);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    constructor(e, t){\n        this.core = e, this.logger = t, this.keychain = new Map, this.name = rt, this.version = nt, this.initialized = !1, this.storagePrefix = z, this.init = async ()=>{\n            if (!this.initialized) {\n                const i = await this.getKeyChain();\n                typeof i < \"u\" && (this.keychain = i), this.initialized = !0;\n            }\n        }, this.has = (i)=>(this.isInitialized(), this.keychain.has(i)), this.set = async (i, s)=>{\n            this.isInitialized(), this.keychain.set(i, s), await this.persist();\n        }, this.get = (i)=>{\n            this.isInitialized();\n            const s = this.keychain.get(i);\n            if (typeof s > \"u\") {\n                const { message: r } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NO_MATCHING_KEY\", \"\".concat(this.name, \": \").concat(i));\n                throw new Error(r);\n            }\n            return s;\n        }, this.del = async (i)=>{\n            this.isInitialized(), this.keychain.delete(i), await this.persist();\n        }, this.core = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name);\n    }\n}\nclass At {\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    async setPrivateKey(e, t) {\n        return await this.keychain.set(e, t), e;\n    }\n    getPrivateKey(e) {\n        return this.keychain.get(e);\n    }\n    async getClientSeed() {\n        let e = \"\";\n        try {\n            e = this.keychain.get(ye);\n        } catch (e1) {\n            e = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.generateRandomBytes32)(), await this.keychain.set(ye, e);\n        }\n        return br(e, \"base16\");\n    }\n    getSymKey(e) {\n        return this.keychain.get(e);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    constructor(e, t, i){\n        this.core = e, this.logger = t, this.name = it, this.initialized = !1, this.init = async ()=>{\n            this.initialized || (await this.keychain.init(), this.initialized = !0);\n        }, this.hasKeys = (s)=>(this.isInitialized(), this.keychain.has(s)), this.getClientId = async ()=>{\n            this.isInitialized();\n            const s = await this.getClientSeed(), r = _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_5__.generateKeyPair(s);\n            return _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_5__.encodeIss(r.publicKey);\n        }, this.generateKeyPair = ()=>{\n            this.isInitialized();\n            const s = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.generateKeyPair)();\n            return this.setPrivateKey(s.publicKey, s.privateKey);\n        }, this.signJWT = async (s)=>{\n            this.isInitialized();\n            const r = await this.getClientSeed(), o = _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_5__.generateKeyPair(r), a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.generateRandomBytes32)(), h = st;\n            return await _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_5__.signJWT(a, s, h, o);\n        }, this.generateSharedKey = (s, r, o)=>{\n            this.isInitialized();\n            const a = this.getPrivateKey(s), h = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.deriveSymKey)(a, r);\n            return this.setSymKey(h, o);\n        }, this.setSymKey = async (s, r)=>{\n            this.isInitialized();\n            const o = r || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.hashKey)(s);\n            return await this.keychain.set(o, s), o;\n        }, this.deleteKeyPair = async (s)=>{\n            this.isInitialized(), await this.keychain.del(s);\n        }, this.deleteSymKey = async (s)=>{\n            this.isInitialized(), await this.keychain.del(s);\n        }, this.encode = async (s, r, o)=>{\n            this.isInitialized();\n            const a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.validateEncoding)(o), h = (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_4__.safeJsonStringify)(r);\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isTypeOneEnvelope)(a)) {\n                const m = a.senderPublicKey, L = a.receiverPublicKey;\n                s = await this.generateSharedKey(m, L);\n            }\n            const l = this.getSymKey(s), { type: d, senderPublicKey: g } = a;\n            return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.encrypt)({\n                type: d,\n                symKey: l,\n                message: h,\n                senderPublicKey: g\n            });\n        }, this.decode = async (s, r, o)=>{\n            this.isInitialized();\n            const a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.validateDecoding)(r, o);\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isTypeOneEnvelope)(a)) {\n                const h = a.receiverPublicKey, l = a.senderPublicKey;\n                s = await this.generateSharedKey(h, l);\n            }\n            try {\n                const h = this.getSymKey(s), l = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.decrypt)({\n                    symKey: h,\n                    encoded: r\n                });\n                return (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_4__.safeJsonParse)(l);\n            } catch (h) {\n                this.logger.error(\"Failed to decode message from topic: '\".concat(s, \"', clientId: '\").concat(await this.getClientId(), \"'\")), this.logger.error(h);\n            }\n        }, this.getPayloadType = (s)=>{\n            const r = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.deserialize)(s);\n            return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.decodeTypeByte)(r.type);\n        }, this.getPayloadSenderPublicKey = (s)=>{\n            const r = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.deserialize)(s);\n            return r.senderPublicKey ? (0,uint8arrays__WEBPACK_IMPORTED_MODULE_6__.toString)(r.senderPublicKey, _walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.BASE16) : void 0;\n        }, this.core = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.keychain = i || new Ot(this.core, this.logger);\n    }\n}\nclass zt extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IMessageTracker {\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    async setRelayerMessages(e) {\n        await this.core.storage.setItem(this.storageKey, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.mapToObj)(e));\n    }\n    async getRelayerMessages() {\n        const e = await this.core.storage.getItem(this.storageKey);\n        return typeof e < \"u\" ? (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.objToMap)(e) : void 0;\n    }\n    async persist() {\n        await this.setRelayerMessages(this.messages);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    constructor(e, t){\n        super(e, t), this.logger = e, this.core = t, this.messages = new Map, this.name = ot, this.version = at, this.initialized = !1, this.storagePrefix = z, this.init = async ()=>{\n            if (!this.initialized) {\n                this.logger.trace(\"Initialized\");\n                try {\n                    const i = await this.getRelayerMessages();\n                    typeof i < \"u\" && (this.messages = i), this.logger.debug(\"Successfully Restored records for \".concat(this.name)), this.logger.trace({\n                        type: \"method\",\n                        method: \"restore\",\n                        size: this.messages.size\n                    });\n                } catch (i) {\n                    this.logger.debug(\"Failed to Restore records for \".concat(this.name)), this.logger.error(i);\n                } finally{\n                    this.initialized = !0;\n                }\n            }\n        }, this.set = async (i, s)=>{\n            this.isInitialized();\n            const r = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.hashMessage)(s);\n            let o = this.messages.get(i);\n            return typeof o > \"u\" && (o = {}), typeof o[r] < \"u\" || (o[r] = s, this.messages.set(i, o), await this.persist()), r;\n        }, this.get = (i)=>{\n            this.isInitialized();\n            let s = this.messages.get(i);\n            return typeof s > \"u\" && (s = {}), s;\n        }, this.has = (i, s)=>{\n            this.isInitialized();\n            const r = this.get(i), o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.hashMessage)(s);\n            return typeof r[o] < \"u\";\n        }, this.del = async (i)=>{\n            this.isInitialized(), this.messages.delete(i), await this.persist();\n        }, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(e, this.name), this.core = t;\n    }\n}\nclass Ir extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IPublisher {\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    rpcPublish(e, t, i, s, r, o, a) {\n        var h, l, d, g;\n        const m = {\n            method: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getRelayProtocolApi)(s.protocol).publish,\n            params: {\n                topic: e,\n                message: t,\n                ttl: i,\n                prompt: r,\n                tag: o\n            },\n            id: a\n        };\n        return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isUndefined)((h = m.params) == null ? void 0 : h.prompt) && ((l = m.params) == null || delete l.prompt), (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isUndefined)((d = m.params) == null ? void 0 : d.tag) && ((g = m.params) == null || delete g.tag), this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"message\",\n            direction: \"outgoing\",\n            request: m\n        }), this.relayer.request(m);\n    }\n    removeRequestFromQueue(e) {\n        this.queue.delete(e);\n    }\n    checkQueue() {\n        this.queue.forEach(async (e)=>{\n            const { topic: t, message: i, opts: s } = e;\n            await this.publish(t, i, s);\n        });\n    }\n    registerEventListeners() {\n        this.relayer.core.heartbeat.on(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_2__.HEARTBEAT_EVENTS.pulse, ()=>{\n            if (this.needsTransportRestart) {\n                this.needsTransportRestart = !1, this.relayer.events.emit(v.connection_stalled);\n                return;\n            }\n            this.checkQueue();\n        }), this.relayer.on(v.message_ack, (e)=>{\n            this.removeRequestFromQueue(e.id.toString());\n        });\n    }\n    constructor(e, t){\n        super(e, t), this.relayer = e, this.logger = t, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.name = ct, this.queue = new Map, this.publishTimeout = (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_MINUTE), this.failedPublishTimeout = (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_SECOND), this.needsTransportRestart = !1, this.publish = async (i, s, r)=>{\n            var o;\n            this.logger.debug(\"Publishing Payload\"), this.logger.trace({\n                type: \"method\",\n                method: \"publish\",\n                params: {\n                    topic: i,\n                    message: s,\n                    opts: r\n                }\n            });\n            const a = (r === null || r === void 0 ? void 0 : r.ttl) || ht, h = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getRelayProtocolName)(r), l = (r === null || r === void 0 ? void 0 : r.prompt) || !1, d = (r === null || r === void 0 ? void 0 : r.tag) || 0, g = (r === null || r === void 0 ? void 0 : r.id) || (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.getBigIntRpcId)().toString(), m = {\n                topic: i,\n                message: s,\n                opts: {\n                    ttl: a,\n                    relay: h,\n                    prompt: l,\n                    tag: d,\n                    id: g\n                }\n            }, L = \"Failed to publish payload, please try again. id:\".concat(g, \" tag:\").concat(d), u = Date.now();\n            let p, _ = 1;\n            try {\n                for(; p === void 0;){\n                    if (Date.now() - u > this.publishTimeout) throw new Error(L);\n                    this.logger.trace({\n                        id: g,\n                        attempts: _\n                    }, \"publisher.publish - attempt \".concat(_)), p = await await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.createExpiringPromise)(this.rpcPublish(i, s, a, h, l, d, g).catch((D)=>this.logger.warn(D)), this.publishTimeout, L), _++, p || await new Promise((D)=>setTimeout(D, this.failedPublishTimeout));\n                }\n                this.relayer.events.emit(v.publish, m), this.logger.debug(\"Successfully Published Payload\"), this.logger.trace({\n                    type: \"method\",\n                    method: \"publish\",\n                    params: {\n                        id: g,\n                        topic: i,\n                        message: s,\n                        opts: r\n                    }\n                });\n            } catch (D) {\n                if (this.logger.debug(\"Failed to Publish Payload\"), this.logger.error(D), (o = r === null || r === void 0 ? void 0 : r.internal) != null && o.throwOnFailedPublish) throw D;\n                this.queue.set(g, m);\n            }\n        }, this.on = (i, s)=>{\n            this.events.on(i, s);\n        }, this.once = (i, s)=>{\n            this.events.once(i, s);\n        }, this.off = (i, s)=>{\n            this.events.off(i, s);\n        }, this.removeListener = (i, s)=>{\n            this.events.removeListener(i, s);\n        }, this.relayer = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.registerEventListeners();\n    }\n}\nclass Cr {\n    get topics() {\n        return Array.from(this.map.keys());\n    }\n    constructor(){\n        this.map = new Map, this.set = (e, t)=>{\n            const i = this.get(e);\n            this.exists(e, t) || this.map.set(e, [\n                ...i,\n                t\n            ]);\n        }, this.get = (e)=>this.map.get(e) || [], this.exists = (e, t)=>this.get(e).includes(t), this.delete = (e, t)=>{\n            if (typeof t > \"u\") {\n                this.map.delete(e);\n                return;\n            }\n            if (!this.map.has(e)) return;\n            const i = this.get(e);\n            if (!this.exists(e, t)) return;\n            const s = i.filter((r)=>r !== t);\n            if (!s.length) {\n                this.map.delete(e);\n                return;\n            }\n            this.map.set(e, s);\n        }, this.clear = ()=>{\n            this.map.clear();\n        };\n    }\n}\nvar _r = Object.defineProperty, Rr = Object.defineProperties, Tr = Object.getOwnPropertyDescriptors, Nt = Object.getOwnPropertySymbols, Sr = Object.prototype.hasOwnProperty, Pr = Object.prototype.propertyIsEnumerable, Lt = (n, e, t)=>e in n ? _r(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, q = (n, e)=>{\n    for(var t in e || (e = {}))Sr.call(e, t) && Lt(n, t, e[t]);\n    if (Nt) for (var t of Nt(e))Pr.call(e, t) && Lt(n, t, e[t]);\n    return n;\n}, fe = (n, e)=>Rr(n, Tr(e));\nclass Ut extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.ISubscriber {\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.relayer.core.customStoragePrefix + \"//\" + this.name;\n    }\n    get length() {\n        return this.subscriptions.size;\n    }\n    get ids() {\n        return Array.from(this.subscriptions.keys());\n    }\n    get values() {\n        return Array.from(this.subscriptions.values());\n    }\n    get topics() {\n        return this.topicMap.topics;\n    }\n    hasSubscription(e, t) {\n        let i = !1;\n        try {\n            i = this.getSubscription(e).topic === t;\n        } catch (e) {}\n        return i;\n    }\n    onEnable() {\n        this.cached = [], this.initialized = !0;\n    }\n    onDisable() {\n        this.cached = this.values, this.subscriptions.clear(), this.topicMap.clear();\n    }\n    async unsubscribeByTopic(e, t) {\n        const i = this.topicMap.get(e);\n        await Promise.all(i.map(async (s)=>await this.unsubscribeById(e, s, t)));\n    }\n    async unsubscribeById(e, t, i) {\n        this.logger.debug(\"Unsubscribing Topic\"), this.logger.trace({\n            type: \"method\",\n            method: \"unsubscribe\",\n            params: {\n                topic: e,\n                id: t,\n                opts: i\n            }\n        });\n        try {\n            const s = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getRelayProtocolName)(i);\n            await this.rpcUnsubscribe(e, t, s);\n            const r = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getSdkError)(\"USER_DISCONNECTED\", \"\".concat(this.name, \", \").concat(e));\n            await this.onUnsubscribe(e, t, r), this.logger.debug(\"Successfully Unsubscribed Topic\"), this.logger.trace({\n                type: \"method\",\n                method: \"unsubscribe\",\n                params: {\n                    topic: e,\n                    id: t,\n                    opts: i\n                }\n            });\n        } catch (s) {\n            throw this.logger.debug(\"Failed to Unsubscribe Topic\"), this.logger.error(s), s;\n        }\n    }\n    async rpcSubscribe(e, t) {\n        const i = {\n            method: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getRelayProtocolApi)(t.protocol).subscribe,\n            params: {\n                topic: e\n            }\n        };\n        this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"outgoing\",\n            request: i\n        });\n        try {\n            return await await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.createExpiringPromise)(this.relayer.request(i).catch((s)=>this.logger.warn(s)), this.subscribeTimeout) ? (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.hashMessage)(e + this.clientId) : null;\n        } catch (e) {\n            this.logger.debug(\"Outgoing Relay Subscribe Payload stalled\"), this.relayer.events.emit(v.connection_stalled);\n        }\n        return null;\n    }\n    async rpcBatchSubscribe(e) {\n        if (!e.length) return;\n        const t = e[0].relay, i = {\n            method: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getRelayProtocolApi)(t.protocol).batchSubscribe,\n            params: {\n                topics: e.map((s)=>s.topic)\n            }\n        };\n        this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"outgoing\",\n            request: i\n        });\n        try {\n            return await await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.createExpiringPromise)(this.relayer.request(i).catch((s)=>this.logger.warn(s)), this.subscribeTimeout);\n        } catch (e) {\n            this.relayer.events.emit(v.connection_stalled);\n        }\n    }\n    rpcUnsubscribe(e, t, i) {\n        const s = {\n            method: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getRelayProtocolApi)(i.protocol).unsubscribe,\n            params: {\n                topic: e,\n                id: t\n            }\n        };\n        return this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"outgoing\",\n            request: s\n        }), this.relayer.request(s);\n    }\n    onSubscribe(e, t) {\n        this.setSubscription(e, fe(q({}, t), {\n            id: e\n        })), this.pending.delete(t.topic);\n    }\n    onBatchSubscribe(e) {\n        e.length && e.forEach((t)=>{\n            this.setSubscription(t.id, q({}, t)), this.pending.delete(t.topic);\n        });\n    }\n    async onUnsubscribe(e, t, i) {\n        this.events.removeAllListeners(t), this.hasSubscription(t, e) && this.deleteSubscription(t, i), await this.relayer.messages.del(e);\n    }\n    async setRelayerSubscriptions(e) {\n        await this.relayer.core.storage.setItem(this.storageKey, e);\n    }\n    async getRelayerSubscriptions() {\n        return await this.relayer.core.storage.getItem(this.storageKey);\n    }\n    setSubscription(e, t) {\n        this.logger.debug(\"Setting subscription\"), this.logger.trace({\n            type: \"method\",\n            method: \"setSubscription\",\n            id: e,\n            subscription: t\n        }), this.addSubscription(e, t);\n    }\n    addSubscription(e, t) {\n        this.subscriptions.set(e, q({}, t)), this.topicMap.set(t.topic, e), this.events.emit(S.created, t);\n    }\n    getSubscription(e) {\n        this.logger.debug(\"Getting subscription\"), this.logger.trace({\n            type: \"method\",\n            method: \"getSubscription\",\n            id: e\n        });\n        const t = this.subscriptions.get(e);\n        if (!t) {\n            const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NO_MATCHING_KEY\", \"\".concat(this.name, \": \").concat(e));\n            throw new Error(i);\n        }\n        return t;\n    }\n    deleteSubscription(e, t) {\n        this.logger.debug(\"Deleting subscription\"), this.logger.trace({\n            type: \"method\",\n            method: \"deleteSubscription\",\n            id: e,\n            reason: t\n        });\n        const i = this.getSubscription(e);\n        this.subscriptions.delete(e), this.topicMap.delete(i.topic, e), this.events.emit(S.deleted, fe(q({}, i), {\n            reason: t\n        }));\n    }\n    async persist() {\n        await this.setRelayerSubscriptions(this.values), this.events.emit(S.sync);\n    }\n    async reset() {\n        if (this.cached.length) {\n            const e = Math.ceil(this.cached.length / this.batchSubscribeTopicsLimit);\n            for(let t = 0; t < e; t++){\n                const i = this.cached.splice(0, this.batchSubscribeTopicsLimit);\n                await this.batchSubscribe(i);\n            }\n        }\n        this.events.emit(S.resubscribed);\n    }\n    async restore() {\n        try {\n            const e = await this.getRelayerSubscriptions();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.subscriptions.size) {\n                const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), this.logger.error(\"\".concat(this.name, \": \").concat(JSON.stringify(this.values))), new Error(t);\n            }\n            this.cached = e, this.logger.debug(\"Successfully Restored subscriptions for \".concat(this.name)), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                subscriptions: this.values\n            });\n        } catch (e) {\n            this.logger.debug(\"Failed to Restore subscriptions for \".concat(this.name)), this.logger.error(e);\n        }\n    }\n    async batchSubscribe(e) {\n        if (!e.length) return;\n        const t = await this.rpcBatchSubscribe(e);\n        (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isValidArray)(t) && this.onBatchSubscribe(t.map((i, s)=>fe(q({}, e[s]), {\n                id: i\n            })));\n    }\n    async onConnect() {\n        await this.restart(), this.onEnable();\n    }\n    onDisconnect() {\n        this.onDisable();\n    }\n    async checkPending() {\n        if (!this.initialized || !this.relayer.connected) return;\n        const e = [];\n        this.pending.forEach((t)=>{\n            e.push(t);\n        }), await this.batchSubscribe(e);\n    }\n    registerEventListeners() {\n        this.relayer.core.heartbeat.on(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_2__.HEARTBEAT_EVENTS.pulse, async ()=>{\n            await this.checkPending();\n        }), this.events.on(S.created, async (e)=>{\n            const t = S.created;\n            this.logger.info(\"Emitting \".concat(t)), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), await this.persist();\n        }), this.events.on(S.deleted, async (e)=>{\n            const t = S.deleted;\n            this.logger.info(\"Emitting \".concat(t)), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), await this.persist();\n        });\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    async restartToComplete() {\n        this.restartInProgress && await new Promise((e)=>{\n            const t = setInterval(()=>{\n                this.restartInProgress || (clearInterval(t), e());\n            }, this.pollingInterval);\n        });\n    }\n    constructor(e, t){\n        super(e, t), this.relayer = e, this.logger = t, this.subscriptions = new Map, this.topicMap = new Cr, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.name = ft, this.version = Et, this.pending = new Map, this.cached = [], this.initialized = !1, this.pendingSubscriptionWatchLabel = \"pending_sub_watch_label\", this.pollingInterval = 20, this.storagePrefix = z, this.subscribeTimeout = (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_MINUTE), this.restartInProgress = !1, this.batchSubscribeTopicsLimit = 500, this.init = async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), this.registerEventListeners(), this.clientId = await this.relayer.core.crypto.getClientId());\n        }, this.subscribe = async (i, s)=>{\n            await this.restartToComplete(), this.isInitialized(), this.logger.debug(\"Subscribing Topic\"), this.logger.trace({\n                type: \"method\",\n                method: \"subscribe\",\n                params: {\n                    topic: i,\n                    opts: s\n                }\n            });\n            try {\n                const r = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getRelayProtocolName)(s), o = {\n                    topic: i,\n                    relay: r\n                };\n                this.pending.set(i, o);\n                const a = await this.rpcSubscribe(i, r);\n                return typeof a == \"string\" && (this.onSubscribe(a, o), this.logger.debug(\"Successfully Subscribed Topic\"), this.logger.trace({\n                    type: \"method\",\n                    method: \"subscribe\",\n                    params: {\n                        topic: i,\n                        opts: s\n                    }\n                })), a;\n            } catch (r) {\n                throw this.logger.debug(\"Failed to Subscribe Topic\"), this.logger.error(r), r;\n            }\n        }, this.unsubscribe = async (i, s)=>{\n            await this.restartToComplete(), this.isInitialized(), typeof (s === null || s === void 0 ? void 0 : s.id) < \"u\" ? await this.unsubscribeById(i, s.id, s) : await this.unsubscribeByTopic(i, s);\n        }, this.isSubscribed = async (i)=>{\n            if (this.topics.includes(i)) return !0;\n            const s = \"\".concat(this.pendingSubscriptionWatchLabel, \"_\").concat(i);\n            return await new Promise((r, o)=>{\n                const a = new _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.Watch;\n                a.start(s);\n                const h = setInterval(()=>{\n                    !this.pending.has(i) && this.topics.includes(i) && (clearInterval(h), a.stop(s), r(!0)), a.elapsed(s) >= wt && (clearInterval(h), a.stop(s), o(new Error(\"Subscription resolution timeout\")));\n                }, this.pollingInterval);\n            }).catch(()=>!1);\n        }, this.on = (i, s)=>{\n            this.events.on(i, s);\n        }, this.once = (i, s)=>{\n            this.events.once(i, s);\n        }, this.off = (i, s)=>{\n            this.events.off(i, s);\n        }, this.removeListener = (i, s)=>{\n            this.events.removeListener(i, s);\n        }, this.start = async ()=>{\n            await this.onConnect();\n        }, this.stop = async ()=>{\n            await this.onDisconnect();\n        }, this.restart = async ()=>{\n            this.restartInProgress = !0, await this.restore(), await this.reset(), this.restartInProgress = !1;\n        }, this.relayer = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.clientId = \"\";\n    }\n}\nvar xr = Object.defineProperty, $t = Object.getOwnPropertySymbols, Or = Object.prototype.hasOwnProperty, Ar = Object.prototype.propertyIsEnumerable, Ft = (n, e, t)=>e in n ? xr(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, zr = (n, e)=>{\n    for(var t in e || (e = {}))Or.call(e, t) && Ft(n, t, e[t]);\n    if ($t) for (var t of $t(e))Ar.call(e, t) && Ft(n, t, e[t]);\n    return n;\n};\nclass kt extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IRelayer {\n    async init() {\n        this.logger.trace(\"Initialized\"), this.registerEventListeners(), await this.createProvider(), await Promise.all([\n            this.messages.init(),\n            this.subscriber.init()\n        ]);\n        try {\n            await this.transportOpen();\n        } catch (e) {\n            this.logger.warn(\"Connection via \".concat(this.relayUrl, \" failed, attempting to connect via failover domain \").concat(be, \"...\")), await this.restartTransport(be);\n        }\n        this.initialized = !0, setTimeout(async ()=>{\n            this.subscriber.topics.length === 0 && this.subscriber.pending.size === 0 && (this.logger.info(\"No topics subscribed to after init, closing transport\"), await this.transportClose(), this.transportExplicitlyClosed = !1);\n        }, yt);\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get connected() {\n        var e, t, i;\n        return ((i = (t = (e = this.provider) == null ? void 0 : e.connection) == null ? void 0 : t.socket) == null ? void 0 : i.readyState) === 1;\n    }\n    get connecting() {\n        var e, t, i;\n        return ((i = (t = (e = this.provider) == null ? void 0 : e.connection) == null ? void 0 : t.socket) == null ? void 0 : i.readyState) === 0;\n    }\n    async publish(e, t, i) {\n        this.isInitialized(), await this.publisher.publish(e, t, i), await this.recordMessageEvent({\n            topic: e,\n            message: t,\n            publishedAt: Date.now()\n        });\n    }\n    async subscribe(e, t) {\n        var i;\n        this.isInitialized();\n        let s = ((i = this.subscriber.topicMap.get(e)) == null ? void 0 : i[0]) || \"\", r;\n        const o = (a)=>{\n            a.topic === e && (this.subscriber.off(S.created, o), r());\n        };\n        return await Promise.all([\n            new Promise((a)=>{\n                r = a, this.subscriber.on(S.created, o);\n            }),\n            new Promise(async (a)=>{\n                s = await this.subscriber.subscribe(e, t) || s, a();\n            })\n        ]), s;\n    }\n    async unsubscribe(e, t) {\n        this.isInitialized(), await this.subscriber.unsubscribe(e, t);\n    }\n    on(e, t) {\n        this.events.on(e, t);\n    }\n    once(e, t) {\n        this.events.once(e, t);\n    }\n    off(e, t) {\n        this.events.off(e, t);\n    }\n    removeListener(e, t) {\n        this.events.removeListener(e, t);\n    }\n    async transportDisconnect() {\n        if (!this.hasExperiencedNetworkDisruption && this.connected && this.requestsInFlight.size > 0) try {\n            await Promise.all(Array.from(this.requestsInFlight.values()).map((e)=>e.promise));\n        } catch (e) {\n            this.logger.warn(e);\n        }\n        this.hasExperiencedNetworkDisruption || this.connected ? await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.createExpiringPromise)(this.provider.disconnect(), 2e3, \"provider.disconnect()\").catch(()=>this.onProviderDisconnect()) : this.onProviderDisconnect();\n    }\n    async transportClose() {\n        this.transportExplicitlyClosed = !0, await this.transportDisconnect();\n    }\n    async transportOpen(e) {\n        await this.confirmOnlineStateOrThrow(), e && e !== this.relayUrl && (this.relayUrl = e, await this.transportDisconnect(), await this.createProvider()), this.connectionAttemptInProgress = !0, this.transportExplicitlyClosed = !1;\n        try {\n            await new Promise(async (t, i)=>{\n                const s = ()=>{\n                    this.provider.off(f.disconnect, s), i(new Error(\"Connection interrupted while trying to subscribe\"));\n                };\n                this.provider.on(f.disconnect, s), await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.createExpiringPromise)(this.provider.connect(), (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_MINUTE), \"Socket stalled when trying to connect to \".concat(this.relayUrl)).catch((r)=>{\n                    i(r);\n                }), await this.subscriber.start(), this.hasExperiencedNetworkDisruption = !1, t();\n            });\n        } catch (t) {\n            this.logger.error(t);\n            const i = t;\n            if (!this.isConnectionStalled(i.message)) throw t;\n        } finally{\n            this.connectionAttemptInProgress = !1;\n        }\n    }\n    async restartTransport(e) {\n        this.connectionAttemptInProgress || (this.relayUrl = e || this.relayUrl, await this.confirmOnlineStateOrThrow(), await this.transportClose(), await this.createProvider(), await this.transportOpen());\n    }\n    async confirmOnlineStateOrThrow() {\n        if (!await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isOnline)()) throw new Error(\"No internet connection detected. Please restart your network and try again.\");\n    }\n    startPingTimeout() {\n        var e, t, i, s, r;\n        if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isNode)()) try {\n            (t = (e = this.provider) == null ? void 0 : e.connection) != null && t.socket && ((r = (s = (i = this.provider) == null ? void 0 : i.connection) == null ? void 0 : s.socket) == null || r.once(\"ping\", ()=>{\n                this.resetPingTimeout();\n            })), this.resetPingTimeout();\n        } catch (o) {\n            this.logger.warn(o);\n        }\n    }\n    isConnectionStalled(e) {\n        return this.staleConnectionErrors.some((t)=>e.includes(t));\n    }\n    async createProvider() {\n        this.provider.connection && this.unregisterProviderListeners();\n        const e = await this.core.crypto.signJWT(this.relayUrl);\n        this.provider = new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_8__.JsonRpcProvider(new _walletconnect_jsonrpc_ws_connection__WEBPACK_IMPORTED_MODULE_10__[\"default\"]((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.formatRelayRpcUrl)({\n            sdkVersion: Dt,\n            protocol: this.protocol,\n            version: this.version,\n            relayUrl: this.relayUrl,\n            projectId: this.projectId,\n            auth: e,\n            useOnCloseEvent: !0,\n            bundleId: this.bundleId\n        }))), this.registerProviderListeners();\n    }\n    async recordMessageEvent(e) {\n        const { topic: t, message: i } = e;\n        await this.messages.set(t, i);\n    }\n    async shouldIgnoreMessageEvent(e) {\n        const { topic: t, message: i } = e;\n        if (!i || i.length === 0) return this.logger.debug(\"Ignoring invalid/empty message: \".concat(i)), !0;\n        if (!await this.subscriber.isSubscribed(t)) return this.logger.debug(\"Ignoring message for non-subscribed topic \".concat(t)), !0;\n        const s = this.messages.has(t, i);\n        return s && this.logger.debug(\"Ignoring duplicate message: \".concat(i)), s;\n    }\n    async onProviderPayload(e) {\n        if (this.logger.debug(\"Incoming Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"incoming\",\n            payload: e\n        }), (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcRequest)(e)) {\n            if (!e.method.endsWith(gt)) return;\n            const t = e.params, { topic: i, message: s, publishedAt: r } = t.data, o = {\n                topic: i,\n                message: s,\n                publishedAt: r\n            };\n            this.logger.debug(\"Emitting Relayer Payload\"), this.logger.trace(zr({\n                type: \"event\",\n                event: t.id\n            }, o)), this.events.emit(t.id, o), await this.acknowledgePayload(e), await this.onMessageEvent(o);\n        } else (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcResponse)(e) && this.events.emit(v.message_ack, e);\n    }\n    async onMessageEvent(e) {\n        await this.shouldIgnoreMessageEvent(e) || (this.events.emit(v.message, e), await this.recordMessageEvent(e));\n    }\n    async acknowledgePayload(e) {\n        const t = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcResult)(e.id, !0);\n        await this.provider.connection.send(t);\n    }\n    unregisterProviderListeners() {\n        this.provider.off(f.payload, this.onPayloadHandler), this.provider.off(f.connect, this.onConnectHandler), this.provider.off(f.disconnect, this.onDisconnectHandler), this.provider.off(f.error, this.onProviderErrorHandler);\n    }\n    async registerEventListeners() {\n        let e = await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isOnline)();\n        (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.subscribeToNetworkChange)(async (t)=>{\n            e !== t && (e = t, t ? await this.restartTransport().catch((i)=>this.logger.error(i)) : (this.hasExperiencedNetworkDisruption = !0, await this.transportDisconnect(), this.transportExplicitlyClosed = !1));\n        });\n    }\n    async onProviderDisconnect() {\n        await this.subscriber.stop(), this.events.emit(v.disconnect), this.connectionAttemptInProgress = !1, !this.transportExplicitlyClosed && setTimeout(async ()=>{\n            await this.transportOpen().catch((e)=>this.logger.error(e));\n        }, (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(pt));\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    async toEstablishConnection() {\n        await this.confirmOnlineStateOrThrow(), !this.connected && (this.connectionAttemptInProgress && await new Promise((e)=>{\n            const t = setInterval(()=>{\n                this.connected && (clearInterval(t), e());\n            }, this.connectionStatusPollingInterval);\n        }), await this.transportOpen());\n    }\n    constructor(e){\n        super(e), this.protocol = \"wc\", this.version = 2, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.name = dt, this.transportExplicitlyClosed = !1, this.initialized = !1, this.connectionAttemptInProgress = !1, this.connectionStatusPollingInterval = 20, this.staleConnectionErrors = [\n            \"socket hang up\",\n            \"socket stalled\",\n            \"interrupted\"\n        ], this.hasExperiencedNetworkDisruption = !1, this.requestsInFlight = new Map, this.heartBeatTimeout = (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.THIRTY_SECONDS + _walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_SECOND), this.request = async (t)=>{\n            var i, s;\n            this.logger.debug(\"Publishing Request Payload\");\n            const r = t.id || (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.getBigIntRpcId)().toString();\n            await this.toEstablishConnection();\n            try {\n                const o = this.provider.request(t);\n                this.requestsInFlight.set(r, {\n                    promise: o,\n                    request: t\n                }), this.logger.trace({\n                    id: r,\n                    method: t.method,\n                    topic: (i = t.params) == null ? void 0 : i.topic\n                }, \"relayer.request - attempt to publish...\");\n                const a = await new Promise(async (h, l)=>{\n                    const d = ()=>{\n                        l(new Error(\"relayer.request - publish interrupted, id: \".concat(r)));\n                    };\n                    this.provider.on(f.disconnect, d);\n                    const g = await o;\n                    this.provider.off(f.disconnect, d), h(g);\n                });\n                return this.logger.trace({\n                    id: r,\n                    method: t.method,\n                    topic: (s = t.params) == null ? void 0 : s.topic\n                }, \"relayer.request - published\"), a;\n            } catch (o) {\n                throw this.logger.debug(\"Failed to Publish Request: \".concat(r)), o;\n            } finally{\n                this.requestsInFlight.delete(r);\n            }\n        }, this.resetPingTimeout = ()=>{\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isNode)()) try {\n                clearTimeout(this.pingTimeout), this.pingTimeout = setTimeout(()=>{\n                    var t, i, s;\n                    (s = (i = (t = this.provider) == null ? void 0 : t.connection) == null ? void 0 : i.socket) == null || s.terminate();\n                }, this.heartBeatTimeout);\n            } catch (t) {\n                this.logger.warn(t);\n            }\n        }, this.onPayloadHandler = (t)=>{\n            this.onProviderPayload(t), this.resetPingTimeout();\n        }, this.onConnectHandler = ()=>{\n            this.startPingTimeout(), this.events.emit(v.connect);\n        }, this.onDisconnectHandler = ()=>{\n            this.onProviderDisconnect();\n        }, this.onProviderErrorHandler = (t)=>{\n            this.logger.error(t), this.events.emit(v.error, t), this.logger.info(\"Fatal socket error received, closing transport\"), this.transportClose();\n        }, this.registerProviderListeners = ()=>{\n            this.provider.on(f.payload, this.onPayloadHandler), this.provider.on(f.connect, this.onConnectHandler), this.provider.on(f.disconnect, this.onDisconnectHandler), this.provider.on(f.error, this.onProviderErrorHandler);\n        }, this.core = e.core, this.logger = typeof e.logger < \"u\" && typeof e.logger != \"string\" ? (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(e.logger, this.name) : (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.pino)((0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getDefaultLoggerOptions)({\n            level: e.logger || ut\n        })), this.messages = new zt(this.logger, e.core), this.subscriber = new Ut(this, this.logger), this.publisher = new Ir(this, this.logger), this.relayUrl = (e === null || e === void 0 ? void 0 : e.relayUrl) || me, this.projectId = e.projectId, this.bundleId = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getBundleId)(), this.provider = {};\n    }\n}\nvar Nr = Object.defineProperty, Bt = Object.getOwnPropertySymbols, Lr = Object.prototype.hasOwnProperty, Ur = Object.prototype.propertyIsEnumerable, Mt = (n, e, t)=>e in n ? Nr(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, Kt = (n, e)=>{\n    for(var t in e || (e = {}))Lr.call(e, t) && Mt(n, t, e[t]);\n    if (Bt) for (var t of Bt(e))Ur.call(e, t) && Mt(n, t, e[t]);\n    return n;\n};\nclass Vt extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IStore {\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    get length() {\n        return this.map.size;\n    }\n    get keys() {\n        return Array.from(this.map.keys());\n    }\n    get values() {\n        return Array.from(this.map.values());\n    }\n    addToRecentlyDeleted(e) {\n        this.recentlyDeleted.push(e), this.recentlyDeleted.length >= this.recentlyDeletedLimit && this.recentlyDeleted.splice(0, this.recentlyDeletedLimit / 2);\n    }\n    async setDataStore(e) {\n        await this.core.storage.setItem(this.storageKey, e);\n    }\n    async getDataStore() {\n        return await this.core.storage.getItem(this.storageKey);\n    }\n    getData(e) {\n        const t = this.map.get(e);\n        if (!t) {\n            if (this.recentlyDeleted.includes(e)) {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"MISSING_OR_INVALID\", \"Record was recently deleted - \".concat(this.name, \": \").concat(e));\n                throw this.logger.error(s), new Error(s);\n            }\n            const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NO_MATCHING_KEY\", \"\".concat(this.name, \": \").concat(e));\n            throw this.logger.error(i), new Error(i);\n        }\n        return t;\n    }\n    async persist() {\n        await this.setDataStore(this.values);\n    }\n    async restore() {\n        try {\n            const e = await this.getDataStore();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.map.size) {\n                const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), new Error(t);\n            }\n            this.cached = e, this.logger.debug(\"Successfully Restored value for \".concat(this.name)), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                value: this.values\n            });\n        } catch (e) {\n            this.logger.debug(\"Failed to Restore value for \".concat(this.name)), this.logger.error(e);\n        }\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    constructor(e, t, i, s = z, r = void 0){\n        super(e, t, i, s), this.core = e, this.logger = t, this.name = i, this.map = new Map, this.version = mt, this.cached = [], this.initialized = !1, this.storagePrefix = z, this.recentlyDeleted = [], this.recentlyDeletedLimit = 200, this.init = async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach((o)=>{\n                this.getKey && o !== null && !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isUndefined)(o) ? this.map.set(this.getKey(o), o) : (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isProposalStruct)(o) ? this.map.set(o.id, o) : (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isSessionStruct)(o) && this.map.set(o.topic, o);\n            }), this.cached = [], this.initialized = !0);\n        }, this.set = async (o, a)=>{\n            this.isInitialized(), this.map.has(o) ? await this.update(o, a) : (this.logger.debug(\"Setting value\"), this.logger.trace({\n                type: \"method\",\n                method: \"set\",\n                key: o,\n                value: a\n            }), this.map.set(o, a), await this.persist());\n        }, this.get = (o)=>(this.isInitialized(), this.logger.debug(\"Getting value\"), this.logger.trace({\n                type: \"method\",\n                method: \"get\",\n                key: o\n            }), this.getData(o)), this.getAll = (o)=>(this.isInitialized(), o ? this.values.filter((a)=>Object.keys(o).every((h)=>lodash_isequal__WEBPACK_IMPORTED_MODULE_11___default()(a[h], o[h]))) : this.values), this.update = async (o, a)=>{\n            this.isInitialized(), this.logger.debug(\"Updating value\"), this.logger.trace({\n                type: \"method\",\n                method: \"update\",\n                key: o,\n                update: a\n            });\n            const h = Kt(Kt({}, this.getData(o)), a);\n            this.map.set(o, h), await this.persist();\n        }, this.delete = async (o, a)=>{\n            this.isInitialized(), this.map.has(o) && (this.logger.debug(\"Deleting value\"), this.logger.trace({\n                type: \"method\",\n                method: \"delete\",\n                key: o,\n                reason: a\n            }), this.map.delete(o), this.addToRecentlyDeleted(o), await this.persist());\n        }, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.storagePrefix = s, this.getKey = r;\n    }\n}\nclass qt {\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    registerRelayerEvents() {\n        this.core.relayer.on(v.message, async (e)=>{\n            const { topic: t, message: i } = e;\n            if (!this.pairings.keys.includes(t) || this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(i))) return;\n            const s = await this.core.crypto.decode(t, i);\n            try {\n                (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcRequest)(s) ? (this.core.history.set(t, s), this.onRelayEventRequest({\n                    topic: t,\n                    payload: s\n                })) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcResponse)(s) && (await this.core.history.resolve(s), await this.onRelayEventResponse({\n                    topic: t,\n                    payload: s\n                }), this.core.history.delete(t, s.id));\n            } catch (r) {\n                this.logger.error(r);\n            }\n        });\n    }\n    registerExpirerEvents() {\n        this.core.expirer.on(C.expired, async (e)=>{\n            const { topic: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.parseExpirerTarget)(e.target);\n            t && this.pairings.keys.includes(t) && (await this.deletePairing(t, !0), this.events.emit(V.expire, {\n                topic: t\n            }));\n        });\n    }\n    constructor(e, t){\n        this.core = e, this.logger = t, this.name = vt, this.version = It, this.events = new (events__WEBPACK_IMPORTED_MODULE_0___default()), this.initialized = !1, this.storagePrefix = z, this.ignoredPayloadTypes = [\n            _walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.TYPE_1\n        ], this.registeredMethods = [], this.init = async ()=>{\n            this.initialized || (await this.pairings.init(), await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.initialized = !0, this.logger.trace(\"Initialized\"));\n        }, this.register = (param)=>{\n            let { methods: i } = param;\n            this.isInitialized(), this.registeredMethods = [\n                ...new Set([\n                    ...this.registeredMethods,\n                    ...i\n                ])\n            ];\n        }, this.create = async (i)=>{\n            this.isInitialized();\n            const s = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.generateRandomBytes32)(), r = await this.core.crypto.setSymKey(s), o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.calcExpiry)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.FIVE_MINUTES), a = {\n                protocol: lt\n            }, h = {\n                topic: r,\n                expiry: o,\n                relay: a,\n                active: !1\n            }, l = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.formatUri)({\n                protocol: this.core.protocol,\n                version: this.core.version,\n                topic: r,\n                symKey: s,\n                relay: a,\n                expiryTimestamp: o,\n                methods: i === null || i === void 0 ? void 0 : i.methods\n            });\n            return await this.pairings.set(r, h), await this.core.relayer.subscribe(r), this.core.expirer.set(r, o), {\n                topic: r,\n                uri: l\n            };\n        }, this.pair = async (i)=>{\n            this.isInitialized(), this.isValidPair(i);\n            const { topic: s, symKey: r, relay: o, expiryTimestamp: a, methods: h } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.parseUri)(i.uri);\n            let l;\n            if (this.pairings.keys.includes(s) && (l = this.pairings.get(s), l.active)) throw new Error(\"Pairing already exists: \".concat(s, \". Please try again with a new connection URI.\"));\n            const d = a || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.calcExpiry)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.FIVE_MINUTES), g = {\n                topic: s,\n                relay: o,\n                expiry: d,\n                active: !1,\n                methods: h\n            };\n            return await this.pairings.set(s, g), this.core.expirer.set(s, d), i.activatePairing && await this.activate({\n                topic: s\n            }), this.events.emit(V.create, g), this.core.crypto.keychain.has(s) || await this.core.crypto.setSymKey(r, s), await this.core.relayer.subscribe(s, {\n                relay: o\n            }), g;\n        }, this.activate = async (param)=>{\n            let { topic: i } = param;\n            this.isInitialized();\n            const s = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.calcExpiry)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.THIRTY_DAYS);\n            await this.pairings.update(i, {\n                active: !0,\n                expiry: s\n            }), this.core.expirer.set(i, s);\n        }, this.ping = async (i)=>{\n            this.isInitialized(), await this.isValidPing(i);\n            const { topic: s } = i;\n            if (this.pairings.keys.includes(s)) {\n                const r = await this.sendRequest(s, \"wc_pairingPing\", {}), { done: o, resolve: a, reject: h } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.createDelayedPromise)();\n                this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.engineEvent)(\"pairing_ping\", r), (param)=>{\n                    let { error: l } = param;\n                    l ? h(l) : a();\n                }), await o();\n            }\n        }, this.updateExpiry = async (param)=>{\n            let { topic: i, expiry: s } = param;\n            this.isInitialized(), await this.pairings.update(i, {\n                expiry: s\n            });\n        }, this.updateMetadata = async (param)=>{\n            let { topic: i, metadata: s } = param;\n            this.isInitialized(), await this.pairings.update(i, {\n                peerMetadata: s\n            });\n        }, this.getPairings = ()=>(this.isInitialized(), this.pairings.values), this.disconnect = async (i)=>{\n            this.isInitialized(), await this.isValidDisconnect(i);\n            const { topic: s } = i;\n            this.pairings.keys.includes(s) && (await this.sendRequest(s, \"wc_pairingDelete\", (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getSdkError)(\"USER_DISCONNECTED\")), await this.deletePairing(s));\n        }, this.sendRequest = async (i, s, r)=>{\n            const o = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcRequest)(s, r), a = await this.core.crypto.encode(i, o), h = F[s].req;\n            return this.core.history.set(i, o), this.core.relayer.publish(i, a, h), o.id;\n        }, this.sendResult = async (i, s, r)=>{\n            const o = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcResult)(i, r), a = await this.core.crypto.encode(s, o), h = await this.core.history.get(s, i), l = F[h.request.method].res;\n            await this.core.relayer.publish(s, a, l), await this.core.history.resolve(o);\n        }, this.sendError = async (i, s, r)=>{\n            const o = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcError)(i, r), a = await this.core.crypto.encode(s, o), h = await this.core.history.get(s, i), l = F[h.request.method] ? F[h.request.method].res : F.unregistered_method.res;\n            await this.core.relayer.publish(s, a, l), await this.core.history.resolve(o);\n        }, this.deletePairing = async (i, s)=>{\n            await this.core.relayer.unsubscribe(i), await Promise.all([\n                this.pairings.delete(i, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getSdkError)(\"USER_DISCONNECTED\")),\n                this.core.crypto.deleteSymKey(i),\n                s ? Promise.resolve() : this.core.expirer.del(i)\n            ]);\n        }, this.cleanup = async ()=>{\n            const i = this.pairings.getAll().filter((s)=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isExpired)(s.expiry));\n            await Promise.all(i.map((s)=>this.deletePairing(s.topic)));\n        }, this.onRelayEventRequest = (i)=>{\n            const { topic: s, payload: r } = i;\n            switch(r.method){\n                case \"wc_pairingPing\":\n                    return this.onPairingPingRequest(s, r);\n                case \"wc_pairingDelete\":\n                    return this.onPairingDeleteRequest(s, r);\n                default:\n                    return this.onUnknownRpcMethodRequest(s, r);\n            }\n        }, this.onRelayEventResponse = async (i)=>{\n            const { topic: s, payload: r } = i, o = (await this.core.history.get(s, r.id)).request.method;\n            switch(o){\n                case \"wc_pairingPing\":\n                    return this.onPairingPingResponse(s, r);\n                default:\n                    return this.onUnknownRpcMethodResponse(o);\n            }\n        }, this.onPairingPingRequest = async (i, s)=>{\n            const { id: r } = s;\n            try {\n                this.isValidPing({\n                    topic: i\n                }), await this.sendResult(r, i, !0), this.events.emit(V.ping, {\n                    id: r,\n                    topic: i\n                });\n            } catch (o) {\n                await this.sendError(r, i, o), this.logger.error(o);\n            }\n        }, this.onPairingPingResponse = (i, s)=>{\n            const { id: r } = s;\n            setTimeout(()=>{\n                (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcResult)(s) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.engineEvent)(\"pairing_ping\", r), {}) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcError)(s) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.engineEvent)(\"pairing_ping\", r), {\n                    error: s.error\n                });\n            }, 500);\n        }, this.onPairingDeleteRequest = async (i, s)=>{\n            const { id: r } = s;\n            try {\n                this.isValidDisconnect({\n                    topic: i\n                }), await this.deletePairing(i), this.events.emit(V.delete, {\n                    id: r,\n                    topic: i\n                });\n            } catch (o) {\n                await this.sendError(r, i, o), this.logger.error(o);\n            }\n        }, this.onUnknownRpcMethodRequest = async (i, s)=>{\n            const { id: r, method: o } = s;\n            try {\n                if (this.registeredMethods.includes(o)) return;\n                const a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getSdkError)(\"WC_METHOD_UNSUPPORTED\", o);\n                await this.sendError(r, i, a), this.logger.error(a);\n            } catch (a) {\n                await this.sendError(r, i, a), this.logger.error(a);\n            }\n        }, this.onUnknownRpcMethodResponse = (i)=>{\n            this.registeredMethods.includes(i) || this.logger.error((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getSdkError)(\"WC_METHOD_UNSUPPORTED\", i));\n        }, this.isValidPair = (i)=>{\n            var s;\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isValidParams)(i)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"MISSING_OR_INVALID\", \"pair() params: \".concat(i));\n                throw new Error(o);\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isValidUrl)(i.uri)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"MISSING_OR_INVALID\", \"pair() uri: \".concat(i.uri));\n                throw new Error(o);\n            }\n            const r = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.parseUri)(i.uri);\n            if (!((s = r === null || r === void 0 ? void 0 : r.relay) != null && s.protocol)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"MISSING_OR_INVALID\", \"pair() uri#relay-protocol\");\n                throw new Error(o);\n            }\n            if (!(r != null && r.symKey)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"MISSING_OR_INVALID\", \"pair() uri#symKey\");\n                throw new Error(o);\n            }\n            if (r != null && r.expiryTimestamp && (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(r === null || r === void 0 ? void 0 : r.expiryTimestamp) < Date.now()) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"EXPIRED\", \"pair() URI has expired. Please try again with a new connection URI.\");\n                throw new Error(o);\n            }\n        }, this.isValidPing = async (i)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isValidParams)(i)) {\n                const { message: r } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"MISSING_OR_INVALID\", \"ping() params: \".concat(i));\n                throw new Error(r);\n            }\n            const { topic: s } = i;\n            await this.isValidPairingTopic(s);\n        }, this.isValidDisconnect = async (i)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isValidParams)(i)) {\n                const { message: r } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"MISSING_OR_INVALID\", \"disconnect() params: \".concat(i));\n                throw new Error(r);\n            }\n            const { topic: s } = i;\n            await this.isValidPairingTopic(s);\n        }, this.isValidPairingTopic = async (i)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isValidString)(i, !1)) {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"MISSING_OR_INVALID\", \"pairing topic should be a string: \".concat(i));\n                throw new Error(s);\n            }\n            if (!this.pairings.keys.includes(i)) {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NO_MATCHING_KEY\", \"pairing topic doesn't exist: \".concat(i));\n                throw new Error(s);\n            }\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isExpired)(this.pairings.get(i).expiry)) {\n                await this.deletePairing(i);\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"EXPIRED\", \"pairing topic: \".concat(i));\n                throw new Error(s);\n            }\n        }, this.core = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.pairings = new Vt(this.core, this.logger, this.name, this.storagePrefix);\n    }\n}\nclass jt extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IJsonRpcHistory {\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    get size() {\n        return this.records.size;\n    }\n    get keys() {\n        return Array.from(this.records.keys());\n    }\n    get values() {\n        return Array.from(this.records.values());\n    }\n    get pending() {\n        const e = [];\n        return this.values.forEach((t)=>{\n            if (typeof t.response < \"u\") return;\n            const i = {\n                topic: t.topic,\n                request: (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcRequest)(t.request.method, t.request.params, t.id),\n                chainId: t.chainId\n            };\n            return e.push(i);\n        }), e;\n    }\n    async setJsonRpcRecords(e) {\n        await this.core.storage.setItem(this.storageKey, e);\n    }\n    async getJsonRpcRecords() {\n        return await this.core.storage.getItem(this.storageKey);\n    }\n    getRecord(e) {\n        this.isInitialized();\n        const t = this.records.get(e);\n        if (!t) {\n            const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NO_MATCHING_KEY\", \"\".concat(this.name, \": \").concat(e));\n            throw new Error(i);\n        }\n        return t;\n    }\n    async persist() {\n        await this.setJsonRpcRecords(this.values), this.events.emit(I.sync);\n    }\n    async restore() {\n        try {\n            const e = await this.getJsonRpcRecords();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.records.size) {\n                const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), new Error(t);\n            }\n            this.cached = e, this.logger.debug(\"Successfully Restored records for \".concat(this.name)), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                records: this.values\n            });\n        } catch (e) {\n            this.logger.debug(\"Failed to Restore records for \".concat(this.name)), this.logger.error(e);\n        }\n    }\n    registerEventListeners() {\n        this.events.on(I.created, (e)=>{\n            const t = I.created;\n            this.logger.info(\"Emitting \".concat(t)), this.logger.debug({\n                type: \"event\",\n                event: t,\n                record: e\n            });\n        }), this.events.on(I.updated, (e)=>{\n            const t = I.updated;\n            this.logger.info(\"Emitting \".concat(t)), this.logger.debug({\n                type: \"event\",\n                event: t,\n                record: e\n            });\n        }), this.events.on(I.deleted, (e)=>{\n            const t = I.deleted;\n            this.logger.info(\"Emitting \".concat(t)), this.logger.debug({\n                type: \"event\",\n                event: t,\n                record: e\n            });\n        }), this.core.heartbeat.on(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_2__.HEARTBEAT_EVENTS.pulse, ()=>{\n            this.cleanup();\n        });\n    }\n    cleanup() {\n        try {\n            this.isInitialized();\n            let e = !1;\n            this.records.forEach((t)=>{\n                (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(t.expiry || 0) - Date.now() <= 0 && (this.logger.info(\"Deleting expired history log: \".concat(t.id)), this.records.delete(t.id), this.events.emit(I.deleted, t, !1), e = !0);\n            }), e && this.persist();\n        } catch (e) {\n            this.logger.warn(e);\n        }\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    constructor(e, t){\n        super(e, t), this.core = e, this.logger = t, this.records = new Map, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.name = Ct, this.version = _t, this.cached = [], this.initialized = !1, this.storagePrefix = z, this.init = async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach((i)=>this.records.set(i.id, i)), this.cached = [], this.registerEventListeners(), this.initialized = !0);\n        }, this.set = (i, s, r)=>{\n            if (this.isInitialized(), this.logger.debug(\"Setting JSON-RPC request history record\"), this.logger.trace({\n                type: \"method\",\n                method: \"set\",\n                topic: i,\n                request: s,\n                chainId: r\n            }), this.records.has(s.id)) return;\n            const o = {\n                id: s.id,\n                topic: i,\n                request: {\n                    method: s.method,\n                    params: s.params || null\n                },\n                chainId: r,\n                expiry: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.calcExpiry)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.THIRTY_DAYS)\n            };\n            this.records.set(o.id, o), this.persist(), this.events.emit(I.created, o);\n        }, this.resolve = async (i)=>{\n            if (this.isInitialized(), this.logger.debug(\"Updating JSON-RPC response history record\"), this.logger.trace({\n                type: \"method\",\n                method: \"update\",\n                response: i\n            }), !this.records.has(i.id)) return;\n            const s = await this.getRecord(i.id);\n            typeof s.response > \"u\" && (s.response = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcError)(i) ? {\n                error: i.error\n            } : {\n                result: i.result\n            }, this.records.set(s.id, s), this.persist(), this.events.emit(I.updated, s));\n        }, this.get = async (i, s)=>(this.isInitialized(), this.logger.debug(\"Getting record\"), this.logger.trace({\n                type: \"method\",\n                method: \"get\",\n                topic: i,\n                id: s\n            }), await this.getRecord(s)), this.delete = (i, s)=>{\n            this.isInitialized(), this.logger.debug(\"Deleting record\"), this.logger.trace({\n                type: \"method\",\n                method: \"delete\",\n                id: s\n            }), this.values.forEach((r)=>{\n                if (r.topic === i) {\n                    if (typeof s < \"u\" && r.id !== s) return;\n                    this.records.delete(r.id), this.events.emit(I.deleted, r);\n                }\n            }), this.persist();\n        }, this.exists = async (i, s)=>(this.isInitialized(), this.records.has(s) ? (await this.getRecord(s)).topic === i : !1), this.on = (i, s)=>{\n            this.events.on(i, s);\n        }, this.once = (i, s)=>{\n            this.events.once(i, s);\n        }, this.off = (i, s)=>{\n            this.events.off(i, s);\n        }, this.removeListener = (i, s)=>{\n            this.events.removeListener(i, s);\n        }, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name);\n    }\n}\nclass Gt extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IExpirer {\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    get length() {\n        return this.expirations.size;\n    }\n    get keys() {\n        return Array.from(this.expirations.keys());\n    }\n    get values() {\n        return Array.from(this.expirations.values());\n    }\n    formatTarget(e) {\n        if (typeof e == \"string\") return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.formatTopicTarget)(e);\n        if (typeof e == \"number\") return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.formatIdTarget)(e);\n        const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"UNKNOWN_TYPE\", \"Target type: \".concat(typeof e));\n        throw new Error(t);\n    }\n    async setExpirations(e) {\n        await this.core.storage.setItem(this.storageKey, e);\n    }\n    async getExpirations() {\n        return await this.core.storage.getItem(this.storageKey);\n    }\n    async persist() {\n        await this.setExpirations(this.values), this.events.emit(C.sync);\n    }\n    async restore() {\n        try {\n            const e = await this.getExpirations();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.expirations.size) {\n                const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), new Error(t);\n            }\n            this.cached = e, this.logger.debug(\"Successfully Restored expirations for \".concat(this.name)), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                expirations: this.values\n            });\n        } catch (e) {\n            this.logger.debug(\"Failed to Restore expirations for \".concat(this.name)), this.logger.error(e);\n        }\n    }\n    getExpiration(e) {\n        const t = this.expirations.get(e);\n        if (!t) {\n            const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NO_MATCHING_KEY\", \"\".concat(this.name, \": \").concat(e));\n            throw this.logger.warn(i), new Error(i);\n        }\n        return t;\n    }\n    checkExpiry(e, t) {\n        const { expiry: i } = t;\n        (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(i) - Date.now() <= 0 && this.expire(e, t);\n    }\n    expire(e, t) {\n        this.expirations.delete(e), this.events.emit(C.expired, {\n            target: e,\n            expiration: t\n        });\n    }\n    checkExpirations() {\n        this.core.relayer.connected && this.expirations.forEach((e, t)=>this.checkExpiry(t, e));\n    }\n    registerEventListeners() {\n        this.core.heartbeat.on(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_2__.HEARTBEAT_EVENTS.pulse, ()=>this.checkExpirations()), this.events.on(C.created, (e)=>{\n            const t = C.created;\n            this.logger.info(\"Emitting \".concat(t)), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), this.persist();\n        }), this.events.on(C.expired, (e)=>{\n            const t = C.expired;\n            this.logger.info(\"Emitting \".concat(t)), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), this.persist();\n        }), this.events.on(C.deleted, (e)=>{\n            const t = C.deleted;\n            this.logger.info(\"Emitting \".concat(t)), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), this.persist();\n        });\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    constructor(e, t){\n        super(e, t), this.core = e, this.logger = t, this.expirations = new Map, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.name = Rt, this.version = Tt, this.cached = [], this.initialized = !1, this.storagePrefix = z, this.init = async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach((i)=>this.expirations.set(i.target, i)), this.cached = [], this.registerEventListeners(), this.initialized = !0);\n        }, this.has = (i)=>{\n            try {\n                const s = this.formatTarget(i);\n                return typeof this.getExpiration(s) < \"u\";\n            } catch (e) {\n                return !1;\n            }\n        }, this.set = (i, s)=>{\n            this.isInitialized();\n            const r = this.formatTarget(i), o = {\n                target: r,\n                expiry: s\n            };\n            this.expirations.set(r, o), this.checkExpiry(r, o), this.events.emit(C.created, {\n                target: r,\n                expiration: o\n            });\n        }, this.get = (i)=>{\n            this.isInitialized();\n            const s = this.formatTarget(i);\n            return this.getExpiration(s);\n        }, this.del = (i)=>{\n            if (this.isInitialized(), this.has(i)) {\n                const s = this.formatTarget(i), r = this.getExpiration(s);\n                this.expirations.delete(s), this.events.emit(C.deleted, {\n                    target: s,\n                    expiration: r\n                });\n            }\n        }, this.on = (i, s)=>{\n            this.events.on(i, s);\n        }, this.once = (i, s)=>{\n            this.events.once(i, s);\n        }, this.off = (i, s)=>{\n            this.events.off(i, s);\n        }, this.removeListener = (i, s)=>{\n            this.events.removeListener(i, s);\n        }, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name);\n    }\n}\nclass Yt extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IVerify {\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    startAbortTimer(e) {\n        return this.abortController = new AbortController, setTimeout(()=>this.abortController.abort(), (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(e));\n    }\n    constructor(e, t){\n        super(e, t), this.projectId = e, this.logger = t, this.name = ee, this.initialized = !1, this.queue = [], this.verifyDisabled = !1, this.init = async (i)=>{\n            if (this.verifyDisabled || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isReactNative)() || !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isBrowser)()) return;\n            const s = this.getVerifyUrl(i === null || i === void 0 ? void 0 : i.verifyUrl);\n            this.verifyUrl !== s && this.removeIframe(), this.verifyUrl = s;\n            try {\n                await this.createIframe();\n            } catch (r) {\n                this.logger.info(\"Verify iframe failed to load: \".concat(this.verifyUrl)), this.logger.info(r);\n            }\n            if (!this.initialized) {\n                this.removeIframe(), this.verifyUrl = te;\n                try {\n                    await this.createIframe();\n                } catch (r) {\n                    this.logger.info(\"Verify iframe failed to load: \".concat(this.verifyUrl)), this.logger.info(r), this.verifyDisabled = !0;\n                }\n            }\n        }, this.register = async (i)=>{\n            this.initialized ? this.sendPost(i.attestationId) : (this.addToQueue(i.attestationId), await this.init());\n        }, this.resolve = async (i)=>{\n            if (this.isDevEnv) return \"\";\n            const s = this.getVerifyUrl(i === null || i === void 0 ? void 0 : i.verifyUrl);\n            let r;\n            try {\n                r = await this.fetchAttestation(i.attestationId, s);\n            } catch (o) {\n                this.logger.info(\"failed to resolve attestation: \".concat(i.attestationId, \" from url: \").concat(s)), this.logger.info(o), r = await this.fetchAttestation(i.attestationId, te);\n            }\n            return r;\n        }, this.fetchAttestation = async (i, s)=>{\n            this.logger.info(\"resolving attestation: \".concat(i, \" from url: \").concat(s));\n            const r = this.startAbortTimer(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.ONE_SECOND * 2), o = await fetch(\"\".concat(s, \"/attestation/\").concat(i), {\n                signal: this.abortController.signal\n            });\n            return clearTimeout(r), o.status === 200 ? await o.json() : void 0;\n        }, this.addToQueue = (i)=>{\n            this.queue.push(i);\n        }, this.processQueue = ()=>{\n            this.queue.length !== 0 && (this.queue.forEach((i)=>this.sendPost(i)), this.queue = []);\n        }, this.sendPost = (i)=>{\n            var s;\n            try {\n                if (!this.iframe) return;\n                (s = this.iframe.contentWindow) == null || s.postMessage(i, \"*\"), this.logger.info(\"postMessage sent: \".concat(i, \" \").concat(this.verifyUrl));\n            } catch (e) {}\n        }, this.createIframe = async ()=>{\n            let i;\n            const s = (r)=>{\n                r.data === \"verify_ready\" && (this.onInit(), window.removeEventListener(\"message\", s), i());\n            };\n            await Promise.race([\n                new Promise((r)=>{\n                    const o = document.getElementById(ee);\n                    if (o) return this.iframe = o, this.onInit(), r();\n                    window.addEventListener(\"message\", s);\n                    const a = document.createElement(\"iframe\");\n                    a.id = ee, a.src = \"\".concat(this.verifyUrl, \"/\").concat(this.projectId), a.style.display = \"none\", document.body.append(a), this.iframe = a, i = r;\n                }),\n                new Promise((r, o)=>setTimeout(()=>{\n                        window.removeEventListener(\"message\", s), o(\"verify iframe load timeout\");\n                    }, (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_7__.FIVE_SECONDS)))\n            ]);\n        }, this.onInit = ()=>{\n            this.initialized = !0, this.processQueue();\n        }, this.removeIframe = ()=>{\n            this.iframe && (this.iframe.remove(), this.iframe = void 0, this.initialized = !1);\n        }, this.getVerifyUrl = (i)=>{\n            let s = i || k;\n            return St.includes(s) || (this.logger.info(\"verify url: \".concat(s, \", not included in trusted list, assigning default: \").concat(k)), s = k), s;\n        }, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.verifyUrl = k, this.abortController = new AbortController, this.isDevEnv = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_13__.isNode)() && process.env.IS_VITEST;\n    }\n}\nclass Ht extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.IEchoClient {\n    constructor(e, t){\n        super(e, t), this.projectId = e, this.logger = t, this.context = Pt, this.registerDeviceToken = async (i)=>{\n            const { clientId: s, token: r, notificationType: o, enableEncrypted: a = !1 } = i, h = \"\".concat(xt, \"/\").concat(this.projectId, \"/clients\");\n            await isomorphic_unfetch__WEBPACK_IMPORTED_MODULE_12___default()(h, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    client_id: s,\n                    type: o,\n                    token: r,\n                    always_raw: a\n                })\n            });\n        }, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.context);\n    }\n}\nvar $r = Object.defineProperty, Jt = Object.getOwnPropertySymbols, Fr = Object.prototype.hasOwnProperty, kr = Object.prototype.propertyIsEnumerable, Xt = (n, e, t)=>e in n ? $r(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, Wt = (n, e)=>{\n    for(var t in e || (e = {}))Fr.call(e, t) && Xt(n, t, e[t]);\n    if (Jt) for (var t of Jt(e))kr.call(e, t) && Xt(n, t, e[t]);\n    return n;\n};\nclass ie extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_14__.ICore {\n    static async init(e) {\n        const t = new ie(e);\n        await t.initialize();\n        const i = await t.crypto.getClientId();\n        return await t.storage.setItem(bt, i), t;\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    async start() {\n        this.initialized || await this.initialize();\n    }\n    async getLogsBlob() {\n        var e;\n        return (e = this.logChunkController) == null ? void 0 : e.logsToBlob({\n            clientId: await this.crypto.getClientId()\n        });\n    }\n    async initialize() {\n        this.logger.trace(\"Initialized\");\n        try {\n            await this.crypto.init(), await this.history.init(), await this.expirer.init(), await this.relayer.init(), await this.heartbeat.init(), await this.pairing.init(), this.initialized = !0, this.logger.info(\"Core Initialization Success\");\n        } catch (e) {\n            throw this.logger.warn(\"Core Initialization Failure at epoch \".concat(Date.now()), e), this.logger.error(e.message), e;\n        }\n    }\n    constructor(e){\n        var t;\n        super(e), this.protocol = De, this.version = Ze, this.name = Z, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.initialized = !1, this.on = (o, a)=>this.events.on(o, a), this.once = (o, a)=>this.events.once(o, a), this.off = (o, a)=>this.events.off(o, a), this.removeListener = (o, a)=>this.events.removeListener(o, a), this.projectId = e === null || e === void 0 ? void 0 : e.projectId, this.relayUrl = (e === null || e === void 0 ? void 0 : e.relayUrl) || me, this.customStoragePrefix = e != null && e.customStoragePrefix ? \":\".concat(e.customStoragePrefix) : \"\";\n        const i = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getDefaultLoggerOptions)({\n            level: typeof (e === null || e === void 0 ? void 0 : e.logger) == \"string\" && e.logger ? e.logger : et.logger\n        }), { logger: s, chunkLoggerController: r } = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generatePlatformLogger)({\n            opts: i,\n            maxSizeInBytes: e === null || e === void 0 ? void 0 : e.maxLogBlobSizeInBytes,\n            loggerOverride: e === null || e === void 0 ? void 0 : e.logger\n        });\n        this.logChunkController = r, (t = this.logChunkController) != null && t.downloadLogsBlobInBrowser && (window.downloadLogsBlobInBrowser = async ()=>{\n            var o, a;\n            (o = this.logChunkController) != null && o.downloadLogsBlobInBrowser && ((a = this.logChunkController) == null || a.downloadLogsBlobInBrowser({\n                clientId: await this.crypto.getClientId()\n            }));\n        }), this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(s, this.name), this.heartbeat = new _walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_2__.HeartBeat, this.crypto = new At(this, this.logger, e === null || e === void 0 ? void 0 : e.keychain), this.history = new jt(this, this.logger), this.expirer = new Gt(this, this.logger), this.storage = e != null && e.storage ? e.storage : new _walletconnect_keyvaluestorage__WEBPACK_IMPORTED_MODULE_1__[\"default\"](Wt(Wt({}, tt), e === null || e === void 0 ? void 0 : e.storageOptions)), this.relayer = new kt({\n            core: this,\n            logger: this.logger,\n            relayUrl: this.relayUrl,\n            projectId: this.projectId\n        }), this.pairing = new qt(this, this.logger), this.verify = new Yt(this.projectId || \"\", this.logger), this.echoClient = new Ht(this.projectId || \"\", this.logger);\n    }\n}\nconst Br = ie;\n //# sourceMappingURL=index.es.js.map\nvar _c, _c1, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Ji\");\n$RefreshReg$(_c1, \"Bs\");\n$RefreshReg$(_c2, \"Ms\");\n$RefreshReg$(_c3, \"Be\");\n$RefreshReg$(_c4, \"Xe\");\n$RefreshReg$(_c5, \"We\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/core/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/heartbeat/dist/cjs/constants/heartbeat.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/heartbeat/dist/cjs/constants/heartbeat.js ***!
  \******************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.HEARTBEAT_EVENTS = exports.HEARTBEAT_INTERVAL = void 0;\nconst time_1 = __webpack_require__(/*! @walletconnect/time */ \"(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/index.js\");\nexports.HEARTBEAT_INTERVAL = time_1.FIVE_SECONDS;\nexports.HEARTBEAT_EVENTS = {\n    pulse: \"heartbeat_pulse\"\n}; //# sourceMappingURL=heartbeat.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91bml2ZXJzYWwtcHJvdmlkZXIvbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2hlYXJ0YmVhdC9kaXN0L2Nqcy9jb25zdGFudHMvaGVhcnRiZWF0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx3QkFBd0IsR0FBR0EsMEJBQTBCLEdBQUcsS0FBSztBQUM3RCxNQUFNSSxTQUFTQyxtQkFBT0EsQ0FBQyxxR0FBcUI7QUFDNUNMLDBCQUEwQixHQUFHSSxPQUFPRSxZQUFZO0FBQ2hETix3QkFBd0IsR0FBRztJQUN2Qk8sT0FBTztBQUNYLEdBQ0EscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91bml2ZXJzYWwtcHJvdmlkZXIvbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2hlYXJ0YmVhdC9kaXN0L2Nqcy9jb25zdGFudHMvaGVhcnRiZWF0LmpzPzI4NmYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkhFQVJUQkVBVF9FVkVOVFMgPSBleHBvcnRzLkhFQVJUQkVBVF9JTlRFUlZBTCA9IHZvaWQgMDtcbmNvbnN0IHRpbWVfMSA9IHJlcXVpcmUoXCJAd2FsbGV0Y29ubmVjdC90aW1lXCIpO1xuZXhwb3J0cy5IRUFSVEJFQVRfSU5URVJWQUwgPSB0aW1lXzEuRklWRV9TRUNPTkRTO1xuZXhwb3J0cy5IRUFSVEJFQVRfRVZFTlRTID0ge1xuICAgIHB1bHNlOiBcImhlYXJ0YmVhdF9wdWxzZVwiLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlYXJ0YmVhdC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJIRUFSVEJFQVRfRVZFTlRTIiwiSEVBUlRCRUFUX0lOVEVSVkFMIiwidGltZV8xIiwicmVxdWlyZSIsIkZJVkVfU0VDT05EUyIsInB1bHNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/heartbeat/dist/cjs/constants/heartbeat.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/heartbeat/dist/cjs/constants/index.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/heartbeat/dist/cjs/constants/index.js ***!
  \**************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(app-pages-browser)/./node_modules/@walletconnect/universal-provider/node_modules/tslib/tslib.es6.js\");\ntslib_1.__exportStar(__webpack_require__(/*! ./heartbeat */ \"(app-pages-browser)/./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/heartbeat/dist/cjs/constants/heartbeat.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91bml2ZXJzYWwtcHJvdmlkZXIvbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2hlYXJ0YmVhdC9kaXN0L2Nqcy9jb25zdGFudHMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsVUFBVUMsbUJBQU9BLENBQUMsbUhBQU87QUFDL0JELFFBQVFFLFlBQVksQ0FBQ0QsbUJBQU9BLENBQUMsK0pBQWEsR0FBR0gsVUFDN0MsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91bml2ZXJzYWwtcHJvdmlkZXIvbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2hlYXJ0YmVhdC9kaXN0L2Nqcy9jb25zdGFudHMvaW5kZXguanM/ODY1MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9oZWFydGJlYXRcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidHNsaWJfMSIsInJlcXVpcmUiLCJfX2V4cG9ydFN0YXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/heartbeat/dist/cjs/constants/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/heartbeat/dist/cjs/heartbeat.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/heartbeat/dist/cjs/heartbeat.js ***!
  \********************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.HeartBeat = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(app-pages-browser)/./node_modules/@walletconnect/universal-provider/node_modules/tslib/tslib.es6.js\");\nconst events_1 = __webpack_require__(/*! events */ \"(app-pages-browser)/./node_modules/events/events.js\");\nconst time_1 = __webpack_require__(/*! @walletconnect/time */ \"(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/index.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(app-pages-browser)/./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/heartbeat/dist/cjs/types/index.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(app-pages-browser)/./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/heartbeat/dist/cjs/constants/index.js\");\nclass HeartBeat extends types_1.IHeartBeat {\n    static init(opts) {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            const heartbeat = new HeartBeat(opts);\n            yield heartbeat.init();\n            return heartbeat;\n        });\n    }\n    init() {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            yield this.initialize();\n        });\n    }\n    stop() {\n        clearInterval(this.intervalRef);\n    }\n    on(event, listener) {\n        this.events.on(event, listener);\n    }\n    once(event, listener) {\n        this.events.once(event, listener);\n    }\n    off(event, listener) {\n        this.events.off(event, listener);\n    }\n    removeListener(event, listener) {\n        this.events.removeListener(event, listener);\n    }\n    initialize() {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            this.intervalRef = setInterval(()=>this.pulse(), time_1.toMiliseconds(this.interval));\n        });\n    }\n    pulse() {\n        this.events.emit(constants_1.HEARTBEAT_EVENTS.pulse);\n    }\n    constructor(opts){\n        super(opts);\n        this.events = new events_1.EventEmitter();\n        this.interval = constants_1.HEARTBEAT_INTERVAL;\n        this.interval = (opts === null || opts === void 0 ? void 0 : opts.interval) || constants_1.HEARTBEAT_INTERVAL;\n    }\n}\nexports.HeartBeat = HeartBeat; //# sourceMappingURL=heartbeat.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91bml2ZXJzYWwtcHJvdmlkZXIvbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2hlYXJ0YmVhdC9kaXN0L2Nqcy9oZWFydGJlYXQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGlCQUFpQixHQUFHLEtBQUs7QUFDekIsTUFBTUcsVUFBVUMsbUJBQU9BLENBQUMsbUhBQU87QUFDL0IsTUFBTUMsV0FBV0QsbUJBQU9BLENBQUMsbUVBQVE7QUFDakMsTUFBTUUsU0FBU0YsbUJBQU9BLENBQUMscUdBQXFCO0FBQzVDLE1BQU1HLFVBQVVILG1CQUFPQSxDQUFDLG1KQUFTO0FBQ2pDLE1BQU1JLGNBQWNKLG1CQUFPQSxDQUFDLDJKQUFhO0FBQ3pDLE1BQU1GLGtCQUFrQkssUUFBUUUsVUFBVTtJQU90QyxPQUFPQyxLQUFLQyxJQUFJLEVBQUU7UUFDZCxPQUFPUixRQUFRUyxTQUFTLENBQUMsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7WUFDM0MsTUFBTUMsWUFBWSxJQUFJWCxVQUFVUztZQUNoQyxNQUFNRSxVQUFVSCxJQUFJO1lBQ3BCLE9BQU9HO1FBQ1g7SUFDSjtJQUNBSCxPQUFPO1FBQ0gsT0FBT1AsUUFBUVMsU0FBUyxDQUFDLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQzNDLE1BQU0sSUFBSSxDQUFDRSxVQUFVO1FBQ3pCO0lBQ0o7SUFDQUMsT0FBTztRQUNIQyxjQUFjLElBQUksQ0FBQ0MsV0FBVztJQUNsQztJQUNBQyxHQUFHQyxLQUFLLEVBQUVDLFFBQVEsRUFBRTtRQUNoQixJQUFJLENBQUNDLE1BQU0sQ0FBQ0gsRUFBRSxDQUFDQyxPQUFPQztJQUMxQjtJQUNBRSxLQUFLSCxLQUFLLEVBQUVDLFFBQVEsRUFBRTtRQUNsQixJQUFJLENBQUNDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDSCxPQUFPQztJQUM1QjtJQUNBRyxJQUFJSixLQUFLLEVBQUVDLFFBQVEsRUFBRTtRQUNqQixJQUFJLENBQUNDLE1BQU0sQ0FBQ0UsR0FBRyxDQUFDSixPQUFPQztJQUMzQjtJQUNBSSxlQUFlTCxLQUFLLEVBQUVDLFFBQVEsRUFBRTtRQUM1QixJQUFJLENBQUNDLE1BQU0sQ0FBQ0csY0FBYyxDQUFDTCxPQUFPQztJQUN0QztJQUNBTixhQUFhO1FBQ1QsT0FBT1gsUUFBUVMsU0FBUyxDQUFDLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQzNDLElBQUksQ0FBQ0ssV0FBVyxHQUFHUSxZQUFZLElBQU0sSUFBSSxDQUFDQyxLQUFLLElBQUlwQixPQUFPcUIsYUFBYSxDQUFDLElBQUksQ0FBQ0MsUUFBUTtRQUN6RjtJQUNKO0lBQ0FGLFFBQVE7UUFDSixJQUFJLENBQUNMLE1BQU0sQ0FBQ1EsSUFBSSxDQUFDckIsWUFBWXNCLGdCQUFnQixDQUFDSixLQUFLO0lBQ3ZEO0lBeENBSyxZQUFZcEIsSUFBSSxDQUFFO1FBQ2QsS0FBSyxDQUFDQTtRQUNOLElBQUksQ0FBQ1UsTUFBTSxHQUFHLElBQUloQixTQUFTMkIsWUFBWTtRQUN2QyxJQUFJLENBQUNKLFFBQVEsR0FBR3BCLFlBQVl5QixrQkFBa0I7UUFDOUMsSUFBSSxDQUFDTCxRQUFRLEdBQUcsQ0FBQ2pCLFNBQVMsUUFBUUEsU0FBUyxLQUFLLElBQUksS0FBSyxJQUFJQSxLQUFLaUIsUUFBUSxLQUFLcEIsWUFBWXlCLGtCQUFrQjtJQUNqSDtBQW9DSjtBQUNBakMsaUJBQWlCLEdBQUdFLFdBQ3BCLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdW5pdmVyc2FsLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9oZWFydGJlYXQvZGlzdC9janMvaGVhcnRiZWF0LmpzP2VjZDciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkhlYXJ0QmVhdCA9IHZvaWQgMDtcbmNvbnN0IHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG5jb25zdCBldmVudHNfMSA9IHJlcXVpcmUoXCJldmVudHNcIik7XG5jb25zdCB0aW1lXzEgPSByZXF1aXJlKFwiQHdhbGxldGNvbm5lY3QvdGltZVwiKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xuY2xhc3MgSGVhcnRCZWF0IGV4dGVuZHMgdHlwZXNfMS5JSGVhcnRCZWF0IHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKG9wdHMpO1xuICAgICAgICB0aGlzLmV2ZW50cyA9IG5ldyBldmVudHNfMS5FdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5pbnRlcnZhbCA9IGNvbnN0YW50c18xLkhFQVJUQkVBVF9JTlRFUlZBTDtcbiAgICAgICAgdGhpcy5pbnRlcnZhbCA9IChvcHRzID09PSBudWxsIHx8IG9wdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdHMuaW50ZXJ2YWwpIHx8IGNvbnN0YW50c18xLkhFQVJUQkVBVF9JTlRFUlZBTDtcbiAgICB9XG4gICAgc3RhdGljIGluaXQob3B0cykge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBoZWFydGJlYXQgPSBuZXcgSGVhcnRCZWF0KG9wdHMpO1xuICAgICAgICAgICAgeWllbGQgaGVhcnRiZWF0LmluaXQoKTtcbiAgICAgICAgICAgIHJldHVybiBoZWFydGJlYXQ7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpbml0KCkge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB5aWVsZCB0aGlzLmluaXRpYWxpemUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0b3AoKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbFJlZik7XG4gICAgfVxuICAgIG9uKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLmV2ZW50cy5vbihldmVudCwgbGlzdGVuZXIpO1xuICAgIH1cbiAgICBvbmNlKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLmV2ZW50cy5vbmNlKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgfVxuICAgIG9mZihldmVudCwgbGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5ldmVudHMub2ZmKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgfVxuICAgIHJlbW92ZUxpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLmV2ZW50cy5yZW1vdmVMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIpO1xuICAgIH1cbiAgICBpbml0aWFsaXplKCkge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB0aGlzLmludGVydmFsUmVmID0gc2V0SW50ZXJ2YWwoKCkgPT4gdGhpcy5wdWxzZSgpLCB0aW1lXzEudG9NaWxpc2Vjb25kcyh0aGlzLmludGVydmFsKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBwdWxzZSgpIHtcbiAgICAgICAgdGhpcy5ldmVudHMuZW1pdChjb25zdGFudHNfMS5IRUFSVEJFQVRfRVZFTlRTLnB1bHNlKTtcbiAgICB9XG59XG5leHBvcnRzLkhlYXJ0QmVhdCA9IEhlYXJ0QmVhdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlYXJ0YmVhdC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJIZWFydEJlYXQiLCJ0c2xpYl8xIiwicmVxdWlyZSIsImV2ZW50c18xIiwidGltZV8xIiwidHlwZXNfMSIsImNvbnN0YW50c18xIiwiSUhlYXJ0QmVhdCIsImluaXQiLCJvcHRzIiwiX19hd2FpdGVyIiwiaGVhcnRiZWF0IiwiaW5pdGlhbGl6ZSIsInN0b3AiLCJjbGVhckludGVydmFsIiwiaW50ZXJ2YWxSZWYiLCJvbiIsImV2ZW50IiwibGlzdGVuZXIiLCJldmVudHMiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJzZXRJbnRlcnZhbCIsInB1bHNlIiwidG9NaWxpc2Vjb25kcyIsImludGVydmFsIiwiZW1pdCIsIkhFQVJUQkVBVF9FVkVOVFMiLCJjb25zdHJ1Y3RvciIsIkV2ZW50RW1pdHRlciIsIkhFQVJUQkVBVF9JTlRFUlZBTCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/heartbeat/dist/cjs/heartbeat.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/heartbeat/dist/cjs/index.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/heartbeat/dist/cjs/index.js ***!
  \****************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(app-pages-browser)/./node_modules/@walletconnect/universal-provider/node_modules/tslib/tslib.es6.js\");\ntslib_1.__exportStar(__webpack_require__(/*! ./heartbeat */ \"(app-pages-browser)/./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/heartbeat/dist/cjs/heartbeat.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./types */ \"(app-pages-browser)/./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/heartbeat/dist/cjs/types/index.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./constants */ \"(app-pages-browser)/./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/heartbeat/dist/cjs/constants/index.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91bml2ZXJzYWwtcHJvdmlkZXIvbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2hlYXJ0YmVhdC9kaXN0L2Nqcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxVQUFVQyxtQkFBT0EsQ0FBQyxtSEFBTztBQUMvQkQsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyxxSkFBYSxHQUFHSDtBQUM3Q0UsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyxtSkFBUyxHQUFHSDtBQUN6Q0UsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQywySkFBYSxHQUFHSCxVQUM3QyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3VuaXZlcnNhbC1wcm92aWRlci9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvaGVhcnRiZWF0L2Rpc3QvY2pzL2luZGV4LmpzPzQ5ZjMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaGVhcnRiZWF0XCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3R5cGVzXCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0c2xpYl8xIiwicmVxdWlyZSIsIl9fZXhwb3J0U3RhciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/heartbeat/dist/cjs/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/heartbeat/dist/cjs/types/heartbeat.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/heartbeat/dist/cjs/types/heartbeat.js ***!
  \**************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.IHeartBeat = void 0;\nconst events_1 = __webpack_require__(/*! @walletconnect/events */ \"(app-pages-browser)/./node_modules/@walletconnect/events/dist/esm/index.js\");\nclass IHeartBeat extends events_1.IEvents {\n    constructor(opts){\n        super();\n    }\n}\nexports.IHeartBeat = IHeartBeat; //# sourceMappingURL=heartbeat.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91bml2ZXJzYWwtcHJvdmlkZXIvbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2hlYXJ0YmVhdC9kaXN0L2Nqcy90eXBlcy9oZWFydGJlYXQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGtCQUFrQixHQUFHLEtBQUs7QUFDMUIsTUFBTUcsV0FBV0MsbUJBQU9BLENBQUMseUdBQXVCO0FBQ2hELE1BQU1GLG1CQUFtQkMsU0FBU0UsT0FBTztJQUNyQ0MsWUFBWUMsSUFBSSxDQUFFO1FBQ2QsS0FBSztJQUNUO0FBQ0o7QUFDQVAsa0JBQWtCLEdBQUdFLFlBQ3JCLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdW5pdmVyc2FsLXByb3ZpZGVyL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9oZWFydGJlYXQvZGlzdC9janMvdHlwZXMvaGVhcnRiZWF0LmpzP2MxOWUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLklIZWFydEJlYXQgPSB2b2lkIDA7XG5jb25zdCBldmVudHNfMSA9IHJlcXVpcmUoXCJAd2FsbGV0Y29ubmVjdC9ldmVudHNcIik7XG5jbGFzcyBJSGVhcnRCZWF0IGV4dGVuZHMgZXZlbnRzXzEuSUV2ZW50cyB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cbn1cbmV4cG9ydHMuSUhlYXJ0QmVhdCA9IElIZWFydEJlYXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZWFydGJlYXQuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiSUhlYXJ0QmVhdCIsImV2ZW50c18xIiwicmVxdWlyZSIsIklFdmVudHMiLCJjb25zdHJ1Y3RvciIsIm9wdHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/heartbeat/dist/cjs/types/heartbeat.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/heartbeat/dist/cjs/types/index.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/heartbeat/dist/cjs/types/index.js ***!
  \**********************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(app-pages-browser)/./node_modules/@walletconnect/universal-provider/node_modules/tslib/tslib.es6.js\");\ntslib_1.__exportStar(__webpack_require__(/*! ./heartbeat */ \"(app-pages-browser)/./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/heartbeat/dist/cjs/types/heartbeat.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91bml2ZXJzYWwtcHJvdmlkZXIvbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2hlYXJ0YmVhdC9kaXN0L2Nqcy90eXBlcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxVQUFVQyxtQkFBT0EsQ0FBQyxtSEFBTztBQUMvQkQsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQywySkFBYSxHQUFHSCxVQUM3QyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3VuaXZlcnNhbC1wcm92aWRlci9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvaGVhcnRiZWF0L2Rpc3QvY2pzL3R5cGVzL2luZGV4LmpzPzYwNGYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaGVhcnRiZWF0XCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRzbGliXzEiLCJyZXF1aXJlIiwiX19leHBvcnRTdGFyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/heartbeat/dist/cjs/types/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/sign-client/dist/index.es.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/sign-client/dist/index.es.js ***!
  \*****************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AUTH_CONTEXT: function() { return /* binding */ ze; },\n/* harmony export */   AUTH_KEYS_CONTEXT: function() { return /* binding */ He; },\n/* harmony export */   AUTH_PAIRING_TOPIC_CONTEXT: function() { return /* binding */ Ye; },\n/* harmony export */   AUTH_PROTOCOL: function() { return /* binding */ Qe; },\n/* harmony export */   AUTH_PUBLIC_KEY_NAME: function() { return /* binding */ J; },\n/* harmony export */   AUTH_REQUEST_CONTEXT: function() { return /* binding */ Xe; },\n/* harmony export */   AUTH_STORAGE_PREFIX: function() { return /* binding */ X; },\n/* harmony export */   AUTH_VERSION: function() { return /* binding */ zt; },\n/* harmony export */   ENGINE_CONTEXT: function() { return /* binding */ ke; },\n/* harmony export */   ENGINE_QUEUE_STATES: function() { return /* binding */ A; },\n/* harmony export */   ENGINE_RPC_OPTS: function() { return /* binding */ q; },\n/* harmony export */   HISTORY_CONTEXT: function() { return /* binding */ Ft; },\n/* harmony export */   HISTORY_EVENTS: function() { return /* binding */ kt; },\n/* harmony export */   HISTORY_STORAGE_VERSION: function() { return /* binding */ jt; },\n/* harmony export */   METHODS_TO_VERIFY: function() { return /* binding */ je; },\n/* harmony export */   PROPOSAL_CONTEXT: function() { return /* binding */ Ke; },\n/* harmony export */   PROPOSAL_EXPIRY: function() { return /* binding */ Qt; },\n/* harmony export */   PROPOSAL_EXPIRY_MESSAGE: function() { return /* binding */ Ue; },\n/* harmony export */   REQUEST_CONTEXT: function() { return /* binding */ Fe; },\n/* harmony export */   SESSION_CONTEXT: function() { return /* binding */ Ge; },\n/* harmony export */   SESSION_EXPIRY: function() { return /* binding */ L; },\n/* harmony export */   SESSION_REQUEST_EXPIRY_BOUNDARIES: function() { return /* binding */ re; },\n/* harmony export */   SIGN_CLIENT_CONTEXT: function() { return /* binding */ _e; },\n/* harmony export */   SIGN_CLIENT_DEFAULT: function() { return /* binding */ ie; },\n/* harmony export */   SIGN_CLIENT_EVENTS: function() { return /* binding */ Ut; },\n/* harmony export */   SIGN_CLIENT_PROTOCOL: function() { return /* binding */ Se; },\n/* harmony export */   SIGN_CLIENT_STORAGE_OPTIONS: function() { return /* binding */ Gt; },\n/* harmony export */   SIGN_CLIENT_STORAGE_PREFIX: function() { return /* binding */ se; },\n/* harmony export */   SIGN_CLIENT_VERSION: function() { return /* binding */ Ee; },\n/* harmony export */   SessionStore: function() { return /* binding */ ns; },\n/* harmony export */   SignClient: function() { return /* binding */ os; },\n/* harmony export */   WALLETCONNECT_DEEPLINK_CHOICE: function() { return /* binding */ Re; },\n/* harmony export */   \"default\": function() { return /* binding */ ne; }\n/* harmony export */ });\n/* harmony import */ var _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @walletconnect/core */ \"(app-pages-browser)/./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/core/dist/index.es.js\");\n/* harmony import */ var _walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/logger */ \"(app-pages-browser)/./node_modules/@walletconnect/logger/dist/index.es.js\");\n/* harmony import */ var _walletconnect_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @walletconnect/types */ \"(app-pages-browser)/./node_modules/@walletconnect/types/dist/index.es.js\");\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @walletconnect/utils */ \"(app-pages-browser)/./node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! events */ \"(app-pages-browser)/./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/time */ \"(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_time__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(app-pages-browser)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n\n\n\n\n\n\n\nconst Se = \"wc\", Ee = 2, _e = \"client\", se = \"\".concat(Se, \"@\").concat(Ee, \":\").concat(_e, \":\"), ie = {\n    name: _e,\n    logger: \"error\",\n    controller: !1,\n    relayUrl: \"wss://relay.walletconnect.com\"\n}, Ut = {\n    session_proposal: \"session_proposal\",\n    session_update: \"session_update\",\n    session_extend: \"session_extend\",\n    session_ping: \"session_ping\",\n    session_delete: \"session_delete\",\n    session_expire: \"session_expire\",\n    session_request: \"session_request\",\n    session_request_sent: \"session_request_sent\",\n    session_event: \"session_event\",\n    proposal_expire: \"proposal_expire\",\n    session_authenticate: \"session_authenticate\",\n    session_request_expire: \"session_request_expire\"\n}, Gt = {\n    database: \":memory:\"\n}, Re = \"WALLETCONNECT_DEEPLINK_CHOICE\", kt = {\n    created: \"history_created\",\n    updated: \"history_updated\",\n    deleted: \"history_deleted\",\n    sync: \"history_sync\"\n}, Ft = \"history\", jt = \"0.3\", Ke = \"proposal\", Qt = _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.THIRTY_DAYS, Ue = \"Proposal expired\", Ge = \"session\", L = _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.SEVEN_DAYS, ke = \"engine\", q = {\n    wc_sessionPropose: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES,\n            prompt: !0,\n            tag: 1100\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1101\n        }\n    },\n    wc_sessionSettle: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1102\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1103\n        }\n    },\n    wc_sessionUpdate: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.ONE_DAY,\n            prompt: !1,\n            tag: 1104\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.ONE_DAY,\n            prompt: !1,\n            tag: 1105\n        }\n    },\n    wc_sessionExtend: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.ONE_DAY,\n            prompt: !1,\n            tag: 1106\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.ONE_DAY,\n            prompt: !1,\n            tag: 1107\n        }\n    },\n    wc_sessionRequest: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES,\n            prompt: !0,\n            tag: 1108\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1109\n        }\n    },\n    wc_sessionEvent: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES,\n            prompt: !0,\n            tag: 1110\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1111\n        }\n    },\n    wc_sessionDelete: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.ONE_DAY,\n            prompt: !1,\n            tag: 1112\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.ONE_DAY,\n            prompt: !1,\n            tag: 1113\n        }\n    },\n    wc_sessionPing: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.ONE_DAY,\n            prompt: !1,\n            tag: 1114\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.ONE_DAY,\n            prompt: !1,\n            tag: 1115\n        }\n    },\n    wc_sessionAuthenticate: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.ONE_HOUR,\n            prompt: !0,\n            tag: 1116\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.ONE_HOUR,\n            prompt: !1,\n            tag: 1117\n        }\n    }\n}, re = {\n    min: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES,\n    max: _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.SEVEN_DAYS\n}, A = {\n    idle: \"IDLE\",\n    active: \"ACTIVE\"\n}, Fe = \"request\", je = [\n    \"wc_sessionPropose\",\n    \"wc_sessionRequest\",\n    \"wc_authRequest\"\n], Qe = \"wc\", zt = 1.5, ze = \"auth\", He = \"authKeys\", Ye = \"pairingTopics\", Xe = \"requests\", X = \"\".concat(Qe, \"@\", 1.5, \":\").concat(ze, \":\"), J = \"\".concat(X, \":PUB_KEY\");\nvar Ht = Object.defineProperty, Yt = Object.defineProperties, Xt = Object.getOwnPropertyDescriptors, Je = Object.getOwnPropertySymbols, Jt = Object.prototype.hasOwnProperty, Bt = Object.prototype.propertyIsEnumerable, Be = (S, n, t)=>n in S ? Ht(S, n, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : S[n] = t, m = (S, n)=>{\n    for(var t in n || (n = {}))Jt.call(n, t) && Be(S, t, n[t]);\n    if (Je) for (var t of Je(n))Bt.call(n, t) && Be(S, t, n[t]);\n    return S;\n}, F = (S, n)=>Yt(S, Xt(n));\nclass Wt extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_4__.IEngine {\n    async isInitialized() {\n        if (!this.initialized) {\n            const { message: n } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(n);\n        }\n        await this.client.core.relayer.confirmOnlineStateOrThrow();\n    }\n    registerRelayerEvents() {\n        this.client.core.relayer.on(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.RELAYER_EVENTS.message, async (n)=>{\n            const { topic: t, message: e } = n, { publicKey: s } = this.client.auth.authKeys.keys.includes(J) ? this.client.auth.authKeys.get(J) : {\n                responseTopic: void 0,\n                publicKey: void 0\n            }, i = await this.client.core.crypto.decode(t, e, {\n                receiverPublicKey: s\n            });\n            try {\n                (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcRequest)(i) ? (this.client.core.history.set(t, i), this.onRelayEventRequest({\n                    topic: t,\n                    payload: i\n                })) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResponse)(i) ? (await this.client.core.history.resolve(i), await this.onRelayEventResponse({\n                    topic: t,\n                    payload: i\n                }), this.client.core.history.delete(t, i.id)) : this.onRelayEventUnknownPayload({\n                    topic: t,\n                    payload: i\n                });\n            } catch (r) {\n                this.client.logger.error(r);\n            }\n        });\n    }\n    registerExpirerEvents() {\n        this.client.core.expirer.on(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EXPIRER_EVENTS.expired, async (n)=>{\n            const { topic: t, id: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseExpirerTarget)(n.target);\n            if (e && this.client.pendingRequest.keys.includes(e)) return await this.deletePendingSessionRequest(e, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\"), !0);\n            t ? this.client.session.keys.includes(t) && (await this.deleteSession({\n                topic: t,\n                expirerHasDeleted: !0\n            }), this.client.events.emit(\"session_expire\", {\n                topic: t\n            })) : e && (await this.deleteProposal(e, !0), this.client.events.emit(\"proposal_expire\", {\n                id: e\n            }));\n        });\n    }\n    registerPairingEvents() {\n        this.client.core.pairing.events.on(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.PAIRING_EVENTS.create, (n)=>this.onPairingCreated(n)), this.client.core.pairing.events.on(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.PAIRING_EVENTS.delete, (n)=>{\n            this.addToRecentlyDeleted(n.topic, \"pairing\");\n        });\n    }\n    isValidPairingTopic(n) {\n        if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(n, !1)) {\n            const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"pairing topic should be a string: \".concat(n));\n            throw new Error(t);\n        }\n        if (!this.client.core.pairing.pairings.keys.includes(n)) {\n            const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NO_MATCHING_KEY\", \"pairing topic doesn't exist: \".concat(n));\n            throw new Error(t);\n        }\n        if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(this.client.core.pairing.pairings.get(n).expiry)) {\n            const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\", \"pairing topic: \".concat(n));\n            throw new Error(t);\n        }\n    }\n    async isValidSessionTopic(n) {\n        if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(n, !1)) {\n            const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"session topic should be a string: \".concat(n));\n            throw new Error(t);\n        }\n        if (this.checkRecentlyDeleted(n), !this.client.session.keys.includes(n)) {\n            const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NO_MATCHING_KEY\", \"session topic doesn't exist: \".concat(n));\n            throw new Error(t);\n        }\n        if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(this.client.session.get(n).expiry)) {\n            await this.deleteSession({\n                topic: n\n            });\n            const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\", \"session topic: \".concat(n));\n            throw new Error(t);\n        }\n        if (!this.client.core.crypto.keychain.has(n)) {\n            const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"session topic does not exist in keychain: \".concat(n));\n            throw await this.deleteSession({\n                topic: n\n            }), new Error(t);\n        }\n    }\n    async isValidSessionOrPairingTopic(n) {\n        if (this.checkRecentlyDeleted(n), this.client.session.keys.includes(n)) await this.isValidSessionTopic(n);\n        else if (this.client.core.pairing.pairings.keys.includes(n)) this.isValidPairingTopic(n);\n        else if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(n, !1)) {\n            const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NO_MATCHING_KEY\", \"session or pairing topic doesn't exist: \".concat(n));\n            throw new Error(t);\n        } else {\n            const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"session or pairing topic should be a string: \".concat(n));\n            throw new Error(t);\n        }\n    }\n    async isValidProposalId(n) {\n        if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidId)(n)) {\n            const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"proposal id should be a number: \".concat(n));\n            throw new Error(t);\n        }\n        if (!this.client.proposal.keys.includes(n)) {\n            const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NO_MATCHING_KEY\", \"proposal id doesn't exist: \".concat(n));\n            throw new Error(t);\n        }\n        if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(this.client.proposal.get(n).expiryTimestamp)) {\n            await this.deleteProposal(n);\n            const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\", \"proposal id: \".concat(n));\n            throw new Error(t);\n        }\n    }\n    constructor(n){\n        var _this;\n        super(n), _this = this, this.name = ke, this.events = new (events__WEBPACK_IMPORTED_MODULE_1___default()), this.initialized = !1, this.requestQueue = {\n            state: A.idle,\n            queue: []\n        }, this.sessionRequestQueue = {\n            state: A.idle,\n            queue: []\n        }, this.requestQueueDelay = _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.ONE_SECOND, this.expectedPairingMethodMap = new Map, this.recentlyDeletedMap = new Map, this.recentlyDeletedLimit = 200, this.init = async ()=>{\n            this.initialized || (await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.registerPairingEvents(), this.client.core.pairing.register({\n                methods: Object.keys(q)\n            }), this.initialized = !0, setTimeout(()=>{\n                this.sessionRequestQueue.queue = this.getPendingSessionRequests(), this.processSessionRequestQueue();\n            }, (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.toMiliseconds)(this.requestQueueDelay)));\n        }, this.connect = async (t)=>{\n            await this.isInitialized();\n            const e = F(m({}, t), {\n                requiredNamespaces: t.requiredNamespaces || {},\n                optionalNamespaces: t.optionalNamespaces || {}\n            });\n            await this.isValidConnect(e);\n            const { pairingTopic: s, requiredNamespaces: i, optionalNamespaces: r, sessionProperties: o, relays: a } = e;\n            let c = s, d, p = !1;\n            try {\n                c && (p = this.client.core.pairing.pairings.get(c).active);\n            } catch (f) {\n                throw this.client.logger.error(\"connect() -> pairing.get(\".concat(c, \") failed\")), f;\n            }\n            if (!c || !p) {\n                const { topic: f, uri: v } = await this.client.core.pairing.create();\n                c = f, d = v;\n            }\n            if (!c) {\n                const { message: f } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NO_MATCHING_KEY\", \"connect() pairing topic: \".concat(c));\n                throw new Error(f);\n            }\n            const g = await this.client.core.crypto.generateKeyPair(), h = q.wc_sessionPropose.req.ttl || _walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.FIVE_MINUTES, y = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(h), w = m({\n                requiredNamespaces: i,\n                optionalNamespaces: r,\n                relays: a !== null && a !== void 0 ? a : [\n                    {\n                        protocol: _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.RELAYER_DEFAULT_PROTOCOL\n                    }\n                ],\n                proposer: {\n                    publicKey: g,\n                    metadata: this.client.metadata\n                },\n                expiryTimestamp: y\n            }, o && {\n                sessionProperties: o\n            }), { reject: I, resolve: D, done: E } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)(h, Ue);\n            this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_connect\"), async (param)=>{\n                let { error: f, session: v } = param;\n                if (f) I(f);\n                else if (v) {\n                    v.self.publicKey = g;\n                    const j = F(m({}, v), {\n                        requiredNamespaces: w.requiredNamespaces,\n                        optionalNamespaces: w.optionalNamespaces\n                    });\n                    await this.client.session.set(v.topic, j), await this.setExpiry(v.topic, v.expiry), c && await this.client.core.pairing.updateMetadata({\n                        topic: c,\n                        metadata: v.peer.metadata\n                    }), D(j);\n                }\n            });\n            const P = await this.sendRequest({\n                topic: c,\n                method: \"wc_sessionPropose\",\n                params: w,\n                throwOnFailedPublish: !0\n            });\n            return await this.setProposal(P, m({\n                id: P\n            }, w)), {\n                uri: d,\n                approval: E\n            };\n        }, this.pair = async (t)=>{\n            await this.isInitialized();\n            try {\n                return await this.client.core.pairing.pair(t);\n            } catch (e) {\n                throw this.client.logger.error(\"pair() failed\"), e;\n            }\n        }, this.approve = async (t)=>{\n            await this.isInitialized();\n            try {\n                await this.isValidApprove(t);\n            } catch (E) {\n                throw this.client.logger.error(\"approve() -> isValidApprove() failed\"), E;\n            }\n            const { id: e, relayProtocol: s, namespaces: i, sessionProperties: r, sessionConfig: o } = t;\n            let a;\n            try {\n                a = this.client.proposal.get(e);\n            } catch (E) {\n                throw this.client.logger.error(\"approve() -> proposal.get(\".concat(e, \") failed\")), E;\n            }\n            let { pairingTopic: c, proposer: d, requiredNamespaces: p, optionalNamespaces: g } = a;\n            c = c || \"\";\n            const h = await this.client.core.crypto.generateKeyPair(), y = d.publicKey, w = await this.client.core.crypto.generateSharedKey(h, y), I = m(m({\n                relay: {\n                    protocol: s !== null && s !== void 0 ? s : \"irn\"\n                },\n                namespaces: i,\n                pairingTopic: c,\n                controller: {\n                    publicKey: h,\n                    metadata: this.client.metadata\n                },\n                expiry: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(L)\n            }, r && {\n                sessionProperties: r\n            }), o && {\n                sessionConfig: o\n            });\n            await this.client.core.relayer.subscribe(w);\n            const D = F(m({}, I), {\n                topic: w,\n                requiredNamespaces: p,\n                optionalNamespaces: g,\n                pairingTopic: c,\n                acknowledged: !1,\n                self: I.controller,\n                peer: {\n                    publicKey: d.publicKey,\n                    metadata: d.metadata\n                },\n                controller: h\n            });\n            await this.client.session.set(w, D);\n            try {\n                await this.sendResult({\n                    id: e,\n                    topic: c,\n                    result: {\n                        relay: {\n                            protocol: s !== null && s !== void 0 ? s : \"irn\"\n                        },\n                        responderPublicKey: h\n                    },\n                    throwOnFailedPublish: !0\n                }), await this.sendRequest({\n                    topic: w,\n                    method: \"wc_sessionSettle\",\n                    params: I,\n                    throwOnFailedPublish: !0\n                });\n            } catch (E) {\n                throw this.client.logger.error(E), this.client.session.delete(w, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")), await this.client.core.relayer.unsubscribe(w), E;\n            }\n            return await this.client.core.pairing.updateMetadata({\n                topic: c,\n                metadata: d.metadata\n            }), await this.client.proposal.delete(e, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")), await this.client.core.pairing.activate({\n                topic: c\n            }), await this.setExpiry(w, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(L)), {\n                topic: w,\n                acknowledged: ()=>new Promise((E)=>setTimeout(()=>E(this.client.session.get(w)), 500))\n            };\n        }, this.reject = async (t)=>{\n            await this.isInitialized();\n            try {\n                await this.isValidReject(t);\n            } catch (r) {\n                throw this.client.logger.error(\"reject() -> isValidReject() failed\"), r;\n            }\n            const { id: e, reason: s } = t;\n            let i;\n            try {\n                i = this.client.proposal.get(e).pairingTopic;\n            } catch (r) {\n                throw this.client.logger.error(\"reject() -> proposal.get(\".concat(e, \") failed\")), r;\n            }\n            i && (await this.sendError({\n                id: e,\n                topic: i,\n                error: s\n            }), await this.client.proposal.delete(e, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")));\n        }, this.update = async (t)=>{\n            await this.isInitialized();\n            try {\n                await this.isValidUpdate(t);\n            } catch (p) {\n                throw this.client.logger.error(\"update() -> isValidUpdate() failed\"), p;\n            }\n            const { topic: e, namespaces: s } = t, { done: i, resolve: r, reject: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)(), a = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)(), c = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.getBigIntRpcId)().toString(), d = this.client.session.get(e).namespaces;\n            return this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_update\", a), (param)=>{\n                let { error: p } = param;\n                p ? o(p) : r();\n            }), await this.client.session.update(e, {\n                namespaces: s\n            }), this.sendRequest({\n                topic: e,\n                method: \"wc_sessionUpdate\",\n                params: {\n                    namespaces: s\n                },\n                throwOnFailedPublish: !0,\n                clientRpcId: a,\n                relayRpcId: c\n            }).catch((p)=>{\n                this.client.logger.error(p), this.client.session.update(e, {\n                    namespaces: d\n                }), o(p);\n            }), {\n                acknowledged: i\n            };\n        }, this.extend = async (t)=>{\n            await this.isInitialized();\n            try {\n                await this.isValidExtend(t);\n            } catch (a) {\n                throw this.client.logger.error(\"extend() -> isValidExtend() failed\"), a;\n            }\n            const { topic: e } = t, s = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)(), { done: i, resolve: r, reject: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)();\n            return this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_extend\", s), (param)=>{\n                let { error: a } = param;\n                a ? o(a) : r();\n            }), await this.setExpiry(e, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(L)), this.sendRequest({\n                topic: e,\n                method: \"wc_sessionExtend\",\n                params: {},\n                clientRpcId: s,\n                throwOnFailedPublish: !0\n            }).catch((a)=>{\n                o(a);\n            }), {\n                acknowledged: i\n            };\n        }, this.request = async (t)=>{\n            await this.isInitialized();\n            try {\n                await this.isValidRequest(t);\n            } catch (h) {\n                throw this.client.logger.error(\"request() -> isValidRequest() failed\"), h;\n            }\n            const { chainId: e, request: s, topic: i, expiry: r = q.wc_sessionRequest.req.ttl } = t, o = this.client.session.get(i), a = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)(), c = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.getBigIntRpcId)().toString(), { done: d, resolve: p, reject: g } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)(r, \"Request expired. Please try again.\");\n            return this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", a), (param)=>{\n                let { error: h, result: y } = param;\n                h ? g(h) : p(y);\n            }), await Promise.all([\n                new Promise(async (h)=>{\n                    await this.sendRequest({\n                        clientRpcId: a,\n                        relayRpcId: c,\n                        topic: i,\n                        method: \"wc_sessionRequest\",\n                        params: {\n                            request: F(m({}, s), {\n                                expiryTimestamp: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(r)\n                            }),\n                            chainId: e\n                        },\n                        expiry: r,\n                        throwOnFailedPublish: !0\n                    }).catch((y)=>g(y)), this.client.events.emit(\"session_request_sent\", {\n                        topic: i,\n                        request: s,\n                        chainId: e,\n                        id: a\n                    }), h();\n                }),\n                new Promise(async (h)=>{\n                    var y;\n                    if (!((y = o.sessionConfig) != null && y.disableDeepLink)) {\n                        const w = await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getDeepLink)(this.client.core.storage, Re);\n                        (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.handleDeeplinkRedirect)({\n                            id: a,\n                            topic: i,\n                            wcDeepLink: w\n                        });\n                    }\n                    h();\n                }),\n                d()\n            ]).then((h)=>h[2]);\n        }, this.respond = async (t)=>{\n            await this.isInitialized(), await this.isValidRespond(t);\n            const { topic: e, response: s } = t, { id: i } = s;\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(s) ? await this.sendResult({\n                id: i,\n                topic: e,\n                result: s.result,\n                throwOnFailedPublish: !0\n            }) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(s) && await this.sendError({\n                id: i,\n                topic: e,\n                error: s.error\n            }), this.cleanupAfterResponse(t);\n        }, this.ping = async (t)=>{\n            await this.isInitialized();\n            try {\n                await this.isValidPing(t);\n            } catch (s) {\n                throw this.client.logger.error(\"ping() -> isValidPing() failed\"), s;\n            }\n            const { topic: e } = t;\n            if (this.client.session.keys.includes(e)) {\n                const s = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)(), i = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.getBigIntRpcId)().toString(), { done: r, resolve: o, reject: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)();\n                this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_ping\", s), (param)=>{\n                    let { error: c } = param;\n                    c ? a(c) : o();\n                }), await Promise.all([\n                    this.sendRequest({\n                        topic: e,\n                        method: \"wc_sessionPing\",\n                        params: {},\n                        throwOnFailedPublish: !0,\n                        clientRpcId: s,\n                        relayRpcId: i\n                    }),\n                    r()\n                ]);\n            } else this.client.core.pairing.pairings.keys.includes(e) && await this.client.core.pairing.ping({\n                topic: e\n            });\n        }, this.emit = async (t)=>{\n            await this.isInitialized(), await this.isValidEmit(t);\n            const { topic: e, event: s, chainId: i } = t, r = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.getBigIntRpcId)().toString();\n            await this.sendRequest({\n                topic: e,\n                method: \"wc_sessionEvent\",\n                params: {\n                    event: s,\n                    chainId: i\n                },\n                throwOnFailedPublish: !0,\n                relayRpcId: r\n            });\n        }, this.disconnect = async (t)=>{\n            await this.isInitialized(), await this.isValidDisconnect(t);\n            const { topic: e } = t;\n            if (this.client.session.keys.includes(e)) await this.sendRequest({\n                topic: e,\n                method: \"wc_sessionDelete\",\n                params: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\"),\n                throwOnFailedPublish: !0\n            }), await this.deleteSession({\n                topic: e,\n                emitEvent: !1\n            });\n            else if (this.client.core.pairing.pairings.keys.includes(e)) await this.client.core.pairing.disconnect({\n                topic: e\n            });\n            else {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISMATCHED_TOPIC\", \"Session or pairing topic not found: \".concat(e));\n                throw new Error(s);\n            }\n        }, this.find = (t)=>(this.isInitialized(), this.client.session.getAll().filter((e)=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isSessionCompatible)(e, t))), this.getPendingSessionRequests = ()=>this.client.pendingRequest.getAll(), this.authenticate = async (t)=>{\n            this.isInitialized(), this.isValidAuthenticate(t);\n            const { chains: e, statement: s = \"\", uri: i, domain: r, nonce: o, type: a, exp: c, nbf: d, methods: p = [] } = t, g = [\n                ...t.resources || []\n            ], { topic: h, uri: y } = await this.client.core.pairing.create({\n                methods: [\n                    \"wc_sessionAuthenticate\"\n                ]\n            });\n            this.client.logger.info({\n                message: \"Generated new pairing\",\n                pairing: {\n                    topic: h,\n                    uri: y\n                }\n            });\n            const w = await this.client.core.crypto.generateKeyPair(), I = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashKey)(w);\n            if (await Promise.all([\n                this.client.auth.authKeys.set(J, {\n                    responseTopic: I,\n                    publicKey: w\n                }),\n                this.client.auth.pairingTopics.set(I, {\n                    topic: I,\n                    pairingTopic: h\n                })\n            ]), await this.client.core.relayer.subscribe(I), this.client.logger.info(\"sending request to new pairing topic: \".concat(h)), p.length > 0) {\n                const { namespace: O } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseChainId)(e[0]);\n                let _ = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createEncodedRecap)(O, \"request\", p);\n                (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getRecapFromResources)(g) && (_ = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.mergeEncodedRecaps)(_, g.pop())), g.push(_);\n            }\n            const D = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(q.wc_sessionPropose.req.ttl), E = {\n                authPayload: {\n                    type: a !== null && a !== void 0 ? a : \"caip122\",\n                    chains: e,\n                    statement: s,\n                    aud: i,\n                    domain: r,\n                    version: \"1\",\n                    nonce: o,\n                    iat: new Date().toISOString(),\n                    exp: c,\n                    nbf: d,\n                    resources: g\n                },\n                requester: {\n                    publicKey: w,\n                    metadata: this.client.metadata\n                },\n                expiryTimestamp: D\n            }, P = {\n                eip155: {\n                    chains: e,\n                    methods: [\n                        ...new Set([\n                            \"personal_sign\",\n                            ...p\n                        ])\n                    ],\n                    events: [\n                        \"chainChanged\",\n                        \"accountsChanged\"\n                    ]\n                }\n            }, f = {\n                requiredNamespaces: {},\n                optionalNamespaces: P,\n                relays: [\n                    {\n                        protocol: \"irn\"\n                    }\n                ],\n                proposer: {\n                    publicKey: w,\n                    metadata: this.client.metadata\n                },\n                expiryTimestamp: D\n            }, { done: v, resolve: j, reject: oe } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)(q.wc_sessionAuthenticate.req.ttl, \"Request expired\"), B = async (param)=>{\n                let { error: O, session: _ } = param;\n                if (this.events.off((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", M), ae), O) oe(O);\n                else if (_) {\n                    _.self.publicKey = w, await this.client.session.set(_.topic, _), await this.setExpiry(_.topic, _.expiry), h && await this.client.core.pairing.updateMetadata({\n                        topic: h,\n                        metadata: _.peer.metadata\n                    });\n                    const Q = this.client.session.get(_.topic);\n                    j({\n                        session: Q\n                    });\n                }\n            }, ae = async (O)=>{\n                if (O.error) {\n                    const z = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"WC_METHOD_UNSUPPORTED\", \"wc_sessionAuthenticate\");\n                    return O.error.code === z.code ? void 0 : (this.events.off((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_connect\"), B), oe(O.error.message));\n                }\n                this.events.off((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_connect\"), B);\n                const { cacaos: _, responder: Q } = O.result, le = [], Ie = [];\n                for (const z of _){\n                    await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.validateSignedCacao)({\n                        cacao: z,\n                        projectId: this.client.core.projectId\n                    }) || (this.client.logger.error(z, \"Signature verification failed\"), oe((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"SESSION_SETTLEMENT_FAILED\", \"Signature verification failed\")));\n                    const { p: he } = z, pe = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getRecapFromResources)(he.resources), fe = [\n                        (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getNamespacedDidChainId)(he.iss)\n                    ], Ze = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getDidAddress)(he.iss);\n                    if (pe) {\n                        const de = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getMethodsFromRecap)(pe), et = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getChainsFromRecap)(pe);\n                        le.push(...de), fe.push(...et);\n                    }\n                    for (const de of fe)Ie.push(\"\".concat(de, \":\").concat(Ze));\n                }\n                const W = await this.client.core.crypto.generateSharedKey(w, Q.publicKey);\n                let Z;\n                le.length > 0 && (Z = {\n                    topic: W,\n                    acknowledged: !0,\n                    self: {\n                        publicKey: w,\n                        metadata: this.client.metadata\n                    },\n                    peer: Q,\n                    controller: Q.publicKey,\n                    expiry: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(L),\n                    requiredNamespaces: {},\n                    optionalNamespaces: {},\n                    relay: {\n                        protocol: \"irn\"\n                    },\n                    pairingTopic: h,\n                    namespaces: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.buildNamespacesFromAuth)([\n                        ...new Set(le)\n                    ], [\n                        ...new Set(Ie)\n                    ])\n                }, await this.client.core.relayer.subscribe(W), await this.client.session.set(W, Z), Z = this.client.session.get(W)), j({\n                    auths: _,\n                    session: Z\n                });\n            }, M = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)(), ce = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)();\n            this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_connect\"), B), this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", M), ae);\n            try {\n                await Promise.all([\n                    this.sendRequest({\n                        topic: h,\n                        method: \"wc_sessionAuthenticate\",\n                        params: E,\n                        expiry: t.expiry,\n                        throwOnFailedPublish: !0,\n                        clientRpcId: M\n                    }),\n                    this.sendRequest({\n                        topic: h,\n                        method: \"wc_sessionPropose\",\n                        params: f,\n                        expiry: q.wc_sessionPropose.req.ttl,\n                        throwOnFailedPublish: !0,\n                        clientRpcId: ce\n                    })\n                ]);\n            } catch (O) {\n                throw this.events.off((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_connect\"), B), this.events.off((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", M), ae), O;\n            }\n            return await this.setProposal(ce, m({\n                id: ce\n            }, f)), await this.client.auth.requests.set(M, {\n                authPayload: E.authPayload,\n                requester: E.requester,\n                expiryTimestamp: D,\n                id: M,\n                pairingTopic: h,\n                verifyContext: {}\n            }), {\n                uri: y,\n                response: v\n            };\n        }, this.approveSessionAuthenticate = async (t)=>{\n            this.isInitialized();\n            const { id: e, auths: s } = t, i = this.getPendingAuthRequest(e);\n            if (!i) throw new Error(\"Could not find pending auth request with id \".concat(e));\n            const r = i.requester.publicKey, o = await this.client.core.crypto.generateKeyPair(), a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashKey)(r), c = {\n                type: _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.TYPE_1,\n                receiverPublicKey: r,\n                senderPublicKey: o\n            }, d = [], p = [];\n            for (const y of s){\n                if (!await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.validateSignedCacao)({\n                    cacao: y,\n                    projectId: this.client.core.projectId\n                })) {\n                    const P = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"SESSION_SETTLEMENT_FAILED\", \"Signature verification failed\");\n                    throw await this.sendError({\n                        id: e,\n                        topic: a,\n                        error: P,\n                        encodeOpts: c\n                    }), new Error(P.message);\n                }\n                const { p: w } = y, I = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getRecapFromResources)(w.resources), D = [\n                    (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getNamespacedDidChainId)(w.iss)\n                ], E = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getDidAddress)(w.iss);\n                if (I) {\n                    const P = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getMethodsFromRecap)(I), f = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getChainsFromRecap)(I);\n                    d.push(...P), D.push(...f);\n                }\n                for (const P of D)p.push(\"\".concat(P, \":\").concat(E));\n            }\n            const g = await this.client.core.crypto.generateSharedKey(o, r);\n            let h;\n            return (d === null || d === void 0 ? void 0 : d.length) > 0 && (h = {\n                topic: g,\n                acknowledged: !0,\n                self: {\n                    publicKey: o,\n                    metadata: this.client.metadata\n                },\n                peer: {\n                    publicKey: r,\n                    metadata: i.requester.metadata\n                },\n                controller: r,\n                expiry: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(L),\n                authentication: s,\n                requiredNamespaces: {},\n                optionalNamespaces: {},\n                relay: {\n                    protocol: \"irn\"\n                },\n                pairingTopic: \"\",\n                namespaces: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.buildNamespacesFromAuth)([\n                    ...new Set(d)\n                ], [\n                    ...new Set(p)\n                ])\n            }, await this.client.core.relayer.subscribe(g), await this.client.session.set(g, h)), await this.sendResult({\n                topic: a,\n                id: e,\n                result: {\n                    cacaos: s,\n                    responder: {\n                        publicKey: o,\n                        metadata: this.client.metadata\n                    }\n                },\n                encodeOpts: c,\n                throwOnFailedPublish: !0\n            }), await this.client.auth.requests.delete(e, {\n                message: \"fullfilled\",\n                code: 0\n            }), await this.client.core.pairing.activate({\n                topic: i.pairingTopic\n            }), {\n                session: h\n            };\n        }, this.rejectSessionAuthenticate = async (t)=>{\n            await this.isInitialized();\n            const { id: e, reason: s } = t, i = this.getPendingAuthRequest(e);\n            if (!i) throw new Error(\"Could not find pending auth request with id \".concat(e));\n            const r = i.requester.publicKey, o = await this.client.core.crypto.generateKeyPair(), a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashKey)(r), c = {\n                type: _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.TYPE_1,\n                receiverPublicKey: r,\n                senderPublicKey: o\n            };\n            await this.sendError({\n                id: e,\n                topic: a,\n                error: s,\n                encodeOpts: c\n            }), await this.client.auth.requests.delete(e, {\n                message: \"rejected\",\n                code: 0\n            }), await this.client.proposal.delete(e, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\"));\n        }, this.formatAuthMessage = (t)=>{\n            this.isInitialized();\n            const { request: e, iss: s } = t;\n            return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.formatMessage)(e, s);\n        }, this.cleanupDuplicatePairings = async (t)=>{\n            if (t.pairingTopic) try {\n                const e = this.client.core.pairing.pairings.get(t.pairingTopic), s = this.client.core.pairing.pairings.getAll().filter((i)=>{\n                    var r, o;\n                    return ((r = i.peerMetadata) == null ? void 0 : r.url) && ((o = i.peerMetadata) == null ? void 0 : o.url) === t.peer.metadata.url && i.topic && i.topic !== e.topic;\n                });\n                if (s.length === 0) return;\n                this.client.logger.info(\"Cleaning up \".concat(s.length, \" duplicate pairing(s)\")), await Promise.all(s.map((i)=>this.client.core.pairing.disconnect({\n                        topic: i.topic\n                    }))), this.client.logger.info(\"Duplicate pairings clean up finished\");\n            } catch (e) {\n                this.client.logger.error(e);\n            }\n        }, this.deleteSession = async (t)=>{\n            const { topic: e, expirerHasDeleted: s = !1, emitEvent: i = !0, id: r = 0 } = t, { self: o } = this.client.session.get(e);\n            await this.client.core.relayer.unsubscribe(e), await this.client.session.delete(e, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")), this.addToRecentlyDeleted(e, \"session\"), this.client.core.crypto.keychain.has(o.publicKey) && await this.client.core.crypto.deleteKeyPair(o.publicKey), this.client.core.crypto.keychain.has(e) && await this.client.core.crypto.deleteSymKey(e), s || this.client.core.expirer.del(e), this.client.core.storage.removeItem(Re).catch((a)=>this.client.logger.warn(a)), this.getPendingSessionRequests().forEach((a)=>{\n                a.topic === e && this.deletePendingSessionRequest(a.id, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\"));\n            }), i && this.client.events.emit(\"session_delete\", {\n                id: r,\n                topic: e\n            });\n        }, this.deleteProposal = async (t, e)=>{\n            await Promise.all([\n                this.client.proposal.delete(t, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")),\n                e ? Promise.resolve() : this.client.core.expirer.del(t)\n            ]), this.addToRecentlyDeleted(t, \"proposal\");\n        }, this.deletePendingSessionRequest = async function(t, e) {\n            let s = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;\n            await Promise.all([\n                _this.client.pendingRequest.delete(t, e),\n                s ? Promise.resolve() : _this.client.core.expirer.del(t)\n            ]), _this.addToRecentlyDeleted(t, \"request\"), _this.sessionRequestQueue.queue = _this.sessionRequestQueue.queue.filter((i)=>i.id !== t), s && (_this.sessionRequestQueue.state = A.idle, _this.client.events.emit(\"session_request_expire\", {\n                id: t\n            }));\n        }, this.setExpiry = async (t, e)=>{\n            this.client.session.keys.includes(t) && await this.client.session.update(t, {\n                expiry: e\n            }), this.client.core.expirer.set(t, e);\n        }, this.setProposal = async (t, e)=>{\n            await this.client.proposal.set(t, e), this.client.core.expirer.set(t, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(q.wc_sessionPropose.req.ttl));\n        }, this.setPendingSessionRequest = async (t)=>{\n            const { id: e, topic: s, params: i, verifyContext: r } = t, o = i.request.expiryTimestamp || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(q.wc_sessionRequest.req.ttl);\n            await this.client.pendingRequest.set(e, {\n                id: e,\n                topic: s,\n                params: i,\n                verifyContext: r\n            }), o && this.client.core.expirer.set(e, o);\n        }, this.sendRequest = async (t)=>{\n            const { topic: e, method: s, params: i, expiry: r, relayRpcId: o, clientRpcId: a, throwOnFailedPublish: c } = t, d = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcRequest)(s, i, a);\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isBrowser)() && je.includes(s)) {\n                const h = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(JSON.stringify(d));\n                this.client.core.verify.register({\n                    attestationId: h\n                });\n            }\n            let p;\n            try {\n                p = await this.client.core.crypto.encode(e, d);\n            } catch (h) {\n                throw await this.cleanup(), this.client.logger.error(\"sendRequest() -> core.crypto.encode() for topic \".concat(e, \" failed\")), h;\n            }\n            const g = q[s].req;\n            return r && (g.ttl = r), o && (g.id = o), this.client.core.history.set(e, d), c ? (g.internal = F(m({}, g.internal), {\n                throwOnFailedPublish: !0\n            }), await this.client.core.relayer.publish(e, p, g)) : this.client.core.relayer.publish(e, p, g).catch((h)=>this.client.logger.error(h)), d.id;\n        }, this.sendResult = async (t)=>{\n            const { id: e, topic: s, result: i, throwOnFailedPublish: r, encodeOpts: o } = t, a = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcResult)(e, i);\n            let c;\n            try {\n                c = await this.client.core.crypto.encode(s, a, o);\n            } catch (g) {\n                throw await this.cleanup(), this.client.logger.error(\"sendResult() -> core.crypto.encode() for topic \".concat(s, \" failed\")), g;\n            }\n            let d;\n            try {\n                d = await this.client.core.history.get(s, e);\n            } catch (g) {\n                throw this.client.logger.error(\"sendResult() -> history.get(\".concat(s, \", \").concat(e, \") failed\")), g;\n            }\n            const p = q[d.request.method].res;\n            r ? (p.internal = F(m({}, p.internal), {\n                throwOnFailedPublish: !0\n            }), await this.client.core.relayer.publish(s, c, p)) : this.client.core.relayer.publish(s, c, p).catch((g)=>this.client.logger.error(g)), await this.client.core.history.resolve(a);\n        }, this.sendError = async (t)=>{\n            const { id: e, topic: s, error: i, encodeOpts: r } = t, o = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcError)(e, i);\n            let a;\n            try {\n                a = await this.client.core.crypto.encode(s, o, r);\n            } catch (p) {\n                throw await this.cleanup(), this.client.logger.error(\"sendError() -> core.crypto.encode() for topic \".concat(s, \" failed\")), p;\n            }\n            let c;\n            try {\n                c = await this.client.core.history.get(s, e);\n            } catch (p) {\n                throw this.client.logger.error(\"sendError() -> history.get(\".concat(s, \", \").concat(e, \") failed\")), p;\n            }\n            const d = q[c.request.method].res;\n            this.client.core.relayer.publish(s, a, d), await this.client.core.history.resolve(o);\n        }, this.cleanup = async ()=>{\n            const t = [], e = [];\n            this.client.session.getAll().forEach((s)=>{\n                let i = !1;\n                (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(s.expiry) && (i = !0), this.client.core.crypto.keychain.has(s.topic) || (i = !0), i && t.push(s.topic);\n            }), this.client.proposal.getAll().forEach((s)=>{\n                (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(s.expiryTimestamp) && e.push(s.id);\n            }), await Promise.all([\n                ...t.map((s)=>this.deleteSession({\n                        topic: s\n                    })),\n                ...e.map((s)=>this.deleteProposal(s))\n            ]);\n        }, this.onRelayEventRequest = async (t)=>{\n            this.requestQueue.queue.push(t), await this.processRequestsQueue();\n        }, this.processRequestsQueue = async ()=>{\n            if (this.requestQueue.state === A.active) {\n                this.client.logger.info(\"Request queue already active, skipping...\");\n                return;\n            }\n            for(this.client.logger.info(\"Request queue starting with \".concat(this.requestQueue.queue.length, \" requests\")); this.requestQueue.queue.length > 0;){\n                this.requestQueue.state = A.active;\n                const t = this.requestQueue.queue.shift();\n                if (t) try {\n                    this.processRequest(t), await new Promise((e)=>setTimeout(e, 300));\n                } catch (e) {\n                    this.client.logger.warn(e);\n                }\n            }\n            this.requestQueue.state = A.idle;\n        }, this.processRequest = (t)=>{\n            const { topic: e, payload: s } = t, i = s.method;\n            if (!this.shouldIgnorePairingRequest({\n                topic: e,\n                requestMethod: i\n            })) switch(i){\n                case \"wc_sessionPropose\":\n                    return this.onSessionProposeRequest(e, s);\n                case \"wc_sessionSettle\":\n                    return this.onSessionSettleRequest(e, s);\n                case \"wc_sessionUpdate\":\n                    return this.onSessionUpdateRequest(e, s);\n                case \"wc_sessionExtend\":\n                    return this.onSessionExtendRequest(e, s);\n                case \"wc_sessionPing\":\n                    return this.onSessionPingRequest(e, s);\n                case \"wc_sessionDelete\":\n                    return this.onSessionDeleteRequest(e, s);\n                case \"wc_sessionRequest\":\n                    return this.onSessionRequest(e, s);\n                case \"wc_sessionEvent\":\n                    return this.onSessionEventRequest(e, s);\n                case \"wc_sessionAuthenticate\":\n                    return this.onSessionAuthenticateRequest(e, s);\n                default:\n                    return this.client.logger.info(\"Unsupported request method \".concat(i));\n            }\n        }, this.onRelayEventResponse = async (t)=>{\n            const { topic: e, payload: s } = t, i = (await this.client.core.history.get(e, s.id)).request.method;\n            switch(i){\n                case \"wc_sessionPropose\":\n                    return this.onSessionProposeResponse(e, s);\n                case \"wc_sessionSettle\":\n                    return this.onSessionSettleResponse(e, s);\n                case \"wc_sessionUpdate\":\n                    return this.onSessionUpdateResponse(e, s);\n                case \"wc_sessionExtend\":\n                    return this.onSessionExtendResponse(e, s);\n                case \"wc_sessionPing\":\n                    return this.onSessionPingResponse(e, s);\n                case \"wc_sessionRequest\":\n                    return this.onSessionRequestResponse(e, s);\n                case \"wc_sessionAuthenticate\":\n                    return this.onSessionAuthenticateResponse(e, s);\n                default:\n                    return this.client.logger.info(\"Unsupported response method \".concat(i));\n            }\n        }, this.onRelayEventUnknownPayload = (t)=>{\n            const { topic: e } = t, { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"Decoded payload on topic \".concat(e, \" is not identifiable as a JSON-RPC request or a response.\"));\n            throw new Error(s);\n        }, this.shouldIgnorePairingRequest = (t)=>{\n            const { topic: e, requestMethod: s } = t, i = this.expectedPairingMethodMap.get(e);\n            return !i || i.includes(s) ? !1 : !!(i.includes(\"wc_sessionAuthenticate\") && this.client.events.listenerCount(\"session_authenticate\") > 0);\n        }, this.onSessionProposeRequest = async (t, e)=>{\n            const { params: s, id: i } = e;\n            try {\n                this.isValidConnect(m({}, e.params));\n                const r = s.expiryTimestamp || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(q.wc_sessionPropose.req.ttl), o = m({\n                    id: i,\n                    pairingTopic: t,\n                    expiryTimestamp: r\n                }, s);\n                await this.setProposal(i, o);\n                const a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(JSON.stringify(e)), c = await this.getVerifyContext(a, o.proposer.metadata);\n                this.client.events.emit(\"session_proposal\", {\n                    id: i,\n                    params: o,\n                    verifyContext: c\n                });\n            } catch (r) {\n                await this.sendError({\n                    id: i,\n                    topic: t,\n                    error: r\n                }), this.client.logger.error(r);\n            }\n        }, this.onSessionProposeResponse = async (t, e)=>{\n            const { id: s } = e;\n            if ((0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(e)) {\n                const { result: i } = e;\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    result: i\n                });\n                const r = this.client.proposal.get(s);\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    proposal: r\n                });\n                const o = r.proposer.publicKey;\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    selfPublicKey: o\n                });\n                const a = i.responderPublicKey;\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    peerPublicKey: a\n                });\n                const c = await this.client.core.crypto.generateSharedKey(o, a);\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    sessionTopic: c\n                });\n                const d = await this.client.core.relayer.subscribe(c);\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    subscriptionId: d\n                }), await this.client.core.pairing.activate({\n                    topic: t\n                });\n            } else if ((0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(e)) {\n                await this.client.proposal.delete(s, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\"));\n                const i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_connect\");\n                if (this.events.listenerCount(i) === 0) throw new Error(\"emitting \".concat(i, \" without any listeners, 954\"));\n                this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_connect\"), {\n                    error: e.error\n                });\n            }\n        }, this.onSessionSettleRequest = async (t, e)=>{\n            const { id: s, params: i } = e;\n            try {\n                this.isValidSessionSettleRequest(i);\n                const { relay: r, controller: o, expiry: a, namespaces: c, sessionProperties: d, pairingTopic: p, sessionConfig: g } = e.params, h = m(m({\n                    topic: t,\n                    relay: r,\n                    expiry: a,\n                    namespaces: c,\n                    acknowledged: !0,\n                    pairingTopic: p,\n                    requiredNamespaces: {},\n                    optionalNamespaces: {},\n                    controller: o.publicKey,\n                    self: {\n                        publicKey: \"\",\n                        metadata: this.client.metadata\n                    },\n                    peer: {\n                        publicKey: o.publicKey,\n                        metadata: o.metadata\n                    }\n                }, d && {\n                    sessionProperties: d\n                }), g && {\n                    sessionConfig: g\n                });\n                await this.sendResult({\n                    id: e.id,\n                    topic: t,\n                    result: !0,\n                    throwOnFailedPublish: !0\n                });\n                const y = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_connect\");\n                if (this.events.listenerCount(y) === 0) throw new Error(\"emitting \".concat(y, \" without any listeners 997\"));\n                this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_connect\"), {\n                    session: h\n                }), this.cleanupDuplicatePairings(h);\n            } catch (r) {\n                await this.sendError({\n                    id: s,\n                    topic: t,\n                    error: r\n                }), this.client.logger.error(r);\n            }\n        }, this.onSessionSettleResponse = async (t, e)=>{\n            const { id: s } = e;\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(e) ? (await this.client.session.update(t, {\n                acknowledged: !0\n            }), this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_approve\", s), {})) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(e) && (await this.client.session.delete(t, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")), this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_approve\", s), {\n                error: e.error\n            }));\n        }, this.onSessionUpdateRequest = async (t, e)=>{\n            const { params: s, id: i } = e;\n            try {\n                const r = \"\".concat(t, \"_session_update\"), o = _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.MemoryStore.get(r);\n                if (o && this.isRequestOutOfSync(o, i)) {\n                    this.client.logger.info(\"Discarding out of sync request - \".concat(i)), this.sendError({\n                        id: i,\n                        topic: t,\n                        error: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"INVALID_UPDATE_REQUEST\")\n                    });\n                    return;\n                }\n                this.isValidUpdate(m({\n                    topic: t\n                }, s));\n                try {\n                    _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.MemoryStore.set(r, i), await this.client.session.update(t, {\n                        namespaces: s.namespaces\n                    }), await this.sendResult({\n                        id: i,\n                        topic: t,\n                        result: !0,\n                        throwOnFailedPublish: !0\n                    });\n                } catch (a) {\n                    throw _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.MemoryStore.delete(r), a;\n                }\n                this.client.events.emit(\"session_update\", {\n                    id: i,\n                    topic: t,\n                    params: s\n                });\n            } catch (r) {\n                await this.sendError({\n                    id: i,\n                    topic: t,\n                    error: r\n                }), this.client.logger.error(r);\n            }\n        }, this.isRequestOutOfSync = (t, e)=>parseInt(e.toString().slice(0, -3)) <= parseInt(t.toString().slice(0, -3)), this.onSessionUpdateResponse = (t, e)=>{\n            const { id: s } = e, i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_update\", s);\n            if (this.events.listenerCount(i) === 0) throw new Error(\"emitting \".concat(i, \" without any listeners\"));\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(e) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_update\", s), {}) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(e) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_update\", s), {\n                error: e.error\n            });\n        }, this.onSessionExtendRequest = async (t, e)=>{\n            const { id: s } = e;\n            try {\n                this.isValidExtend({\n                    topic: t\n                }), await this.setExpiry(t, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(L)), await this.sendResult({\n                    id: s,\n                    topic: t,\n                    result: !0,\n                    throwOnFailedPublish: !0\n                }), this.client.events.emit(\"session_extend\", {\n                    id: s,\n                    topic: t\n                });\n            } catch (i) {\n                await this.sendError({\n                    id: s,\n                    topic: t,\n                    error: i\n                }), this.client.logger.error(i);\n            }\n        }, this.onSessionExtendResponse = (t, e)=>{\n            const { id: s } = e, i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_extend\", s);\n            if (this.events.listenerCount(i) === 0) throw new Error(\"emitting \".concat(i, \" without any listeners\"));\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(e) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_extend\", s), {}) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(e) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_extend\", s), {\n                error: e.error\n            });\n        }, this.onSessionPingRequest = async (t, e)=>{\n            const { id: s } = e;\n            try {\n                this.isValidPing({\n                    topic: t\n                }), await this.sendResult({\n                    id: s,\n                    topic: t,\n                    result: !0,\n                    throwOnFailedPublish: !0\n                }), this.client.events.emit(\"session_ping\", {\n                    id: s,\n                    topic: t\n                });\n            } catch (i) {\n                await this.sendError({\n                    id: s,\n                    topic: t,\n                    error: i\n                }), this.client.logger.error(i);\n            }\n        }, this.onSessionPingResponse = (t, e)=>{\n            const { id: s } = e, i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_ping\", s);\n            if (this.events.listenerCount(i) === 0) throw new Error(\"emitting \".concat(i, \" without any listeners\"));\n            setTimeout(()=>{\n                (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(e) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_ping\", s), {}) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(e) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_ping\", s), {\n                    error: e.error\n                });\n            }, 500);\n        }, this.onSessionDeleteRequest = async (t, e)=>{\n            const { id: s } = e;\n            try {\n                this.isValidDisconnect({\n                    topic: t,\n                    reason: e.params\n                }), await Promise.all([\n                    new Promise((i)=>{\n                        this.client.core.relayer.once(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.RELAYER_EVENTS.publish, async ()=>{\n                            i(await this.deleteSession({\n                                topic: t,\n                                id: s\n                            }));\n                        });\n                    }),\n                    this.sendResult({\n                        id: s,\n                        topic: t,\n                        result: !0,\n                        throwOnFailedPublish: !0\n                    }),\n                    this.cleanupPendingSentRequestsForTopic({\n                        topic: t,\n                        error: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")\n                    })\n                ]);\n            } catch (i) {\n                this.client.logger.error(i);\n            }\n        }, this.onSessionRequest = async (t, e)=>{\n            const { id: s, params: i } = e;\n            try {\n                await this.isValidRequest(m({\n                    topic: t\n                }, i));\n                const r = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(JSON.stringify((0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcRequest)(\"wc_sessionRequest\", i, s))), o = this.client.session.get(t), a = await this.getVerifyContext(r, o.peer.metadata), c = {\n                    id: s,\n                    topic: t,\n                    params: i,\n                    verifyContext: a\n                };\n                await this.setPendingSessionRequest(c), this.addSessionRequestToSessionRequestQueue(c), this.processSessionRequestQueue();\n            } catch (r) {\n                await this.sendError({\n                    id: s,\n                    topic: t,\n                    error: r\n                }), this.client.logger.error(r);\n            }\n        }, this.onSessionRequestResponse = (t, e)=>{\n            const { id: s } = e, i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", s);\n            if (this.events.listenerCount(i) === 0) throw new Error(\"emitting \".concat(i, \" without any listeners\"));\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(e) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", s), {\n                result: e.result\n            }) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(e) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", s), {\n                error: e.error\n            });\n        }, this.onSessionEventRequest = async (t, e)=>{\n            const { id: s, params: i } = e;\n            try {\n                const r = \"\".concat(t, \"_session_event_\").concat(i.event.name), o = _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.MemoryStore.get(r);\n                if (o && this.isRequestOutOfSync(o, s)) {\n                    this.client.logger.info(\"Discarding out of sync request - \".concat(s));\n                    return;\n                }\n                this.isValidEmit(m({\n                    topic: t\n                }, i)), this.client.events.emit(\"session_event\", {\n                    id: s,\n                    topic: t,\n                    params: i\n                }), _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.MemoryStore.set(r, s);\n            } catch (r) {\n                await this.sendError({\n                    id: s,\n                    topic: t,\n                    error: r\n                }), this.client.logger.error(r);\n            }\n        }, this.onSessionAuthenticateResponse = (t, e)=>{\n            const { id: s } = e;\n            this.client.logger.trace({\n                type: \"method\",\n                method: \"onSessionAuthenticateResponse\",\n                topic: t,\n                payload: e\n            }), (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(e) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", s), {\n                result: e.result\n            }) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(e) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", s), {\n                error: e.error\n            });\n        }, this.onSessionAuthenticateRequest = async (t, e)=>{\n            const { requester: s, authPayload: i, expiryTimestamp: r } = e.params, o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(JSON.stringify(e)), a = await this.getVerifyContext(o, this.client.metadata), c = {\n                requester: s,\n                pairingTopic: t,\n                id: e.id,\n                authPayload: i,\n                verifyContext: a,\n                expiryTimestamp: r\n            };\n            await this.client.auth.requests.set(e.id, c), this.client.events.emit(\"session_authenticate\", {\n                topic: t,\n                params: e.params,\n                id: e.id\n            });\n        }, this.addSessionRequestToSessionRequestQueue = (t)=>{\n            this.sessionRequestQueue.queue.push(t);\n        }, this.cleanupAfterResponse = (t)=>{\n            this.deletePendingSessionRequest(t.response.id, {\n                message: \"fulfilled\",\n                code: 0\n            }), setTimeout(()=>{\n                this.sessionRequestQueue.state = A.idle, this.processSessionRequestQueue();\n            }, (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_2__.toMiliseconds)(this.requestQueueDelay));\n        }, this.cleanupPendingSentRequestsForTopic = (param)=>{\n            let { topic: t, error: e } = param;\n            const s = this.client.core.history.pending;\n            s.length > 0 && s.filter((i)=>i.topic === t && i.request.method === \"wc_sessionRequest\").forEach((i)=>{\n                const r = i.request.id, o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", r);\n                if (this.events.listenerCount(o) === 0) throw new Error(\"emitting \".concat(o, \" without any listeners\"));\n                this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", i.request.id), {\n                    error: e\n                });\n            });\n        }, this.processSessionRequestQueue = ()=>{\n            if (this.sessionRequestQueue.state === A.active) {\n                this.client.logger.info(\"session request queue is already active.\");\n                return;\n            }\n            const t = this.sessionRequestQueue.queue[0];\n            if (!t) {\n                this.client.logger.info(\"session request queue is empty.\");\n                return;\n            }\n            try {\n                this.sessionRequestQueue.state = A.active, this.client.events.emit(\"session_request\", t);\n            } catch (e) {\n                this.client.logger.error(e);\n            }\n        }, this.onPairingCreated = (t)=>{\n            if (t.methods && this.expectedPairingMethodMap.set(t.topic, t.methods), t.active) return;\n            const e = this.client.proposal.getAll().find((s)=>s.pairingTopic === t.topic);\n            e && this.onSessionProposeRequest(t.topic, (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcRequest)(\"wc_sessionPropose\", {\n                requiredNamespaces: e.requiredNamespaces,\n                optionalNamespaces: e.optionalNamespaces,\n                relays: e.relays,\n                proposer: e.proposer,\n                sessionProperties: e.sessionProperties\n            }, e.id));\n        }, this.isValidConnect = async (t)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(t)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"connect() params: \".concat(JSON.stringify(t)));\n                throw new Error(a);\n            }\n            const { pairingTopic: e, requiredNamespaces: s, optionalNamespaces: i, sessionProperties: r, relays: o } = t;\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isUndefined)(e) || await this.isValidPairingTopic(e), !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidRelays)(o, !0)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"connect() relays: \".concat(o));\n                throw new Error(a);\n            }\n            !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isUndefined)(s) && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidObject)(s) !== 0 && this.validateNamespaces(s, \"requiredNamespaces\"), !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isUndefined)(i) && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidObject)(i) !== 0 && this.validateNamespaces(i, \"optionalNamespaces\"), (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isUndefined)(r) || this.validateSessionProps(r, \"sessionProperties\");\n        }, this.validateNamespaces = (t, e)=>{\n            const s = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidRequiredNamespaces)(t, \"connect()\", e);\n            if (s) throw new Error(s.message);\n        }, this.isValidApprove = async (t)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(t)) throw new Error((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"approve() params: \".concat(t)).message);\n            const { id: e, namespaces: s, relayProtocol: i, sessionProperties: r } = t;\n            this.checkRecentlyDeleted(e), await this.isValidProposalId(e);\n            const o = this.client.proposal.get(e), a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespaces)(s, \"approve()\");\n            if (a) throw new Error(a.message);\n            const c = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isConformingNamespaces)(o.requiredNamespaces, s, \"approve()\");\n            if (c) throw new Error(c.message);\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(i, !0)) {\n                const { message: d } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"approve() relayProtocol: \".concat(i));\n                throw new Error(d);\n            }\n            (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isUndefined)(r) || this.validateSessionProps(r, \"sessionProperties\");\n        }, this.isValidReject = async (t)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(t)) {\n                const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"reject() params: \".concat(t));\n                throw new Error(i);\n            }\n            const { id: e, reason: s } = t;\n            if (this.checkRecentlyDeleted(e), await this.isValidProposalId(e), !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidErrorReason)(s)) {\n                const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"reject() reason: \".concat(JSON.stringify(s)));\n                throw new Error(i);\n            }\n        }, this.isValidSessionSettleRequest = (t)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(t)) {\n                const { message: c } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"onSessionSettleRequest() params: \".concat(t));\n                throw new Error(c);\n            }\n            const { relay: e, controller: s, namespaces: i, expiry: r } = t;\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidRelay)(e)) {\n                const { message: c } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"onSessionSettleRequest() relay protocol should be a string\");\n                throw new Error(c);\n            }\n            const o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidController)(s, \"onSessionSettleRequest()\");\n            if (o) throw new Error(o.message);\n            const a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespaces)(i, \"onSessionSettleRequest()\");\n            if (a) throw new Error(a.message);\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(r)) {\n                const { message: c } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\", \"onSessionSettleRequest()\");\n                throw new Error(c);\n            }\n        }, this.isValidUpdate = async (t)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(t)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"update() params: \".concat(t));\n                throw new Error(a);\n            }\n            const { topic: e, namespaces: s } = t;\n            this.checkRecentlyDeleted(e), await this.isValidSessionTopic(e);\n            const i = this.client.session.get(e), r = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespaces)(s, \"update()\");\n            if (r) throw new Error(r.message);\n            const o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isConformingNamespaces)(i.requiredNamespaces, s, \"update()\");\n            if (o) throw new Error(o.message);\n        }, this.isValidExtend = async (t)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(t)) {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"extend() params: \".concat(t));\n                throw new Error(s);\n            }\n            const { topic: e } = t;\n            this.checkRecentlyDeleted(e), await this.isValidSessionTopic(e);\n        }, this.isValidRequest = async (t)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(t)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"request() params: \".concat(t));\n                throw new Error(a);\n            }\n            const { topic: e, request: s, chainId: i, expiry: r } = t;\n            this.checkRecentlyDeleted(e), await this.isValidSessionTopic(e);\n            const { namespaces: o } = this.client.session.get(e);\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespacesChainId)(o, i)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"request() chainId: \".concat(i));\n                throw new Error(a);\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidRequest)(s)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"request() \".concat(JSON.stringify(s)));\n                throw new Error(a);\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespacesRequest)(o, i, s.method)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"request() method: \".concat(s.method));\n                throw new Error(a);\n            }\n            if (r && !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidRequestExpiry)(r, re)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"request() expiry: \".concat(r, \". Expiry must be a number (in seconds) between \").concat(re.min, \" and \").concat(re.max));\n                throw new Error(a);\n            }\n        }, this.isValidRespond = async (t)=>{\n            var e;\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(t)) {\n                const { message: r } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"respond() params: \".concat(t));\n                throw new Error(r);\n            }\n            const { topic: s, response: i } = t;\n            try {\n                await this.isValidSessionTopic(s);\n            } catch (r) {\n                throw (e = t === null || t === void 0 ? void 0 : t.response) != null && e.id && this.cleanupAfterResponse(t), r;\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidResponse)(i)) {\n                const { message: r } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"respond() response: \".concat(JSON.stringify(i)));\n                throw new Error(r);\n            }\n        }, this.isValidPing = async (t)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(t)) {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"ping() params: \".concat(t));\n                throw new Error(s);\n            }\n            const { topic: e } = t;\n            await this.isValidSessionOrPairingTopic(e);\n        }, this.isValidEmit = async (t)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(t)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"emit() params: \".concat(t));\n                throw new Error(o);\n            }\n            const { topic: e, event: s, chainId: i } = t;\n            await this.isValidSessionTopic(e);\n            const { namespaces: r } = this.client.session.get(e);\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespacesChainId)(r, i)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"emit() chainId: \".concat(i));\n                throw new Error(o);\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidEvent)(s)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"emit() event: \".concat(JSON.stringify(s)));\n                throw new Error(o);\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespacesEvent)(r, i, s.name)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"emit() event: \".concat(JSON.stringify(s)));\n                throw new Error(o);\n            }\n        }, this.isValidDisconnect = async (t)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(t)) {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"disconnect() params: \".concat(t));\n                throw new Error(s);\n            }\n            const { topic: e } = t;\n            await this.isValidSessionOrPairingTopic(e);\n        }, this.isValidAuthenticate = (t)=>{\n            const { chains: e, uri: s, domain: i, nonce: r } = t;\n            if (!Array.isArray(e) || e.length === 0) throw new Error(\"chains is required and must be a non-empty array\");\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(s, !1)) throw new Error(\"uri is required parameter\");\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(i, !1)) throw new Error(\"domain is required parameter\");\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(r, !1)) throw new Error(\"nonce is required parameter\");\n            if ([\n                ...new Set(e.map((a)=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseChainId)(a).namespace))\n            ].length > 1) throw new Error(\"Multi-namespace requests are not supported. Please request single namespace only.\");\n            const { namespace: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseChainId)(e[0]);\n            if (o !== \"eip155\") throw new Error(\"Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.\");\n        }, this.getVerifyContext = async (t, e)=>{\n            const s = {\n                verified: {\n                    verifyUrl: e.verifyUrl || _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.VERIFY_SERVER,\n                    validation: \"UNKNOWN\",\n                    origin: e.url || \"\"\n                }\n            };\n            try {\n                const i = await this.client.core.verify.resolve({\n                    attestationId: t,\n                    verifyUrl: e.verifyUrl\n                });\n                i && (s.verified.origin = i.origin, s.verified.isScam = i.isScam, s.verified.validation = i.origin === new URL(e.url).origin ? \"VALID\" : \"INVALID\");\n            } catch (i) {\n                this.client.logger.info(i);\n            }\n            return this.client.logger.info(\"Verify context: \".concat(JSON.stringify(s))), s;\n        }, this.validateSessionProps = (t, e)=>{\n            Object.values(t).forEach((s)=>{\n                if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(s, !1)) {\n                    const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"\".concat(e, \" must be in Record<string, string> format. Received: \").concat(JSON.stringify(s)));\n                    throw new Error(i);\n                }\n            });\n        }, this.getPendingAuthRequest = (t)=>{\n            const e = this.client.auth.requests.get(t);\n            return typeof e == \"object\" ? e : void 0;\n        }, this.addToRecentlyDeleted = (t, e)=>{\n            if (this.recentlyDeletedMap.set(t, e), this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {\n                let s = 0;\n                const i = this.recentlyDeletedLimit / 2;\n                for (const r of this.recentlyDeletedMap.keys()){\n                    if (s++ >= i) break;\n                    this.recentlyDeletedMap.delete(r);\n                }\n            }\n        }, this.checkRecentlyDeleted = (t)=>{\n            const e = this.recentlyDeletedMap.get(t);\n            if (e) {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"Record was recently deleted - \".concat(e, \": \").concat(t));\n                throw new Error(s);\n            }\n        };\n    }\n}\nclass Zt extends _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Store {\n    constructor(n, t){\n        super(n, t, Ke, se), this.core = n, this.logger = t;\n    }\n}\nclass We extends _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Store {\n    constructor(n, t){\n        super(n, t, Ge, se), this.core = n, this.logger = t;\n    }\n}\nclass es extends _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Store {\n    constructor(n, t){\n        super(n, t, Fe, se, (e)=>e.id), this.core = n, this.logger = t;\n    }\n}\nclass ts extends _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Store {\n    constructor(n, t){\n        super(n, t, He, X, ()=>J), this.core = n, this.logger = t;\n    }\n}\nclass ss extends _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Store {\n    constructor(n, t){\n        super(n, t, Ye, X), this.core = n, this.logger = t;\n    }\n}\nclass is extends _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Store {\n    constructor(n, t){\n        super(n, t, Xe, X, (e)=>e.id), this.core = n, this.logger = t;\n    }\n}\nclass rs {\n    async init() {\n        await this.authKeys.init(), await this.pairingTopics.init(), await this.requests.init();\n    }\n    constructor(n, t){\n        this.core = n, this.logger = t, this.authKeys = new ts(this.core, this.logger), this.pairingTopics = new ss(this.core, this.logger), this.requests = new is(this.core, this.logger);\n    }\n}\nclass ne extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_4__.ISignClient {\n    static async init(n) {\n        const t = new ne(n);\n        return await t.initialize(), t;\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.getLoggerContext)(this.logger);\n    }\n    get pairing() {\n        return this.core.pairing.pairings;\n    }\n    async initialize() {\n        this.logger.trace(\"Initialized\");\n        try {\n            await this.core.start(), await this.session.init(), await this.proposal.init(), await this.pendingRequest.init(), await this.engine.init(), await this.auth.init(), this.core.verify.init({\n                verifyUrl: this.metadata.verifyUrl\n            }), this.logger.info(\"SignClient Initialization Success\");\n        } catch (n) {\n            throw this.logger.info(\"SignClient Initialization Failure\"), this.logger.error(n.message), n;\n        }\n    }\n    constructor(n){\n        super(n), this.protocol = Se, this.version = Ee, this.name = ie.name, this.events = new events__WEBPACK_IMPORTED_MODULE_1__.EventEmitter, this.on = (e, s)=>this.events.on(e, s), this.once = (e, s)=>this.events.once(e, s), this.off = (e, s)=>this.events.off(e, s), this.removeListener = (e, s)=>this.events.removeListener(e, s), this.removeAllListeners = (e)=>this.events.removeAllListeners(e), this.connect = async (e)=>{\n            try {\n                return await this.engine.connect(e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.pair = async (e)=>{\n            try {\n                return await this.engine.pair(e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.approve = async (e)=>{\n            try {\n                return await this.engine.approve(e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.reject = async (e)=>{\n            try {\n                return await this.engine.reject(e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.update = async (e)=>{\n            try {\n                return await this.engine.update(e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.extend = async (e)=>{\n            try {\n                return await this.engine.extend(e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.request = async (e)=>{\n            try {\n                return await this.engine.request(e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.respond = async (e)=>{\n            try {\n                return await this.engine.respond(e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.ping = async (e)=>{\n            try {\n                return await this.engine.ping(e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.emit = async (e)=>{\n            try {\n                return await this.engine.emit(e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.disconnect = async (e)=>{\n            try {\n                return await this.engine.disconnect(e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.find = (e)=>{\n            try {\n                return this.engine.find(e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.getPendingSessionRequests = ()=>{\n            try {\n                return this.engine.getPendingSessionRequests();\n            } catch (e) {\n                throw this.logger.error(e.message), e;\n            }\n        }, this.authenticate = async (e)=>{\n            try {\n                return await this.engine.authenticate(e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.formatAuthMessage = (e)=>{\n            try {\n                return this.engine.formatAuthMessage(e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.approveSessionAuthenticate = async (e)=>{\n            try {\n                return await this.engine.approveSessionAuthenticate(e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.rejectSessionAuthenticate = async (e)=>{\n            try {\n                return await this.engine.rejectSessionAuthenticate(e);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }, this.name = (n === null || n === void 0 ? void 0 : n.name) || ie.name, this.metadata = (n === null || n === void 0 ? void 0 : n.metadata) || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getAppMetadata)();\n        const t = typeof (n === null || n === void 0 ? void 0 : n.logger) < \"u\" && typeof (n === null || n === void 0 ? void 0 : n.logger) != \"string\" ? n.logger : (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.pino)((0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.getDefaultLoggerOptions)({\n            level: (n === null || n === void 0 ? void 0 : n.logger) || ie.logger\n        }));\n        this.core = (n === null || n === void 0 ? void 0 : n.core) || new _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Core(n), this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.generateChildLogger)(t, this.name), this.session = new We(this.core, this.logger), this.proposal = new Zt(this.core, this.logger), this.pendingRequest = new es(this.core, this.logger), this.engine = new Wt(this), this.auth = new rs(this.core, this.logger);\n    }\n}\nconst ns = We, os = ne;\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/sign-client/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/universal-provider/node_modules/tslib/tslib.es6.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@walletconnect/universal-provider/node_modules/tslib/tslib.es6.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __assign: function() { return /* binding */ __assign; },\n/* harmony export */   __asyncDelegator: function() { return /* binding */ __asyncDelegator; },\n/* harmony export */   __asyncGenerator: function() { return /* binding */ __asyncGenerator; },\n/* harmony export */   __asyncValues: function() { return /* binding */ __asyncValues; },\n/* harmony export */   __await: function() { return /* binding */ __await; },\n/* harmony export */   __awaiter: function() { return /* binding */ __awaiter; },\n/* harmony export */   __classPrivateFieldGet: function() { return /* binding */ __classPrivateFieldGet; },\n/* harmony export */   __classPrivateFieldSet: function() { return /* binding */ __classPrivateFieldSet; },\n/* harmony export */   __createBinding: function() { return /* binding */ __createBinding; },\n/* harmony export */   __decorate: function() { return /* binding */ __decorate; },\n/* harmony export */   __exportStar: function() { return /* binding */ __exportStar; },\n/* harmony export */   __extends: function() { return /* binding */ __extends; },\n/* harmony export */   __generator: function() { return /* binding */ __generator; },\n/* harmony export */   __importDefault: function() { return /* binding */ __importDefault; },\n/* harmony export */   __importStar: function() { return /* binding */ __importStar; },\n/* harmony export */   __makeTemplateObject: function() { return /* binding */ __makeTemplateObject; },\n/* harmony export */   __metadata: function() { return /* binding */ __metadata; },\n/* harmony export */   __param: function() { return /* binding */ __param; },\n/* harmony export */   __read: function() { return /* binding */ __read; },\n/* harmony export */   __rest: function() { return /* binding */ __rest; },\n/* harmony export */   __spread: function() { return /* binding */ __spread; },\n/* harmony export */   __spreadArrays: function() { return /* binding */ __spreadArrays; },\n/* harmony export */   __values: function() { return /* binding */ __values; }\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n    extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction __decorate(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nfunction __param(paramIndex, decorator) {\n    return function(target, key) {\n        decorator(target, key, paramIndex);\n    };\n}\nfunction __metadata(metadataKey, metadataValue) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\nfunction __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\nfunction __generator(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(_)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n}\nfunction __createBinding(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}\nfunction __exportStar(m, exports) {\n    for(var p in m)if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nfunction __values(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction __read(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n}\nfunction __spread() {\n    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));\n    return ar;\n}\nfunction __spreadArrays() {\n    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;\n    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];\n    return r;\n}\n;\nfunction __await(v) {\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function verb(n) {\n        if (g[n]) i[n] = function(v) {\n            return new Promise(function(a, b) {\n                q.push([\n                    n,\n                    v,\n                    a,\n                    b\n                ]) > 1 || resume(n, v);\n            });\n        };\n    }\n    function resume(n, v) {\n        try {\n            step(g[n](v));\n        } catch (e) {\n            settle(q[0][3], e);\n        }\n    }\n    function step(r) {\n        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n    function fulfill(value) {\n        resume(\"next\", value);\n    }\n    function reject(value) {\n        resume(\"throw\", value);\n    }\n    function settle(f, v) {\n        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n}\nfunction __asyncDelegator(o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function(e) {\n        throw e;\n    }), verb(\"return\"), i[Symbol.iterator] = function() {\n        return this;\n    }, i;\n    function verb(n, f) {\n        i[n] = o[n] ? function(v) {\n            return (p = !p) ? {\n                value: __await(o[n](v)),\n                done: n === \"return\"\n            } : f ? f(v) : v;\n        } : f;\n    }\n}\nfunction __asyncValues(o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i);\n    function verb(n) {\n        i[n] = o[n] && function(v) {\n            return new Promise(function(resolve, reject) {\n                v = o[n](v), settle(resolve, reject, v.done, v.value);\n            });\n        };\n    }\n    function settle(resolve, reject, d, v) {\n        Promise.resolve(v).then(function(v) {\n            resolve({\n                value: v,\n                done: d\n            });\n        }, reject);\n    }\n}\nfunction __makeTemplateObject(cooked, raw) {\n    if (Object.defineProperty) {\n        Object.defineProperty(cooked, \"raw\", {\n            value: raw\n        });\n    } else {\n        cooked.raw = raw;\n    }\n    return cooked;\n}\n;\nfunction __importStar(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    }\n    result.default = mod;\n    return result;\n}\nfunction __importDefault(mod) {\n    return mod && mod.__esModule ? mod : {\n        default: mod\n    };\n}\nfunction __classPrivateFieldGet(receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n}\nfunction __classPrivateFieldSet(receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/universal-provider/node_modules/tslib/tslib.es6.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@walletconnect/utils/dist/index.es.js":
/*!************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/dist/index.es.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BASE10: function() { return /* binding */ Gi; },\n/* harmony export */   BASE16: function() { return /* binding */ zt; },\n/* harmony export */   BASE64: function() { return /* binding */ Jr; },\n/* harmony export */   COLON: function() { return /* binding */ Yo; },\n/* harmony export */   DEFAULT_DEPTH: function() { return /* binding */ di; },\n/* harmony export */   EMPTY_SPACE: function() { return /* binding */ Br; },\n/* harmony export */   ENV_MAP: function() { return /* binding */ qt; },\n/* harmony export */   INTERNAL_ERRORS: function() { return /* binding */ Ao; },\n/* harmony export */   MemoryStore: function() { return /* binding */ lh; },\n/* harmony export */   ONE_THOUSAND: function() { return /* binding */ Vo; },\n/* harmony export */   REACT_NATIVE_PRODUCT: function() { return /* binding */ xn; },\n/* harmony export */   RELAYER_DEFAULT_PROTOCOL: function() { return /* binding */ ro; },\n/* harmony export */   SDK_ERRORS: function() { return /* binding */ go; },\n/* harmony export */   SDK_TYPE: function() { return /* binding */ En; },\n/* harmony export */   SLASH: function() { return /* binding */ Mn; },\n/* harmony export */   TYPE_0: function() { return /* binding */ Yi; },\n/* harmony export */   TYPE_1: function() { return /* binding */ lr; },\n/* harmony export */   UTF8: function() { return /* binding */ Gr; },\n/* harmony export */   addResourceToRecap: function() { return /* binding */ Vf; },\n/* harmony export */   appendToQueryString: function() { return /* binding */ Sn; },\n/* harmony export */   assertType: function() { return /* binding */ e0; },\n/* harmony export */   assignAbilityToActions: function() { return /* binding */ ji; },\n/* harmony export */   base64Decode: function() { return /* binding */ Gf; },\n/* harmony export */   base64Encode: function() { return /* binding */ Jf; },\n/* harmony export */   buildApprovedNamespaces: function() { return /* binding */ Lu; },\n/* harmony export */   buildAuthObject: function() { return /* binding */ su; },\n/* harmony export */   buildNamespacesFromAuth: function() { return /* binding */ ju; },\n/* harmony export */   buildRecapStatement: function() { return /* binding */ Xf; },\n/* harmony export */   calcExpiry: function() { return /* binding */ d0; },\n/* harmony export */   capitalize: function() { return /* binding */ s0; },\n/* harmony export */   capitalizeWord: function() { return /* binding */ Rn; },\n/* harmony export */   createDelayedPromise: function() { return /* binding */ a0; },\n/* harmony export */   createEncodedRecap: function() { return /* binding */ cu; },\n/* harmony export */   createExpiringPromise: function() { return /* binding */ u0; },\n/* harmony export */   createRecap: function() { return /* binding */ Yf; },\n/* harmony export */   decodeRecap: function() { return /* binding */ Oe; },\n/* harmony export */   decodeTypeByte: function() { return /* binding */ Mr; },\n/* harmony export */   decrypt: function() { return /* binding */ xu; },\n/* harmony export */   deriveSymKey: function() { return /* binding */ Au; },\n/* harmony export */   deserialize: function() { return /* binding */ Xi; },\n/* harmony export */   encodeRecap: function() { return /* binding */ jr; },\n/* harmony export */   encodeTypeByte: function() { return /* binding */ $f; },\n/* harmony export */   encrypt: function() { return /* binding */ wu; },\n/* harmony export */   engineEvent: function() { return /* binding */ v0; },\n/* harmony export */   enumify: function() { return /* binding */ o0; },\n/* harmony export */   formatAccountId: function() { return /* binding */ vn; },\n/* harmony export */   formatAccountWithChain: function() { return /* binding */ Ko; },\n/* harmony export */   formatChainId: function() { return /* binding */ pn; },\n/* harmony export */   formatExpirerTarget: function() { return /* binding */ vi; },\n/* harmony export */   formatIdTarget: function() { return /* binding */ c0; },\n/* harmony export */   formatMessage: function() { return /* binding */ zf; },\n/* harmony export */   formatMessageContext: function() { return /* binding */ r0; },\n/* harmony export */   formatRelayParams: function() { return /* binding */ ao; },\n/* harmony export */   formatRelayRpcUrl: function() { return /* binding */ $o; },\n/* harmony export */   formatStatementFromRecap: function() { return /* binding */ Ji; },\n/* harmony export */   formatTopicTarget: function() { return /* binding */ h0; },\n/* harmony export */   formatUA: function() { return /* binding */ _n; },\n/* harmony export */   formatUri: function() { return /* binding */ Du; },\n/* harmony export */   generateKeyPair: function() { return /* binding */ mu; },\n/* harmony export */   generateRandomBytes32: function() { return /* binding */ gu; },\n/* harmony export */   getAccountsChains: function() { return /* binding */ $e; },\n/* harmony export */   getAccountsFromNamespaces: function() { return /* binding */ zo; },\n/* harmony export */   getAddressFromAccount: function() { return /* binding */ mn; },\n/* harmony export */   getAddressesFromAccounts: function() { return /* binding */ Ho; },\n/* harmony export */   getAppMetadata: function() { return /* binding */ Xo; },\n/* harmony export */   getBrowserOnlineStatus: function() { return /* binding */ Bo; },\n/* harmony export */   getBundleId: function() { return /* binding */ Wo; },\n/* harmony export */   getChainFromAccount: function() { return /* binding */ gn; },\n/* harmony export */   getChainsFromAccounts: function() { return /* binding */ An; },\n/* harmony export */   getChainsFromNamespace: function() { return /* binding */ _r; },\n/* harmony export */   getChainsFromNamespaces: function() { return /* binding */ Lo; },\n/* harmony export */   getChainsFromRecap: function() { return /* binding */ pu; },\n/* harmony export */   getChainsFromRequiredNamespaces: function() { return /* binding */ jo; },\n/* harmony export */   getCommonValuesInArrays: function() { return /* binding */ mi; },\n/* harmony export */   getDecodedRecapFromResources: function() { return /* binding */ Lf; },\n/* harmony export */   getDeepLink: function() { return /* binding */ g0; },\n/* harmony export */   getDidAddress: function() { return /* binding */ Li; },\n/* harmony export */   getDidAddressSegments: function() { return /* binding */ Lr; },\n/* harmony export */   getDidChainId: function() { return /* binding */ zi; },\n/* harmony export */   getEnvironment: function() { return /* binding */ We; },\n/* harmony export */   getHttpUrl: function() { return /* binding */ t0; },\n/* harmony export */   getInternalError: function() { return /* binding */ xe; },\n/* harmony export */   getJavascriptID: function() { return /* binding */ In; },\n/* harmony export */   getJavascriptOS: function() { return /* binding */ Nn; },\n/* harmony export */   getLastItems: function() { return /* binding */ Cn; },\n/* harmony export */   getMethodsFromRecap: function() { return /* binding */ du; },\n/* harmony export */   getNamespacedDidChainId: function() { return /* binding */ fu; },\n/* harmony export */   getNamespacesChains: function() { return /* binding */ co; },\n/* harmony export */   getNamespacesEventsForChainId: function() { return /* binding */ po; },\n/* harmony export */   getNamespacesFromAccounts: function() { return /* binding */ mo; },\n/* harmony export */   getNamespacesMethodsForChainId: function() { return /* binding */ lo; },\n/* harmony export */   getNodeOnlineStatus: function() { return /* binding */ Ro; },\n/* harmony export */   getReCapActions: function() { return /* binding */ Qf; },\n/* harmony export */   getReactNativeOnlineStatus: function() { return /* binding */ Co; },\n/* harmony export */   getRecapAbilitiesFromResource: function() { return /* binding */ hu; },\n/* harmony export */   getRecapFromResources: function() { return /* binding */ Qr; },\n/* harmony export */   getRecapResource: function() { return /* binding */ jf; },\n/* harmony export */   getRelayClientMetadata: function() { return /* binding */ Zo; },\n/* harmony export */   getRelayProtocolApi: function() { return /* binding */ Nu; },\n/* harmony export */   getRelayProtocolName: function() { return /* binding */ Su; },\n/* harmony export */   getRequiredNamespacesFromNamespaces: function() { return /* binding */ zu; },\n/* harmony export */   getSdkError: function() { return /* binding */ tr; },\n/* harmony export */   getUniqueValues: function() { return /* binding */ li; },\n/* harmony export */   handleDeeplinkRedirect: function() { return /* binding */ m0; },\n/* harmony export */   hasOverlap: function() { return /* binding */ _e; },\n/* harmony export */   hashKey: function() { return /* binding */ bu; },\n/* harmony export */   hashMessage: function() { return /* binding */ yu; },\n/* harmony export */   isBrowser: function() { return /* binding */ pr; },\n/* harmony export */   isCaipNamespace: function() { return /* binding */ Zi; },\n/* harmony export */   isConformingNamespaces: function() { return /* binding */ Io; },\n/* harmony export */   isExpired: function() { return /* binding */ p0; },\n/* harmony export */   isNode: function() { return /* binding */ pi; },\n/* harmony export */   isOnline: function() { return /* binding */ hh; },\n/* harmony export */   isProposalStruct: function() { return /* binding */ Gu; },\n/* harmony export */   isReactNative: function() { return /* binding */ er; },\n/* harmony export */   isRecap: function() { return /* binding */ Qi; },\n/* harmony export */   isSessionCompatible: function() { return /* binding */ Qu; },\n/* harmony export */   isSessionStruct: function() { return /* binding */ Yu; },\n/* harmony export */   isTypeOneEnvelope: function() { return /* binding */ Eu; },\n/* harmony export */   isUndefined: function() { return /* binding */ Pe; },\n/* harmony export */   isValidAccountId: function() { return /* binding */ bo; },\n/* harmony export */   isValidAccounts: function() { return /* binding */ xo; },\n/* harmony export */   isValidActions: function() { return /* binding */ Eo; },\n/* harmony export */   isValidArray: function() { return /* binding */ Er; },\n/* harmony export */   isValidChainId: function() { return /* binding */ Sr; },\n/* harmony export */   isValidChains: function() { return /* binding */ yo; },\n/* harmony export */   isValidController: function() { return /* binding */ Vu; },\n/* harmony export */   isValidEip1271Signature: function() { return /* binding */ kf; },\n/* harmony export */   isValidEip191Signature: function() { return /* binding */ Uf; },\n/* harmony export */   isValidErrorReason: function() { return /* binding */ th; },\n/* harmony export */   isValidEvent: function() { return /* binding */ ih; },\n/* harmony export */   isValidId: function() { return /* binding */ Zu; },\n/* harmony export */   isValidNamespaceAccounts: function() { return /* binding */ Mo; },\n/* harmony export */   isValidNamespaceActions: function() { return /* binding */ en; },\n/* harmony export */   isValidNamespaceChains: function() { return /* binding */ wo; },\n/* harmony export */   isValidNamespaceMethodsOrEvents: function() { return /* binding */ tn; },\n/* harmony export */   isValidNamespaces: function() { return /* binding */ So; },\n/* harmony export */   isValidNamespacesChainId: function() { return /* binding */ nh; },\n/* harmony export */   isValidNamespacesEvent: function() { return /* binding */ oh; },\n/* harmony export */   isValidNamespacesRequest: function() { return /* binding */ fh; },\n/* harmony export */   isValidNumber: function() { return /* binding */ Vr; },\n/* harmony export */   isValidObject: function() { return /* binding */ Yr; },\n/* harmony export */   isValidParams: function() { return /* binding */ $u; },\n/* harmony export */   isValidRecap: function() { return /* binding */ me; },\n/* harmony export */   isValidRelay: function() { return /* binding */ No; },\n/* harmony export */   isValidRelays: function() { return /* binding */ Xu; },\n/* harmony export */   isValidRequest: function() { return /* binding */ eh; },\n/* harmony export */   isValidRequestExpiry: function() { return /* binding */ uh; },\n/* harmony export */   isValidRequiredNamespaces: function() { return /* binding */ Wu; },\n/* harmony export */   isValidResponse: function() { return /* binding */ rh; },\n/* harmony export */   isValidString: function() { return /* binding */ Gt; },\n/* harmony export */   isValidUrl: function() { return /* binding */ Ju; },\n/* harmony export */   mapEntries: function() { return /* binding */ f0; },\n/* harmony export */   mapToObj: function() { return /* binding */ i0; },\n/* harmony export */   mergeArrays: function() { return /* binding */ ge; },\n/* harmony export */   mergeEncodedRecaps: function() { return /* binding */ lu; },\n/* harmony export */   mergeRecaps: function() { return /* binding */ Wf; },\n/* harmony export */   normalizeNamespaces: function() { return /* binding */ $i; },\n/* harmony export */   objToMap: function() { return /* binding */ n0; },\n/* harmony export */   parseAccountId: function() { return /* binding */ ci; },\n/* harmony export */   parseChainId: function() { return /* binding */ dn; },\n/* harmony export */   parseContextNames: function() { return /* binding */ Bn; },\n/* harmony export */   parseExpirerTarget: function() { return /* binding */ l0; },\n/* harmony export */   parseNamespaceKey: function() { return /* binding */ vo; },\n/* harmony export */   parseRelayParams: function() { return /* binding */ oo; },\n/* harmony export */   parseTopic: function() { return /* binding */ so; },\n/* harmony export */   parseUri: function() { return /* binding */ Pu; },\n/* harmony export */   populateAuthPayload: function() { return /* binding */ au; },\n/* harmony export */   recapHasResource: function() { return /* binding */ uu; },\n/* harmony export */   serialize: function() { return /* binding */ to; },\n/* harmony export */   subscribeToBrowserNetworkChange: function() { return /* binding */ Oo; },\n/* harmony export */   subscribeToNetworkChange: function() { return /* binding */ ch; },\n/* harmony export */   subscribeToReactNativeNetworkChange: function() { return /* binding */ Po; },\n/* harmony export */   validateDecoding: function() { return /* binding */ Mu; },\n/* harmony export */   validateEncoding: function() { return /* binding */ eo; },\n/* harmony export */   validateSignedCacao: function() { return /* binding */ ou; },\n/* harmony export */   verifySignature: function() { return /* binding */ Tf; }\n/* harmony export */ });\n/* harmony import */ var detect_browser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! detect-browser */ \"(app-pages-browser)/./node_modules/detect-browser/es/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/time */ \"(app-pages-browser)/./node_modules/@walletconnect/time/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/window-getters */ \"(app-pages-browser)/./node_modules/@walletconnect/window-getters/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_window_metadata__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/window-metadata */ \"(app-pages-browser)/./node_modules/@walletconnect/window-metadata/dist/cjs/index.js\");\n/* harmony import */ var query_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! query-string */ \"(app-pages-browser)/./node_modules/query-string/index.js\");\n/* harmony import */ var _stablelib_chacha20poly1305__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @stablelib/chacha20poly1305 */ \"(app-pages-browser)/./node_modules/@stablelib/chacha20poly1305/lib/chacha20poly1305.js\");\n/* harmony import */ var _stablelib_hkdf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @stablelib/hkdf */ \"(app-pages-browser)/./node_modules/@stablelib/hkdf/lib/hkdf.js\");\n/* harmony import */ var _stablelib_random__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @stablelib/random */ \"(app-pages-browser)/./node_modules/@stablelib/random/lib/random.js\");\n/* harmony import */ var _stablelib_sha256__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @stablelib/sha256 */ \"(app-pages-browser)/./node_modules/@stablelib/sha256/lib/sha256.js\");\n/* harmony import */ var _stablelib_x25519__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @stablelib/x25519 */ \"(app-pages-browser)/./node_modules/@stablelib/x25519/lib/x25519.js\");\n/* harmony import */ var uint8arrays__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! uint8arrays */ \"(app-pages-browser)/./node_modules/uint8arrays/esm/src/index.js\");\n/* harmony import */ var _walletconnect_relay_api__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @walletconnect/relay-api */ \"(app-pages-browser)/./node_modules/@walletconnect/relay-api/dist/index.es.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/process/browser.js\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/./node_modules/buffer/index.js\")[\"Buffer\"];\n\n\n\n\n\n\n\n\n\n\n\n\nconst Ir = \":\";\nfunction dn(e) {\n    const [t, r] = e.split(Ir);\n    return {\n        namespace: t,\n        reference: r\n    };\n}\nfunction pn(e) {\n    const { namespace: t, reference: r } = e;\n    return [\n        t,\n        r\n    ].join(Ir);\n}\nfunction ci(e) {\n    const [t, r, i] = e.split(Ir);\n    return {\n        namespace: t,\n        reference: r,\n        address: i\n    };\n}\nfunction vn(e) {\n    const { namespace: t, reference: r, address: i } = e;\n    return [\n        t,\n        r,\n        i\n    ].join(Ir);\n}\nfunction li(e, t) {\n    const r = [];\n    return e.forEach((i)=>{\n        const n = t(i);\n        r.includes(n) || r.push(n);\n    }), r;\n}\nfunction mn(e) {\n    const { address: t } = ci(e);\n    return t;\n}\nfunction gn(e) {\n    const { namespace: t, reference: r } = ci(e);\n    return pn({\n        namespace: t,\n        reference: r\n    });\n}\nfunction Ko(e, t) {\n    const { namespace: r, reference: i } = dn(t);\n    return vn({\n        namespace: r,\n        reference: i,\n        address: e\n    });\n}\n_c = Ko;\nfunction Ho(e) {\n    return li(e, mn);\n}\n_c1 = Ho;\nfunction An(e) {\n    return li(e, gn);\n}\n_c2 = An;\nfunction zo(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n    const r = [];\n    return Object.keys(e).forEach((i)=>{\n        if (t.length && !t.includes(i)) return;\n        const n = e[i];\n        r.push(...n.accounts);\n    }), r;\n}\nfunction Lo(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n    const r = [];\n    return Object.keys(e).forEach((i)=>{\n        if (t.length && !t.includes(i)) return;\n        const n = e[i];\n        r.push(...An(n.accounts));\n    }), r;\n}\n_c3 = Lo;\nfunction jo(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n    const r = [];\n    return Object.keys(e).forEach((i)=>{\n        if (t.length && !t.includes(i)) return;\n        const n = e[i];\n        r.push(..._r(i, n));\n    }), r;\n}\nfunction _r(e, t) {\n    return e.includes(\":\") ? [\n        e\n    ] : t.chains || [];\n}\nvar Qo = Object.defineProperty, bn = Object.getOwnPropertySymbols, Jo = Object.prototype.hasOwnProperty, Go = Object.prototype.propertyIsEnumerable, yn = (e, t, r)=>t in e ? Qo(e, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : e[t] = r, wn = (e, t)=>{\n    for(var r in t || (t = {}))Jo.call(t, r) && yn(e, r, t[r]);\n    if (bn) for (var r of bn(t))Go.call(t, r) && yn(e, r, t[r]);\n    return e;\n};\nconst xn = \"ReactNative\", qt = {\n    reactNative: \"react-native\",\n    node: \"node\",\n    browser: \"browser\",\n    unknown: \"unknown\"\n}, Br = \" \", Yo = \":\", Mn = \"/\", di = 2, Vo = 1e3, En = \"js\";\nfunction pi() {\n    return typeof process < \"u\" && typeof process.versions < \"u\" && typeof process.versions.node < \"u\";\n}\nfunction er() {\n    return !(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getDocument)() && !!(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getNavigator)() && navigator.product === xn;\n}\nfunction pr() {\n    return !pi() && !!(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getNavigator)() && !!(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getDocument)();\n}\nfunction We() {\n    return er() ? qt.reactNative : pi() ? qt.node : pr() ? qt.browser : qt.unknown;\n}\n_c4 = We;\nfunction Wo() {\n    var e;\n    try {\n        return er() && typeof __webpack_require__.g < \"u\" && typeof (__webpack_require__.g == null ? void 0 : __webpack_require__.g.Application) < \"u\" ? (e = __webpack_require__.g.Application) == null ? void 0 : e.applicationId : void 0;\n    } catch (e) {\n        return;\n    }\n}\n_c5 = Wo;\nfunction Sn(e, t) {\n    let r = query_string__WEBPACK_IMPORTED_MODULE_3__.parse(e);\n    return r = wn(wn({}, r), t), e = query_string__WEBPACK_IMPORTED_MODULE_3__.stringify(r), e;\n}\n_c6 = Sn;\nfunction Xo() {\n    return (0,_walletconnect_window_metadata__WEBPACK_IMPORTED_MODULE_2__.getWindowMetadata)() || {\n        name: \"\",\n        description: \"\",\n        url: \"\",\n        icons: [\n            \"\"\n        ]\n    };\n}\n_c7 = Xo;\nfunction Zo(e, t) {\n    var r;\n    const i = We(), n = {\n        protocol: e,\n        version: t,\n        env: i\n    };\n    return i === \"browser\" && (n.host = ((r = (0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getLocation)()) == null ? void 0 : r.host) || \"unknown\"), n;\n}\n_c8 = Zo;\nfunction Nn() {\n    if (We() === qt.reactNative && typeof __webpack_require__.g < \"u\" && typeof (__webpack_require__.g == null ? void 0 : __webpack_require__.g.Platform) < \"u\") {\n        const { OS: r, Version: i } = __webpack_require__.g.Platform;\n        return [\n            r,\n            i\n        ].join(\"-\");\n    }\n    const e = (0,detect_browser__WEBPACK_IMPORTED_MODULE_11__.detect)();\n    if (e === null) return \"unknown\";\n    const t = e.os ? e.os.replace(\" \", \"\").toLowerCase() : \"unknown\";\n    return e.type === \"browser\" ? [\n        t,\n        e.name,\n        e.version\n    ].join(\"-\") : [\n        t,\n        e.version\n    ].join(\"-\");\n}\n_c9 = Nn;\nfunction In() {\n    var e;\n    const t = We();\n    return t === qt.browser ? [\n        t,\n        ((e = (0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getLocation)()) == null ? void 0 : e.host) || \"unknown\"\n    ].join(\":\") : t;\n}\n_c10 = In;\nfunction _n(e, t, r) {\n    const i = Nn(), n = In();\n    return [\n        [\n            e,\n            t\n        ].join(\"-\"),\n        [\n            En,\n            r\n        ].join(\"-\"),\n        i,\n        n\n    ].join(\"/\");\n}\nfunction $o(param) {\n    let { protocol: e, version: t, relayUrl: r, sdkVersion: i, auth: n, projectId: o, useOnCloseEvent: h, bundleId: p } = param;\n    const b = r.split(\"?\"), m = _n(e, t, i), w = {\n        auth: n,\n        ua: m,\n        projectId: o,\n        useOnCloseEvent: h || void 0,\n        origin: p || void 0\n    }, y = Sn(b[1] || \"\", w);\n    return b[0] + \"?\" + y;\n}\nfunction t0(e) {\n    let t = (e.match(/^[^:]+(?=:\\/\\/)/gi) || [])[0];\n    const r = typeof t < \"u\" ? e.split(\"://\")[1] : e;\n    return t = t === \"wss\" ? \"https\" : \"http\", [\n        t,\n        r\n    ].join(\"://\");\n}\nfunction e0(e, t, r) {\n    if (!e[t] || typeof e[t] !== r) throw new Error('Missing or invalid \"'.concat(t, '\" param'));\n}\nfunction Bn(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : di;\n    return Cn(e.split(Mn), t);\n}\n_c11 = Bn;\nfunction r0(e) {\n    return Bn(e).join(Br);\n}\nfunction _e(e, t) {\n    return e.filter((r)=>t.includes(r)).length === e.length;\n}\nfunction Cn(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : di;\n    return e.slice(Math.max(e.length - t, 0));\n}\n_c12 = Cn;\nfunction i0(e) {\n    return Object.fromEntries(e.entries());\n}\nfunction n0(e) {\n    return new Map(Object.entries(e));\n}\nfunction f0(e, t) {\n    const r = {};\n    return Object.keys(e).forEach((i)=>{\n        r[i] = t(e[i]);\n    }), r;\n}\nconst o0 = (e)=>e;\nfunction Rn(e) {\n    return e.trim().replace(/^\\w/, (t)=>t.toUpperCase());\n}\n_c13 = Rn;\nfunction s0(e) {\n    return e.split(Br).map((t)=>Rn(t)).join(Br);\n}\nfunction a0() {\n    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.FIVE_MINUTES, t = arguments.length > 1 ? arguments[1] : void 0;\n    const r = (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.toMiliseconds)(e || _walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.FIVE_MINUTES);\n    let i, n, o;\n    return {\n        resolve: (h)=>{\n            o && i && (clearTimeout(o), i(h));\n        },\n        reject: (h)=>{\n            o && n && (clearTimeout(o), n(h));\n        },\n        done: ()=>new Promise((h, p)=>{\n                o = setTimeout(()=>{\n                    p(new Error(t));\n                }, r), i = h, n = p;\n            })\n    };\n}\nfunction u0(e, t, r) {\n    return new Promise(async (i, n)=>{\n        const o = setTimeout(()=>n(new Error(r)), t);\n        try {\n            const h = await e;\n            i(h);\n        } catch (h) {\n            n(h);\n        }\n        clearTimeout(o);\n    });\n}\nfunction vi(e, t) {\n    if (typeof t == \"string\" && t.startsWith(\"\".concat(e, \":\"))) return t;\n    if (e.toLowerCase() === \"topic\") {\n        if (typeof t != \"string\") throw new Error('Value must be \"string\" for expirer target type: topic');\n        return \"topic:\".concat(t);\n    } else if (e.toLowerCase() === \"id\") {\n        if (typeof t != \"number\") throw new Error('Value must be \"number\" for expirer target type: id');\n        return \"id:\".concat(t);\n    }\n    throw new Error(\"Unknown expirer target type: \".concat(e));\n}\nfunction h0(e) {\n    return vi(\"topic\", e);\n}\nfunction c0(e) {\n    return vi(\"id\", e);\n}\nfunction l0(e) {\n    const [t, r] = e.split(\":\"), i = {\n        id: void 0,\n        topic: void 0\n    };\n    if (t === \"topic\" && typeof r == \"string\") i.topic = r;\n    else if (t === \"id\" && Number.isInteger(Number(r))) i.id = Number(r);\n    else throw new Error(\"Invalid target, expected id:number or topic:string, got \".concat(t, \":\").concat(r));\n    return i;\n}\nfunction d0(e, t) {\n    return (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.fromMiliseconds)((t || Date.now()) + (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.toMiliseconds)(e));\n}\nfunction p0(e) {\n    return Date.now() >= (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.toMiliseconds)(e);\n}\nfunction v0(e, t) {\n    return \"\".concat(e).concat(t ? \":\".concat(t) : \"\");\n}\nfunction ge() {\n    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n    return [\n        ...new Set([\n            ...e,\n            ...t\n        ])\n    ];\n}\nasync function m0(param) {\n    let { id: e, topic: t, wcDeepLink: r } = param;\n    try {\n        if (!r) return;\n        const i = typeof r == \"string\" ? JSON.parse(r) : r;\n        let n = i === null || i === void 0 ? void 0 : i.href;\n        if (typeof n != \"string\") return;\n        n.endsWith(\"/\") && (n = n.slice(0, -1));\n        const o = \"\".concat(n, \"/wc?requestId=\").concat(e, \"&sessionTopic=\").concat(t), h = We();\n        h === qt.browser ? o.startsWith(\"https://\") || o.startsWith(\"http://\") ? window.open(o, \"_blank\", \"noreferrer noopener\") : window.open(o, \"_self\", \"noreferrer noopener\") : h === qt.reactNative && typeof (__webpack_require__.g == null ? void 0 : __webpack_require__.g.Linking) < \"u\" && await __webpack_require__.g.Linking.openURL(o);\n    } catch (i) {\n        console.error(i);\n    }\n}\nasync function g0(e, t) {\n    try {\n        return await e.getItem(t) || (pr() ? localStorage.getItem(t) : void 0);\n    } catch (r) {\n        console.error(r);\n    }\n}\nfunction mi(e, t) {\n    return e.filter((r)=>t.includes(r));\n}\nvar On = typeof globalThis < \"u\" ? globalThis :  true ? window : 0;\nfunction A0(e) {\n    var t = e.default;\n    if (typeof t == \"function\") {\n        var r = function() {\n            return t.apply(this, arguments);\n        };\n        r.prototype = t.prototype;\n    } else r = {};\n    return Object.defineProperty(r, \"__esModule\", {\n        value: !0\n    }), Object.keys(e).forEach(function(i) {\n        var n = Object.getOwnPropertyDescriptor(e, i);\n        Object.defineProperty(r, i, n.get ? n : {\n            enumerable: !0,\n            get: function() {\n                return e[i];\n            }\n        });\n    }), r;\n}\n_c14 = A0;\nvar Pn = {\n    exports: {}\n}; /**\n * [js-sha3]{@link https://github.com/emn178/js-sha3}\n *\n * @version 0.8.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2015-2018\n * @license MIT\n */ \n(function(e) {\n    (function() {\n        var t = \"input is invalid type\", r = \"finalize already called\", i = \"object\" == \"object\", n = i ? window : {};\n        n.JS_SHA3_NO_WINDOW && (i = !1);\n        var o = !i && typeof self == \"object\", h = !n.JS_SHA3_NO_NODE_JS && typeof process == \"object\" && process.versions && process.versions.node;\n        h ? n = On : o && (n = self);\n        var p = !n.JS_SHA3_NO_COMMON_JS && !0 && e.exports, b = !n.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer < \"u\", m = \"0123456789abcdef\".split(\"\"), w = [\n            31,\n            7936,\n            2031616,\n            520093696\n        ], y = [\n            4,\n            1024,\n            262144,\n            67108864\n        ], S = [\n            1,\n            256,\n            65536,\n            16777216\n        ], I = [\n            6,\n            1536,\n            393216,\n            100663296\n        ], N = [\n            0,\n            8,\n            16,\n            24\n        ], C = [\n            1,\n            0,\n            32898,\n            0,\n            32906,\n            2147483648,\n            2147516416,\n            2147483648,\n            32907,\n            0,\n            2147483649,\n            0,\n            2147516545,\n            2147483648,\n            32777,\n            2147483648,\n            138,\n            0,\n            136,\n            0,\n            2147516425,\n            0,\n            2147483658,\n            0,\n            2147516555,\n            0,\n            139,\n            2147483648,\n            32905,\n            2147483648,\n            32771,\n            2147483648,\n            32770,\n            2147483648,\n            128,\n            2147483648,\n            32778,\n            0,\n            2147483658,\n            2147483648,\n            2147516545,\n            2147483648,\n            32896,\n            2147483648,\n            2147483649,\n            0,\n            2147516424,\n            2147483648\n        ], F = [\n            224,\n            256,\n            384,\n            512\n        ], U = [\n            128,\n            256\n        ], J = [\n            \"hex\",\n            \"buffer\",\n            \"arrayBuffer\",\n            \"array\",\n            \"digest\"\n        ], Bt = {\n            128: 168,\n            256: 136\n        };\n        (n.JS_SHA3_NO_NODE_JS || !Array.isArray) && (Array.isArray = function(u) {\n            return Object.prototype.toString.call(u) === \"[object Array]\";\n        }), b && (n.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView) && (ArrayBuffer.isView = function(u) {\n            return typeof u == \"object\" && u.buffer && u.buffer.constructor === ArrayBuffer;\n        });\n        for(var G = function(u, E, _) {\n            return function(B) {\n                return new s(u, E, u).update(B)[_]();\n            };\n        }, H = function(u, E, _) {\n            return function(B, R) {\n                return new s(u, E, R).update(B)[_]();\n            };\n        }, z = function(u, E, _) {\n            return function(B, R, T, P) {\n                return f[\"cshake\" + u].update(B, R, T, P)[_]();\n            };\n        }, Pt = function(u, E, _) {\n            return function(B, R, T, P) {\n                return f[\"kmac\" + u].update(B, R, T, P)[_]();\n            };\n        }, W = function(u, E, _, B) {\n            for(var R = 0; R < J.length; ++R){\n                var T = J[R];\n                u[T] = E(_, B, T);\n            }\n            return u;\n        }, Rt = function(u, E) {\n            var _ = G(u, E, \"hex\");\n            return _.create = function() {\n                return new s(u, E, u);\n            }, _.update = function(B) {\n                return _.create().update(B);\n            }, W(_, G, u, E);\n        }, Yt = function(u, E) {\n            var _ = H(u, E, \"hex\");\n            return _.create = function(B) {\n                return new s(u, E, B);\n            }, _.update = function(B, R) {\n                return _.create(R).update(B);\n            }, W(_, H, u, E);\n        }, Y = function(u, E) {\n            var _ = Bt[u], B = z(u, E, \"hex\");\n            return B.create = function(R, T, P) {\n                return !T && !P ? f[\"shake\" + u].create(R) : new s(u, E, R).bytepad([\n                    T,\n                    P\n                ], _);\n            }, B.update = function(R, T, P, O) {\n                return B.create(T, P, O).update(R);\n            }, W(B, z, u, E);\n        }, Vt = function(u, E) {\n            var _ = Bt[u], B = Pt(u, E, \"hex\");\n            return B.create = function(R, T, P) {\n                return new v(u, E, T).bytepad([\n                    \"KMAC\",\n                    P\n                ], _).bytepad([\n                    R\n                ], _);\n            }, B.update = function(R, T, P, O) {\n                return B.create(R, P, O).update(T);\n            }, W(B, Pt, u, E);\n        }, A = [\n            {\n                name: \"keccak\",\n                padding: S,\n                bits: F,\n                createMethod: Rt\n            },\n            {\n                name: \"sha3\",\n                padding: I,\n                bits: F,\n                createMethod: Rt\n            },\n            {\n                name: \"shake\",\n                padding: w,\n                bits: U,\n                createMethod: Yt\n            },\n            {\n                name: \"cshake\",\n                padding: y,\n                bits: U,\n                createMethod: Y\n            },\n            {\n                name: \"kmac\",\n                padding: y,\n                bits: U,\n                createMethod: Vt\n            }\n        ], f = {}, a = [], c = 0; c < A.length; ++c)for(var d = A[c], g = d.bits, x = 0; x < g.length; ++x){\n            var M = d.name + \"_\" + g[x];\n            if (a.push(M), f[M] = d.createMethod(g[x], d.padding), d.name !== \"sha3\") {\n                var l = d.name + g[x];\n                a.push(l), f[l] = f[M];\n            }\n        }\n        function s(u, E, _) {\n            this.blocks = [], this.s = [], this.padding = E, this.outputBits = _, this.reset = !0, this.finalized = !1, this.block = 0, this.start = 0, this.blockCount = 1600 - (u << 1) >> 5, this.byteCount = this.blockCount << 2, this.outputBlocks = _ >> 5, this.extraBytes = (_ & 31) >> 3;\n            for(var B = 0; B < 50; ++B)this.s[B] = 0;\n        }\n        s.prototype.update = function(u) {\n            if (this.finalized) throw new Error(r);\n            var E, _ = typeof u;\n            if (_ !== \"string\") {\n                if (_ === \"object\") {\n                    if (u === null) throw new Error(t);\n                    if (b && u.constructor === ArrayBuffer) u = new Uint8Array(u);\n                    else if (!Array.isArray(u) && (!b || !ArrayBuffer.isView(u))) throw new Error(t);\n                } else throw new Error(t);\n                E = !0;\n            }\n            for(var B = this.blocks, R = this.byteCount, T = u.length, P = this.blockCount, O = 0, Ct = this.s, D, q; O < T;){\n                if (this.reset) for(this.reset = !1, B[0] = this.block, D = 1; D < P + 1; ++D)B[D] = 0;\n                if (E) for(D = this.start; O < T && D < R; ++O)B[D >> 2] |= u[O] << N[D++ & 3];\n                else for(D = this.start; O < T && D < R; ++O)q = u.charCodeAt(O), q < 128 ? B[D >> 2] |= q << N[D++ & 3] : q < 2048 ? (B[D >> 2] |= (192 | q >> 6) << N[D++ & 3], B[D >> 2] |= (128 | q & 63) << N[D++ & 3]) : q < 55296 || q >= 57344 ? (B[D >> 2] |= (224 | q >> 12) << N[D++ & 3], B[D >> 2] |= (128 | q >> 6 & 63) << N[D++ & 3], B[D >> 2] |= (128 | q & 63) << N[D++ & 3]) : (q = 65536 + ((q & 1023) << 10 | u.charCodeAt(++O) & 1023), B[D >> 2] |= (240 | q >> 18) << N[D++ & 3], B[D >> 2] |= (128 | q >> 12 & 63) << N[D++ & 3], B[D >> 2] |= (128 | q >> 6 & 63) << N[D++ & 3], B[D >> 2] |= (128 | q & 63) << N[D++ & 3]);\n                if (this.lastByteIndex = D, D >= R) {\n                    for(this.start = D - R, this.block = B[P], D = 0; D < P; ++D)Ct[D] ^= B[D];\n                    k(Ct), this.reset = !0;\n                } else this.start = D;\n            }\n            return this;\n        }, s.prototype.encode = function(u, E) {\n            var _ = u & 255, B = 1, R = [\n                _\n            ];\n            for(u = u >> 8, _ = u & 255; _ > 0;)R.unshift(_), u = u >> 8, _ = u & 255, ++B;\n            return E ? R.push(B) : R.unshift(B), this.update(R), R.length;\n        }, s.prototype.encodeString = function(u) {\n            var E, _ = typeof u;\n            if (_ !== \"string\") {\n                if (_ === \"object\") {\n                    if (u === null) throw new Error(t);\n                    if (b && u.constructor === ArrayBuffer) u = new Uint8Array(u);\n                    else if (!Array.isArray(u) && (!b || !ArrayBuffer.isView(u))) throw new Error(t);\n                } else throw new Error(t);\n                E = !0;\n            }\n            var B = 0, R = u.length;\n            if (E) B = R;\n            else for(var T = 0; T < u.length; ++T){\n                var P = u.charCodeAt(T);\n                P < 128 ? B += 1 : P < 2048 ? B += 2 : P < 55296 || P >= 57344 ? B += 3 : (P = 65536 + ((P & 1023) << 10 | u.charCodeAt(++T) & 1023), B += 4);\n            }\n            return B += this.encode(B * 8), this.update(u), B;\n        }, s.prototype.bytepad = function(u, E) {\n            for(var _ = this.encode(E), B = 0; B < u.length; ++B)_ += this.encodeString(u[B]);\n            var R = E - _ % E, T = [];\n            return T.length = R, this.update(T), this;\n        }, s.prototype.finalize = function() {\n            if (!this.finalized) {\n                this.finalized = !0;\n                var u = this.blocks, E = this.lastByteIndex, _ = this.blockCount, B = this.s;\n                if (u[E >> 2] |= this.padding[E & 3], this.lastByteIndex === this.byteCount) for(u[0] = u[_], E = 1; E < _ + 1; ++E)u[E] = 0;\n                for(u[_ - 1] |= 2147483648, E = 0; E < _; ++E)B[E] ^= u[E];\n                k(B);\n            }\n        }, s.prototype.toString = s.prototype.hex = function() {\n            this.finalize();\n            for(var u = this.blockCount, E = this.s, _ = this.outputBlocks, B = this.extraBytes, R = 0, T = 0, P = \"\", O; T < _;){\n                for(R = 0; R < u && T < _; ++R, ++T)O = E[R], P += m[O >> 4 & 15] + m[O & 15] + m[O >> 12 & 15] + m[O >> 8 & 15] + m[O >> 20 & 15] + m[O >> 16 & 15] + m[O >> 28 & 15] + m[O >> 24 & 15];\n                T % u === 0 && (k(E), R = 0);\n            }\n            return B && (O = E[R], P += m[O >> 4 & 15] + m[O & 15], B > 1 && (P += m[O >> 12 & 15] + m[O >> 8 & 15]), B > 2 && (P += m[O >> 20 & 15] + m[O >> 16 & 15])), P;\n        }, s.prototype.arrayBuffer = function() {\n            this.finalize();\n            var u = this.blockCount, E = this.s, _ = this.outputBlocks, B = this.extraBytes, R = 0, T = 0, P = this.outputBits >> 3, O;\n            B ? O = new ArrayBuffer(_ + 1 << 2) : O = new ArrayBuffer(P);\n            for(var Ct = new Uint32Array(O); T < _;){\n                for(R = 0; R < u && T < _; ++R, ++T)Ct[T] = E[R];\n                T % u === 0 && k(E);\n            }\n            return B && (Ct[R] = E[R], O = O.slice(0, P)), O;\n        }, s.prototype.buffer = s.prototype.arrayBuffer, s.prototype.digest = s.prototype.array = function() {\n            this.finalize();\n            for(var u = this.blockCount, E = this.s, _ = this.outputBlocks, B = this.extraBytes, R = 0, T = 0, P = [], O, Ct; T < _;){\n                for(R = 0; R < u && T < _; ++R, ++T)O = T << 2, Ct = E[R], P[O] = Ct & 255, P[O + 1] = Ct >> 8 & 255, P[O + 2] = Ct >> 16 & 255, P[O + 3] = Ct >> 24 & 255;\n                T % u === 0 && k(E);\n            }\n            return B && (O = T << 2, Ct = E[R], P[O] = Ct & 255, B > 1 && (P[O + 1] = Ct >> 8 & 255), B > 2 && (P[O + 2] = Ct >> 16 & 255)), P;\n        };\n        function v(u, E, _) {\n            s.call(this, u, E, _);\n        }\n        v.prototype = new s, v.prototype.finalize = function() {\n            return this.encode(this.outputBits, !0), s.prototype.finalize.call(this);\n        };\n        var k = function(u) {\n            var E, _, B, R, T, P, O, Ct, D, q, De, X, Z, Fe, $, tt, Te, et, rt, Ue, it, nt, ke, ft, ot, qe, st, at, Ke, ut, ht, He, ct, lt, ze, dt, pt, Le, vt, mt, je, gt, At, Qe, bt, yt, Je, wt, xt, Ge, Mt, Et, Ye, St, Nt, Ve, It, _t, Me, Ee, Se, Ne, Ie;\n            for(B = 0; B < 48; B += 2)R = u[0] ^ u[10] ^ u[20] ^ u[30] ^ u[40], T = u[1] ^ u[11] ^ u[21] ^ u[31] ^ u[41], P = u[2] ^ u[12] ^ u[22] ^ u[32] ^ u[42], O = u[3] ^ u[13] ^ u[23] ^ u[33] ^ u[43], Ct = u[4] ^ u[14] ^ u[24] ^ u[34] ^ u[44], D = u[5] ^ u[15] ^ u[25] ^ u[35] ^ u[45], q = u[6] ^ u[16] ^ u[26] ^ u[36] ^ u[46], De = u[7] ^ u[17] ^ u[27] ^ u[37] ^ u[47], X = u[8] ^ u[18] ^ u[28] ^ u[38] ^ u[48], Z = u[9] ^ u[19] ^ u[29] ^ u[39] ^ u[49], E = X ^ (P << 1 | O >>> 31), _ = Z ^ (O << 1 | P >>> 31), u[0] ^= E, u[1] ^= _, u[10] ^= E, u[11] ^= _, u[20] ^= E, u[21] ^= _, u[30] ^= E, u[31] ^= _, u[40] ^= E, u[41] ^= _, E = R ^ (Ct << 1 | D >>> 31), _ = T ^ (D << 1 | Ct >>> 31), u[2] ^= E, u[3] ^= _, u[12] ^= E, u[13] ^= _, u[22] ^= E, u[23] ^= _, u[32] ^= E, u[33] ^= _, u[42] ^= E, u[43] ^= _, E = P ^ (q << 1 | De >>> 31), _ = O ^ (De << 1 | q >>> 31), u[4] ^= E, u[5] ^= _, u[14] ^= E, u[15] ^= _, u[24] ^= E, u[25] ^= _, u[34] ^= E, u[35] ^= _, u[44] ^= E, u[45] ^= _, E = Ct ^ (X << 1 | Z >>> 31), _ = D ^ (Z << 1 | X >>> 31), u[6] ^= E, u[7] ^= _, u[16] ^= E, u[17] ^= _, u[26] ^= E, u[27] ^= _, u[36] ^= E, u[37] ^= _, u[46] ^= E, u[47] ^= _, E = q ^ (R << 1 | T >>> 31), _ = De ^ (T << 1 | R >>> 31), u[8] ^= E, u[9] ^= _, u[18] ^= E, u[19] ^= _, u[28] ^= E, u[29] ^= _, u[38] ^= E, u[39] ^= _, u[48] ^= E, u[49] ^= _, Fe = u[0], $ = u[1], yt = u[11] << 4 | u[10] >>> 28, Je = u[10] << 4 | u[11] >>> 28, at = u[20] << 3 | u[21] >>> 29, Ke = u[21] << 3 | u[20] >>> 29, Ee = u[31] << 9 | u[30] >>> 23, Se = u[30] << 9 | u[31] >>> 23, gt = u[40] << 18 | u[41] >>> 14, At = u[41] << 18 | u[40] >>> 14, lt = u[2] << 1 | u[3] >>> 31, ze = u[3] << 1 | u[2] >>> 31, tt = u[13] << 12 | u[12] >>> 20, Te = u[12] << 12 | u[13] >>> 20, wt = u[22] << 10 | u[23] >>> 22, xt = u[23] << 10 | u[22] >>> 22, ut = u[33] << 13 | u[32] >>> 19, ht = u[32] << 13 | u[33] >>> 19, Ne = u[42] << 2 | u[43] >>> 30, Ie = u[43] << 2 | u[42] >>> 30, St = u[5] << 30 | u[4] >>> 2, Nt = u[4] << 30 | u[5] >>> 2, dt = u[14] << 6 | u[15] >>> 26, pt = u[15] << 6 | u[14] >>> 26, et = u[25] << 11 | u[24] >>> 21, rt = u[24] << 11 | u[25] >>> 21, Ge = u[34] << 15 | u[35] >>> 17, Mt = u[35] << 15 | u[34] >>> 17, He = u[45] << 29 | u[44] >>> 3, ct = u[44] << 29 | u[45] >>> 3, ft = u[6] << 28 | u[7] >>> 4, ot = u[7] << 28 | u[6] >>> 4, Ve = u[17] << 23 | u[16] >>> 9, It = u[16] << 23 | u[17] >>> 9, Le = u[26] << 25 | u[27] >>> 7, vt = u[27] << 25 | u[26] >>> 7, Ue = u[36] << 21 | u[37] >>> 11, it = u[37] << 21 | u[36] >>> 11, Et = u[47] << 24 | u[46] >>> 8, Ye = u[46] << 24 | u[47] >>> 8, Qe = u[8] << 27 | u[9] >>> 5, bt = u[9] << 27 | u[8] >>> 5, qe = u[18] << 20 | u[19] >>> 12, st = u[19] << 20 | u[18] >>> 12, _t = u[29] << 7 | u[28] >>> 25, Me = u[28] << 7 | u[29] >>> 25, mt = u[38] << 8 | u[39] >>> 24, je = u[39] << 8 | u[38] >>> 24, nt = u[48] << 14 | u[49] >>> 18, ke = u[49] << 14 | u[48] >>> 18, u[0] = Fe ^ ~tt & et, u[1] = $ ^ ~Te & rt, u[10] = ft ^ ~qe & at, u[11] = ot ^ ~st & Ke, u[20] = lt ^ ~dt & Le, u[21] = ze ^ ~pt & vt, u[30] = Qe ^ ~yt & wt, u[31] = bt ^ ~Je & xt, u[40] = St ^ ~Ve & _t, u[41] = Nt ^ ~It & Me, u[2] = tt ^ ~et & Ue, u[3] = Te ^ ~rt & it, u[12] = qe ^ ~at & ut, u[13] = st ^ ~Ke & ht, u[22] = dt ^ ~Le & mt, u[23] = pt ^ ~vt & je, u[32] = yt ^ ~wt & Ge, u[33] = Je ^ ~xt & Mt, u[42] = Ve ^ ~_t & Ee, u[43] = It ^ ~Me & Se, u[4] = et ^ ~Ue & nt, u[5] = rt ^ ~it & ke, u[14] = at ^ ~ut & He, u[15] = Ke ^ ~ht & ct, u[24] = Le ^ ~mt & gt, u[25] = vt ^ ~je & At, u[34] = wt ^ ~Ge & Et, u[35] = xt ^ ~Mt & Ye, u[44] = _t ^ ~Ee & Ne, u[45] = Me ^ ~Se & Ie, u[6] = Ue ^ ~nt & Fe, u[7] = it ^ ~ke & $, u[16] = ut ^ ~He & ft, u[17] = ht ^ ~ct & ot, u[26] = mt ^ ~gt & lt, u[27] = je ^ ~At & ze, u[36] = Ge ^ ~Et & Qe, u[37] = Mt ^ ~Ye & bt, u[46] = Ee ^ ~Ne & St, u[47] = Se ^ ~Ie & Nt, u[8] = nt ^ ~Fe & tt, u[9] = ke ^ ~$ & Te, u[18] = He ^ ~ft & qe, u[19] = ct ^ ~ot & st, u[28] = gt ^ ~lt & dt, u[29] = At ^ ~ze & pt, u[38] = Et ^ ~Qe & yt, u[39] = Ye ^ ~bt & Je, u[48] = Ne ^ ~St & Ve, u[49] = Ie ^ ~Nt & It, u[0] ^= C[B], u[1] ^= C[B + 1];\n        };\n        if (p) e.exports = f;\n        else for(c = 0; c < a.length; ++c)n[a[c]] = f[a[c]];\n    })();\n})(Pn);\nvar b0 = Pn.exports;\nconst y0 = \"logger/5.7.0\";\nlet Dn = !1, Fn = !1;\nconst Cr = {\n    debug: 1,\n    default: 2,\n    info: 2,\n    warning: 3,\n    error: 4,\n    off: 5\n};\nlet Tn = Cr.default, gi = null;\nfunction w0() {\n    try {\n        const e = [];\n        if ([\n            \"NFD\",\n            \"NFC\",\n            \"NFKD\",\n            \"NFKC\"\n        ].forEach((t)=>{\n            try {\n                if (\"test\".normalize(t) !== \"test\") throw new Error(\"bad normalize\");\n            } catch (e1) {\n                e.push(t);\n            }\n        }), e.length) throw new Error(\"missing \" + e.join(\", \"));\n        if (String.fromCharCode(233).normalize(\"NFD\") !== String.fromCharCode(101, 769)) throw new Error(\"broken implementation\");\n    } catch (e) {\n        return e.message;\n    }\n    return null;\n}\nconst Un = w0();\nvar Ai;\n(function(e) {\n    e.DEBUG = \"DEBUG\", e.INFO = \"INFO\", e.WARNING = \"WARNING\", e.ERROR = \"ERROR\", e.OFF = \"OFF\";\n})(Ai || (Ai = {}));\nvar re;\n(function(e) {\n    e.UNKNOWN_ERROR = \"UNKNOWN_ERROR\", e.NOT_IMPLEMENTED = \"NOT_IMPLEMENTED\", e.UNSUPPORTED_OPERATION = \"UNSUPPORTED_OPERATION\", e.NETWORK_ERROR = \"NETWORK_ERROR\", e.SERVER_ERROR = \"SERVER_ERROR\", e.TIMEOUT = \"TIMEOUT\", e.BUFFER_OVERRUN = \"BUFFER_OVERRUN\", e.NUMERIC_FAULT = \"NUMERIC_FAULT\", e.MISSING_NEW = \"MISSING_NEW\", e.INVALID_ARGUMENT = \"INVALID_ARGUMENT\", e.MISSING_ARGUMENT = \"MISSING_ARGUMENT\", e.UNEXPECTED_ARGUMENT = \"UNEXPECTED_ARGUMENT\", e.CALL_EXCEPTION = \"CALL_EXCEPTION\", e.INSUFFICIENT_FUNDS = \"INSUFFICIENT_FUNDS\", e.NONCE_EXPIRED = \"NONCE_EXPIRED\", e.REPLACEMENT_UNDERPRICED = \"REPLACEMENT_UNDERPRICED\", e.UNPREDICTABLE_GAS_LIMIT = \"UNPREDICTABLE_GAS_LIMIT\", e.TRANSACTION_REPLACED = \"TRANSACTION_REPLACED\", e.ACTION_REJECTED = \"ACTION_REJECTED\";\n})(re || (re = {}));\nconst kn = \"0123456789abcdef\";\nclass L {\n    _log(t, r) {\n        const i = t.toLowerCase();\n        Cr[i] == null && this.throwArgumentError(\"invalid log level name\", \"logLevel\", t), !(Tn > Cr[i]) && console.log.apply(console, r);\n    }\n    debug() {\n        for(var _len = arguments.length, t = new Array(_len), _key = 0; _key < _len; _key++){\n            t[_key] = arguments[_key];\n        }\n        this._log(L.levels.DEBUG, t);\n    }\n    info() {\n        for(var _len = arguments.length, t = new Array(_len), _key = 0; _key < _len; _key++){\n            t[_key] = arguments[_key];\n        }\n        this._log(L.levels.INFO, t);\n    }\n    warn() {\n        for(var _len = arguments.length, t = new Array(_len), _key = 0; _key < _len; _key++){\n            t[_key] = arguments[_key];\n        }\n        this._log(L.levels.WARNING, t);\n    }\n    makeError(t, r, i) {\n        if (Fn) return this.makeError(\"censored error\", r, {});\n        r || (r = L.errors.UNKNOWN_ERROR), i || (i = {});\n        const n = [];\n        Object.keys(i).forEach((b)=>{\n            const m = i[b];\n            try {\n                if (m instanceof Uint8Array) {\n                    let w = \"\";\n                    for(let y = 0; y < m.length; y++)w += kn[m[y] >> 4], w += kn[m[y] & 15];\n                    n.push(b + \"=Uint8Array(0x\" + w + \")\");\n                } else n.push(b + \"=\" + JSON.stringify(m));\n            } catch (e) {\n                n.push(b + \"=\" + JSON.stringify(i[b].toString()));\n            }\n        }), n.push(\"code=\".concat(r)), n.push(\"version=\".concat(this.version));\n        const o = t;\n        let h = \"\";\n        switch(r){\n            case re.NUMERIC_FAULT:\n                {\n                    h = \"NUMERIC_FAULT\";\n                    const b = t;\n                    switch(b){\n                        case \"overflow\":\n                        case \"underflow\":\n                        case \"division-by-zero\":\n                            h += \"-\" + b;\n                            break;\n                        case \"negative-power\":\n                        case \"negative-width\":\n                            h += \"-unsupported\";\n                            break;\n                        case \"unbound-bitwise-result\":\n                            h += \"-unbound-result\";\n                            break;\n                    }\n                    break;\n                }\n            case re.CALL_EXCEPTION:\n            case re.INSUFFICIENT_FUNDS:\n            case re.MISSING_NEW:\n            case re.NONCE_EXPIRED:\n            case re.REPLACEMENT_UNDERPRICED:\n            case re.TRANSACTION_REPLACED:\n            case re.UNPREDICTABLE_GAS_LIMIT:\n                h = r;\n                break;\n        }\n        h && (t += \" [ See: https://links.ethers.org/v5-errors-\" + h + \" ]\"), n.length && (t += \" (\" + n.join(\", \") + \")\");\n        const p = new Error(t);\n        return p.reason = o, p.code = r, Object.keys(i).forEach(function(b) {\n            p[b] = i[b];\n        }), p;\n    }\n    throwError(t, r, i) {\n        throw this.makeError(t, r, i);\n    }\n    throwArgumentError(t, r, i) {\n        return this.throwError(t, L.errors.INVALID_ARGUMENT, {\n            argument: r,\n            value: i\n        });\n    }\n    assert(t, r, i, n) {\n        t || this.throwError(r, i, n);\n    }\n    assertArgument(t, r, i, n) {\n        t || this.throwArgumentError(r, i, n);\n    }\n    checkNormalize(t) {\n        Un && this.throwError(\"platform missing String.prototype.normalize\", L.errors.UNSUPPORTED_OPERATION, {\n            operation: \"String.prototype.normalize\",\n            form: Un\n        });\n    }\n    checkSafeUint53(t, r) {\n        typeof t == \"number\" && (r == null && (r = \"value not safe\"), (t < 0 || t >= 9007199254740991) && this.throwError(r, L.errors.NUMERIC_FAULT, {\n            operation: \"checkSafeInteger\",\n            fault: \"out-of-safe-range\",\n            value: t\n        }), t % 1 && this.throwError(r, L.errors.NUMERIC_FAULT, {\n            operation: \"checkSafeInteger\",\n            fault: \"non-integer\",\n            value: t\n        }));\n    }\n    checkArgumentCount(t, r, i) {\n        i ? i = \": \" + i : i = \"\", t < r && this.throwError(\"missing argument\" + i, L.errors.MISSING_ARGUMENT, {\n            count: t,\n            expectedCount: r\n        }), t > r && this.throwError(\"too many arguments\" + i, L.errors.UNEXPECTED_ARGUMENT, {\n            count: t,\n            expectedCount: r\n        });\n    }\n    checkNew(t, r) {\n        (t === Object || t == null) && this.throwError(\"missing new\", L.errors.MISSING_NEW, {\n            name: r.name\n        });\n    }\n    checkAbstract(t, r) {\n        t === r ? this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(r.name) + \" directly; use a sub-class\", L.errors.UNSUPPORTED_OPERATION, {\n            name: t.name,\n            operation: \"new\"\n        }) : (t === Object || t == null) && this.throwError(\"missing new\", L.errors.MISSING_NEW, {\n            name: r.name\n        });\n    }\n    static globalLogger() {\n        return gi || (gi = new L(y0)), gi;\n    }\n    static setCensorship(t, r) {\n        if (!t && r && this.globalLogger().throwError(\"cannot permanently disable censorship\", L.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setCensorship\"\n        }), Dn) {\n            if (!t) return;\n            this.globalLogger().throwError(\"error censorship permanent\", L.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        Fn = !!t, Dn = !!r;\n    }\n    static setLogLevel(t) {\n        const r = Cr[t.toLowerCase()];\n        if (r == null) {\n            L.globalLogger().warn(\"invalid log level - \" + t);\n            return;\n        }\n        Tn = r;\n    }\n    static from(t) {\n        return new L(t);\n    }\n    constructor(t){\n        Object.defineProperty(this, \"version\", {\n            enumerable: !0,\n            value: t,\n            writable: !1\n        });\n    }\n}\nL.errors = re, L.levels = Ai;\nconst x0 = \"bytes/5.7.0\", Dt = new L(x0);\nfunction qn(e) {\n    return !!e.toHexString;\n}\nfunction rr(e) {\n    return e.slice || (e.slice = function() {\n        const t = Array.prototype.slice.call(arguments);\n        return rr(new Uint8Array(Array.prototype.slice.apply(e, t)));\n    }), e;\n}\nfunction M0(e) {\n    return Qt(e) && !(e.length % 2) || ir(e);\n}\n_c15 = M0;\nfunction Kn(e) {\n    return typeof e == \"number\" && e == e && e % 1 === 0;\n}\n_c16 = Kn;\nfunction ir(e) {\n    if (e == null) return !1;\n    if (e.constructor === Uint8Array) return !0;\n    if (typeof e == \"string\" || !Kn(e.length) || e.length < 0) return !1;\n    for(let t = 0; t < e.length; t++){\n        const r = e[t];\n        if (!Kn(r) || r < 0 || r >= 256) return !1;\n    }\n    return !0;\n}\nfunction Ot(e, t) {\n    if (t || (t = {}), typeof e == \"number\") {\n        Dt.checkSafeUint53(e, \"invalid arrayify value\");\n        const r = [];\n        for(; e;)r.unshift(e & 255), e = parseInt(String(e / 256));\n        return r.length === 0 && r.push(0), rr(new Uint8Array(r));\n    }\n    if (t.allowMissingPrefix && typeof e == \"string\" && e.substring(0, 2) !== \"0x\" && (e = \"0x\" + e), qn(e) && (e = e.toHexString()), Qt(e)) {\n        let r = e.substring(2);\n        r.length % 2 && (t.hexPad === \"left\" ? r = \"0\" + r : t.hexPad === \"right\" ? r += \"0\" : Dt.throwArgumentError(\"hex data is odd-length\", \"value\", e));\n        const i = [];\n        for(let n = 0; n < r.length; n += 2)i.push(parseInt(r.substring(n, n + 2), 16));\n        return rr(new Uint8Array(i));\n    }\n    return ir(e) ? rr(new Uint8Array(e)) : Dt.throwArgumentError(\"invalid arrayify value\", \"value\", e);\n}\n_c17 = Ot;\nfunction E0(e) {\n    const t = e.map((n)=>Ot(n)), r = t.reduce((n, o)=>n + o.length, 0), i = new Uint8Array(r);\n    return t.reduce((n, o)=>(i.set(o, n), n + o.length), 0), rr(i);\n}\n_c18 = E0;\nfunction S0(e, t) {\n    e = Ot(e), e.length > t && Dt.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    const r = new Uint8Array(t);\n    return r.set(e, t - e.length), rr(r);\n}\n_c19 = S0;\nfunction Qt(e, t) {\n    return !(typeof e != \"string\" || !e.match(/^0x[0-9A-Fa-f]*$/) || t && e.length !== 2 + 2 * t);\n}\n_c20 = Qt;\nconst bi = \"0123456789abcdef\";\nfunction Kt(e, t) {\n    if (t || (t = {}), typeof e == \"number\") {\n        Dt.checkSafeUint53(e, \"invalid hexlify value\");\n        let r = \"\";\n        for(; e;)r = bi[e & 15] + r, e = Math.floor(e / 16);\n        return r.length ? (r.length % 2 && (r = \"0\" + r), \"0x\" + r) : \"0x00\";\n    }\n    if (typeof e == \"bigint\") return e = e.toString(16), e.length % 2 ? \"0x0\" + e : \"0x\" + e;\n    if (t.allowMissingPrefix && typeof e == \"string\" && e.substring(0, 2) !== \"0x\" && (e = \"0x\" + e), qn(e)) return e.toHexString();\n    if (Qt(e)) return e.length % 2 && (t.hexPad === \"left\" ? e = \"0x0\" + e.substring(2) : t.hexPad === \"right\" ? e += \"0\" : Dt.throwArgumentError(\"hex data is odd-length\", \"value\", e)), e.toLowerCase();\n    if (ir(e)) {\n        let r = \"0x\";\n        for(let i = 0; i < e.length; i++){\n            let n = e[i];\n            r += bi[(n & 240) >> 4] + bi[n & 15];\n        }\n        return r;\n    }\n    return Dt.throwArgumentError(\"invalid hexlify value\", \"value\", e);\n}\n_c21 = Kt;\nfunction N0(e) {\n    if (typeof e != \"string\") e = Kt(e);\n    else if (!Qt(e) || e.length % 2) return null;\n    return (e.length - 2) / 2;\n}\n_c22 = N0;\nfunction Hn(e, t, r) {\n    return typeof e != \"string\" ? e = Kt(e) : (!Qt(e) || e.length % 2) && Dt.throwArgumentError(\"invalid hexData\", \"value\", e), t = 2 + 2 * t, r != null ? \"0x\" + e.substring(t, 2 + 2 * r) : \"0x\" + e.substring(t);\n}\n_c23 = Hn;\nfunction oe(e, t) {\n    for(typeof e != \"string\" ? e = Kt(e) : Qt(e) || Dt.throwArgumentError(\"invalid hex string\", \"value\", e), e.length > 2 * t + 2 && Dt.throwArgumentError(\"value out of range\", \"value\", arguments[1]); e.length < 2 * t + 2;)e = \"0x0\" + e.substring(2);\n    return e;\n}\nfunction zn(e) {\n    const t = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0,\n        yParityAndS: \"0x\",\n        compact: \"0x\"\n    };\n    if (M0(e)) {\n        let r = Ot(e);\n        r.length === 64 ? (t.v = 27 + (r[32] >> 7), r[32] &= 127, t.r = Kt(r.slice(0, 32)), t.s = Kt(r.slice(32, 64))) : r.length === 65 ? (t.r = Kt(r.slice(0, 32)), t.s = Kt(r.slice(32, 64)), t.v = r[64]) : Dt.throwArgumentError(\"invalid signature string\", \"signature\", e), t.v < 27 && (t.v === 0 || t.v === 1 ? t.v += 27 : Dt.throwArgumentError(\"signature invalid v byte\", \"signature\", e)), t.recoveryParam = 1 - t.v % 2, t.recoveryParam && (r[32] |= 128), t._vs = Kt(r.slice(32, 64));\n    } else {\n        if (t.r = e.r, t.s = e.s, t.v = e.v, t.recoveryParam = e.recoveryParam, t._vs = e._vs, t._vs != null) {\n            const n = S0(Ot(t._vs), 32);\n            t._vs = Kt(n);\n            const o = n[0] >= 128 ? 1 : 0;\n            t.recoveryParam == null ? t.recoveryParam = o : t.recoveryParam !== o && Dt.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", e), n[0] &= 127;\n            const h = Kt(n);\n            t.s == null ? t.s = h : t.s !== h && Dt.throwArgumentError(\"signature v mismatch _vs\", \"signature\", e);\n        }\n        if (t.recoveryParam == null) t.v == null ? Dt.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", e) : t.v === 0 || t.v === 1 ? t.recoveryParam = t.v : t.recoveryParam = 1 - t.v % 2;\n        else if (t.v == null) t.v = 27 + t.recoveryParam;\n        else {\n            const n = t.v === 0 || t.v === 1 ? t.v : 1 - t.v % 2;\n            t.recoveryParam !== n && Dt.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", e);\n        }\n        t.r == null || !Qt(t.r) ? Dt.throwArgumentError(\"signature missing or invalid r\", \"signature\", e) : t.r = oe(t.r, 32), t.s == null || !Qt(t.s) ? Dt.throwArgumentError(\"signature missing or invalid s\", \"signature\", e) : t.s = oe(t.s, 32);\n        const r = Ot(t.s);\n        r[0] >= 128 && Dt.throwArgumentError(\"signature s out of range\", \"signature\", e), t.recoveryParam && (r[0] |= 128);\n        const i = Kt(r);\n        t._vs && (Qt(t._vs) || Dt.throwArgumentError(\"signature invalid _vs\", \"signature\", e), t._vs = oe(t._vs, 32)), t._vs == null ? t._vs = i : t._vs !== i && Dt.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", e);\n    }\n    return t.yParityAndS = t._vs, t.compact = t.r + t.yParityAndS.substring(2), t;\n}\nfunction yi(e) {\n    return \"0x\" + b0.keccak_256(Ot(e));\n}\nvar Ln = {\n    exports: {}\n}, I0 = {}, _0 = Object.freeze({\n    __proto__: null,\n    default: I0\n}), B0 = A0(_0);\n(function(e) {\n    (function(t, r) {\n        function i(A, f) {\n            if (!A) throw new Error(f || \"Assertion failed\");\n        }\n        function n(A, f) {\n            A.super_ = f;\n            var a = function() {};\n            a.prototype = f.prototype, A.prototype = new a, A.prototype.constructor = A;\n        }\n        function o(A, f, a) {\n            if (o.isBN(A)) return A;\n            this.negative = 0, this.words = null, this.length = 0, this.red = null, A !== null && ((f === \"le\" || f === \"be\") && (a = f, f = 10), this._init(A || 0, f || 10, a || \"be\"));\n        }\n        typeof t == \"object\" ? t.exports = o : r.BN = o, o.BN = o, o.wordSize = 26;\n        var h;\n        try {\n             true && typeof window.Buffer < \"u\" ? h = window.Buffer : h = B0.Buffer;\n        } catch (e) {}\n        o.isBN = function(f) {\n            return f instanceof o ? !0 : f !== null && typeof f == \"object\" && f.constructor.wordSize === o.wordSize && Array.isArray(f.words);\n        }, o.max = function(f, a) {\n            return f.cmp(a) > 0 ? f : a;\n        }, o.min = function(f, a) {\n            return f.cmp(a) < 0 ? f : a;\n        }, o.prototype._init = function(f, a, c) {\n            if (typeof f == \"number\") return this._initNumber(f, a, c);\n            if (typeof f == \"object\") return this._initArray(f, a, c);\n            a === \"hex\" && (a = 16), i(a === (a | 0) && a >= 2 && a <= 36), f = f.toString().replace(/\\s+/g, \"\");\n            var d = 0;\n            f[0] === \"-\" && (d++, this.negative = 1), d < f.length && (a === 16 ? this._parseHex(f, d, c) : (this._parseBase(f, a, d), c === \"le\" && this._initArray(this.toArray(), a, c)));\n        }, o.prototype._initNumber = function(f, a, c) {\n            f < 0 && (this.negative = 1, f = -f), f < 67108864 ? (this.words = [\n                f & 67108863\n            ], this.length = 1) : f < 4503599627370496 ? (this.words = [\n                f & 67108863,\n                f / 67108864 & 67108863\n            ], this.length = 2) : (i(f < 9007199254740992), this.words = [\n                f & 67108863,\n                f / 67108864 & 67108863,\n                1\n            ], this.length = 3), c === \"le\" && this._initArray(this.toArray(), a, c);\n        }, o.prototype._initArray = function(f, a, c) {\n            if (i(typeof f.length == \"number\"), f.length <= 0) return this.words = [\n                0\n            ], this.length = 1, this;\n            this.length = Math.ceil(f.length / 3), this.words = new Array(this.length);\n            for(var d = 0; d < this.length; d++)this.words[d] = 0;\n            var g, x, M = 0;\n            if (c === \"be\") for(d = f.length - 1, g = 0; d >= 0; d -= 3)x = f[d] | f[d - 1] << 8 | f[d - 2] << 16, this.words[g] |= x << M & 67108863, this.words[g + 1] = x >>> 26 - M & 67108863, M += 24, M >= 26 && (M -= 26, g++);\n            else if (c === \"le\") for(d = 0, g = 0; d < f.length; d += 3)x = f[d] | f[d + 1] << 8 | f[d + 2] << 16, this.words[g] |= x << M & 67108863, this.words[g + 1] = x >>> 26 - M & 67108863, M += 24, M >= 26 && (M -= 26, g++);\n            return this._strip();\n        };\n        function p(A, f) {\n            var a = A.charCodeAt(f);\n            if (a >= 48 && a <= 57) return a - 48;\n            if (a >= 65 && a <= 70) return a - 55;\n            if (a >= 97 && a <= 102) return a - 87;\n            i(!1, \"Invalid character in \" + A);\n        }\n        function b(A, f, a) {\n            var c = p(A, a);\n            return a - 1 >= f && (c |= p(A, a - 1) << 4), c;\n        }\n        o.prototype._parseHex = function(f, a, c) {\n            this.length = Math.ceil((f.length - a) / 6), this.words = new Array(this.length);\n            for(var d = 0; d < this.length; d++)this.words[d] = 0;\n            var g = 0, x = 0, M;\n            if (c === \"be\") for(d = f.length - 1; d >= a; d -= 2)M = b(f, a, d) << g, this.words[x] |= M & 67108863, g >= 18 ? (g -= 18, x += 1, this.words[x] |= M >>> 26) : g += 8;\n            else {\n                var l = f.length - a;\n                for(d = l % 2 === 0 ? a + 1 : a; d < f.length; d += 2)M = b(f, a, d) << g, this.words[x] |= M & 67108863, g >= 18 ? (g -= 18, x += 1, this.words[x] |= M >>> 26) : g += 8;\n            }\n            this._strip();\n        };\n        function m(A, f, a, c) {\n            for(var d = 0, g = 0, x = Math.min(A.length, a), M = f; M < x; M++){\n                var l = A.charCodeAt(M) - 48;\n                d *= c, l >= 49 ? g = l - 49 + 10 : l >= 17 ? g = l - 17 + 10 : g = l, i(l >= 0 && g < c, \"Invalid character\"), d += g;\n            }\n            return d;\n        }\n        o.prototype._parseBase = function(f, a, c) {\n            this.words = [\n                0\n            ], this.length = 1;\n            for(var d = 0, g = 1; g <= 67108863; g *= a)d++;\n            d--, g = g / a | 0;\n            for(var x = f.length - c, M = x % d, l = Math.min(x, x - M) + c, s = 0, v = c; v < l; v += d)s = m(f, v, v + d, a), this.imuln(g), this.words[0] + s < 67108864 ? this.words[0] += s : this._iaddn(s);\n            if (M !== 0) {\n                var k = 1;\n                for(s = m(f, v, f.length, a), v = 0; v < M; v++)k *= a;\n                this.imuln(k), this.words[0] + s < 67108864 ? this.words[0] += s : this._iaddn(s);\n            }\n            this._strip();\n        }, o.prototype.copy = function(f) {\n            f.words = new Array(this.length);\n            for(var a = 0; a < this.length; a++)f.words[a] = this.words[a];\n            f.length = this.length, f.negative = this.negative, f.red = this.red;\n        };\n        function w(A, f) {\n            A.words = f.words, A.length = f.length, A.negative = f.negative, A.red = f.red;\n        }\n        if (o.prototype._move = function(f) {\n            w(f, this);\n        }, o.prototype.clone = function() {\n            var f = new o(null);\n            return this.copy(f), f;\n        }, o.prototype._expand = function(f) {\n            for(; this.length < f;)this.words[this.length++] = 0;\n            return this;\n        }, o.prototype._strip = function() {\n            for(; this.length > 1 && this.words[this.length - 1] === 0;)this.length--;\n            return this._normSign();\n        }, o.prototype._normSign = function() {\n            return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;\n        }, typeof Symbol < \"u\" && typeof Symbol.for == \"function\") try {\n            o.prototype[Symbol.for(\"nodejs.util.inspect.custom\")] = y;\n        } catch (e) {\n            o.prototype.inspect = y;\n        }\n        else o.prototype.inspect = y;\n        function y() {\n            return (this.red ? \"<BN-R: \" : \"<BN: \") + this.toString(16) + \">\";\n        }\n        var S = [\n            \"\",\n            \"0\",\n            \"00\",\n            \"000\",\n            \"0000\",\n            \"00000\",\n            \"000000\",\n            \"0000000\",\n            \"00000000\",\n            \"000000000\",\n            \"0000000000\",\n            \"00000000000\",\n            \"000000000000\",\n            \"0000000000000\",\n            \"00000000000000\",\n            \"000000000000000\",\n            \"0000000000000000\",\n            \"00000000000000000\",\n            \"000000000000000000\",\n            \"0000000000000000000\",\n            \"00000000000000000000\",\n            \"000000000000000000000\",\n            \"0000000000000000000000\",\n            \"00000000000000000000000\",\n            \"000000000000000000000000\",\n            \"0000000000000000000000000\"\n        ], I = [\n            0,\n            0,\n            25,\n            16,\n            12,\n            11,\n            10,\n            9,\n            8,\n            8,\n            7,\n            7,\n            7,\n            7,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            6,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5,\n            5\n        ], N = [\n            0,\n            0,\n            33554432,\n            43046721,\n            16777216,\n            48828125,\n            60466176,\n            40353607,\n            16777216,\n            43046721,\n            1e7,\n            19487171,\n            35831808,\n            62748517,\n            7529536,\n            11390625,\n            16777216,\n            24137569,\n            34012224,\n            47045881,\n            64e6,\n            4084101,\n            5153632,\n            6436343,\n            7962624,\n            9765625,\n            11881376,\n            14348907,\n            17210368,\n            20511149,\n            243e5,\n            28629151,\n            33554432,\n            39135393,\n            45435424,\n            52521875,\n            60466176\n        ];\n        o.prototype.toString = function(f, a) {\n            f = f || 10, a = a | 0 || 1;\n            var c;\n            if (f === 16 || f === \"hex\") {\n                c = \"\";\n                for(var d = 0, g = 0, x = 0; x < this.length; x++){\n                    var M = this.words[x], l = ((M << d | g) & 16777215).toString(16);\n                    g = M >>> 24 - d & 16777215, d += 2, d >= 26 && (d -= 26, x--), g !== 0 || x !== this.length - 1 ? c = S[6 - l.length] + l + c : c = l + c;\n                }\n                for(g !== 0 && (c = g.toString(16) + c); c.length % a !== 0;)c = \"0\" + c;\n                return this.negative !== 0 && (c = \"-\" + c), c;\n            }\n            if (f === (f | 0) && f >= 2 && f <= 36) {\n                var s = I[f], v = N[f];\n                c = \"\";\n                var k = this.clone();\n                for(k.negative = 0; !k.isZero();){\n                    var u = k.modrn(v).toString(f);\n                    k = k.idivn(v), k.isZero() ? c = u + c : c = S[s - u.length] + u + c;\n                }\n                for(this.isZero() && (c = \"0\" + c); c.length % a !== 0;)c = \"0\" + c;\n                return this.negative !== 0 && (c = \"-\" + c), c;\n            }\n            i(!1, \"Base should be between 2 and 36\");\n        }, o.prototype.toNumber = function() {\n            var f = this.words[0];\n            return this.length === 2 ? f += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? f += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && i(!1, \"Number can only safely store up to 53 bits\"), this.negative !== 0 ? -f : f;\n        }, o.prototype.toJSON = function() {\n            return this.toString(16, 2);\n        }, h && (o.prototype.toBuffer = function(f, a) {\n            return this.toArrayLike(h, f, a);\n        }), o.prototype.toArray = function(f, a) {\n            return this.toArrayLike(Array, f, a);\n        };\n        var C = function(f, a) {\n            return f.allocUnsafe ? f.allocUnsafe(a) : new f(a);\n        };\n        o.prototype.toArrayLike = function(f, a, c) {\n            this._strip();\n            var d = this.byteLength(), g = c || Math.max(1, d);\n            i(d <= g, \"byte array longer than desired length\"), i(g > 0, \"Requested array length <= 0\");\n            var x = C(f, g), M = a === \"le\" ? \"LE\" : \"BE\";\n            return this[\"_toArrayLike\" + M](x, d), x;\n        }, o.prototype._toArrayLikeLE = function(f, a) {\n            for(var c = 0, d = 0, g = 0, x = 0; g < this.length; g++){\n                var M = this.words[g] << x | d;\n                f[c++] = M & 255, c < f.length && (f[c++] = M >> 8 & 255), c < f.length && (f[c++] = M >> 16 & 255), x === 6 ? (c < f.length && (f[c++] = M >> 24 & 255), d = 0, x = 0) : (d = M >>> 24, x += 2);\n            }\n            if (c < f.length) for(f[c++] = d; c < f.length;)f[c++] = 0;\n        }, o.prototype._toArrayLikeBE = function(f, a) {\n            for(var c = f.length - 1, d = 0, g = 0, x = 0; g < this.length; g++){\n                var M = this.words[g] << x | d;\n                f[c--] = M & 255, c >= 0 && (f[c--] = M >> 8 & 255), c >= 0 && (f[c--] = M >> 16 & 255), x === 6 ? (c >= 0 && (f[c--] = M >> 24 & 255), d = 0, x = 0) : (d = M >>> 24, x += 2);\n            }\n            if (c >= 0) for(f[c--] = d; c >= 0;)f[c--] = 0;\n        }, Math.clz32 ? o.prototype._countBits = function(f) {\n            return 32 - Math.clz32(f);\n        } : o.prototype._countBits = function(f) {\n            var a = f, c = 0;\n            return a >= 4096 && (c += 13, a >>>= 13), a >= 64 && (c += 7, a >>>= 7), a >= 8 && (c += 4, a >>>= 4), a >= 2 && (c += 2, a >>>= 2), c + a;\n        }, o.prototype._zeroBits = function(f) {\n            if (f === 0) return 26;\n            var a = f, c = 0;\n            return a & 8191 || (c += 13, a >>>= 13), a & 127 || (c += 7, a >>>= 7), a & 15 || (c += 4, a >>>= 4), a & 3 || (c += 2, a >>>= 2), a & 1 || c++, c;\n        }, o.prototype.bitLength = function() {\n            var f = this.words[this.length - 1], a = this._countBits(f);\n            return (this.length - 1) * 26 + a;\n        };\n        function F(A) {\n            for(var f = new Array(A.bitLength()), a = 0; a < f.length; a++){\n                var c = a / 26 | 0, d = a % 26;\n                f[a] = A.words[c] >>> d & 1;\n            }\n            return f;\n        }\n        o.prototype.zeroBits = function() {\n            if (this.isZero()) return 0;\n            for(var f = 0, a = 0; a < this.length; a++){\n                var c = this._zeroBits(this.words[a]);\n                if (f += c, c !== 26) break;\n            }\n            return f;\n        }, o.prototype.byteLength = function() {\n            return Math.ceil(this.bitLength() / 8);\n        }, o.prototype.toTwos = function(f) {\n            return this.negative !== 0 ? this.abs().inotn(f).iaddn(1) : this.clone();\n        }, o.prototype.fromTwos = function(f) {\n            return this.testn(f - 1) ? this.notn(f).iaddn(1).ineg() : this.clone();\n        }, o.prototype.isNeg = function() {\n            return this.negative !== 0;\n        }, o.prototype.neg = function() {\n            return this.clone().ineg();\n        }, o.prototype.ineg = function() {\n            return this.isZero() || (this.negative ^= 1), this;\n        }, o.prototype.iuor = function(f) {\n            for(; this.length < f.length;)this.words[this.length++] = 0;\n            for(var a = 0; a < f.length; a++)this.words[a] = this.words[a] | f.words[a];\n            return this._strip();\n        }, o.prototype.ior = function(f) {\n            return i((this.negative | f.negative) === 0), this.iuor(f);\n        }, o.prototype.or = function(f) {\n            return this.length > f.length ? this.clone().ior(f) : f.clone().ior(this);\n        }, o.prototype.uor = function(f) {\n            return this.length > f.length ? this.clone().iuor(f) : f.clone().iuor(this);\n        }, o.prototype.iuand = function(f) {\n            var a;\n            this.length > f.length ? a = f : a = this;\n            for(var c = 0; c < a.length; c++)this.words[c] = this.words[c] & f.words[c];\n            return this.length = a.length, this._strip();\n        }, o.prototype.iand = function(f) {\n            return i((this.negative | f.negative) === 0), this.iuand(f);\n        }, o.prototype.and = function(f) {\n            return this.length > f.length ? this.clone().iand(f) : f.clone().iand(this);\n        }, o.prototype.uand = function(f) {\n            return this.length > f.length ? this.clone().iuand(f) : f.clone().iuand(this);\n        }, o.prototype.iuxor = function(f) {\n            var a, c;\n            this.length > f.length ? (a = this, c = f) : (a = f, c = this);\n            for(var d = 0; d < c.length; d++)this.words[d] = a.words[d] ^ c.words[d];\n            if (this !== a) for(; d < a.length; d++)this.words[d] = a.words[d];\n            return this.length = a.length, this._strip();\n        }, o.prototype.ixor = function(f) {\n            return i((this.negative | f.negative) === 0), this.iuxor(f);\n        }, o.prototype.xor = function(f) {\n            return this.length > f.length ? this.clone().ixor(f) : f.clone().ixor(this);\n        }, o.prototype.uxor = function(f) {\n            return this.length > f.length ? this.clone().iuxor(f) : f.clone().iuxor(this);\n        }, o.prototype.inotn = function(f) {\n            i(typeof f == \"number\" && f >= 0);\n            var a = Math.ceil(f / 26) | 0, c = f % 26;\n            this._expand(a), c > 0 && a--;\n            for(var d = 0; d < a; d++)this.words[d] = ~this.words[d] & 67108863;\n            return c > 0 && (this.words[d] = ~this.words[d] & 67108863 >> 26 - c), this._strip();\n        }, o.prototype.notn = function(f) {\n            return this.clone().inotn(f);\n        }, o.prototype.setn = function(f, a) {\n            i(typeof f == \"number\" && f >= 0);\n            var c = f / 26 | 0, d = f % 26;\n            return this._expand(c + 1), a ? this.words[c] = this.words[c] | 1 << d : this.words[c] = this.words[c] & ~(1 << d), this._strip();\n        }, o.prototype.iadd = function(f) {\n            var a;\n            if (this.negative !== 0 && f.negative === 0) return this.negative = 0, a = this.isub(f), this.negative ^= 1, this._normSign();\n            if (this.negative === 0 && f.negative !== 0) return f.negative = 0, a = this.isub(f), f.negative = 1, a._normSign();\n            var c, d;\n            this.length > f.length ? (c = this, d = f) : (c = f, d = this);\n            for(var g = 0, x = 0; x < d.length; x++)a = (c.words[x] | 0) + (d.words[x] | 0) + g, this.words[x] = a & 67108863, g = a >>> 26;\n            for(; g !== 0 && x < c.length; x++)a = (c.words[x] | 0) + g, this.words[x] = a & 67108863, g = a >>> 26;\n            if (this.length = c.length, g !== 0) this.words[this.length] = g, this.length++;\n            else if (c !== this) for(; x < c.length; x++)this.words[x] = c.words[x];\n            return this;\n        }, o.prototype.add = function(f) {\n            var a;\n            return f.negative !== 0 && this.negative === 0 ? (f.negative = 0, a = this.sub(f), f.negative ^= 1, a) : f.negative === 0 && this.negative !== 0 ? (this.negative = 0, a = f.sub(this), this.negative = 1, a) : this.length > f.length ? this.clone().iadd(f) : f.clone().iadd(this);\n        }, o.prototype.isub = function(f) {\n            if (f.negative !== 0) {\n                f.negative = 0;\n                var a = this.iadd(f);\n                return f.negative = 1, a._normSign();\n            } else if (this.negative !== 0) return this.negative = 0, this.iadd(f), this.negative = 1, this._normSign();\n            var c = this.cmp(f);\n            if (c === 0) return this.negative = 0, this.length = 1, this.words[0] = 0, this;\n            var d, g;\n            c > 0 ? (d = this, g = f) : (d = f, g = this);\n            for(var x = 0, M = 0; M < g.length; M++)a = (d.words[M] | 0) - (g.words[M] | 0) + x, x = a >> 26, this.words[M] = a & 67108863;\n            for(; x !== 0 && M < d.length; M++)a = (d.words[M] | 0) + x, x = a >> 26, this.words[M] = a & 67108863;\n            if (x === 0 && M < d.length && d !== this) for(; M < d.length; M++)this.words[M] = d.words[M];\n            return this.length = Math.max(this.length, M), d !== this && (this.negative = 1), this._strip();\n        }, o.prototype.sub = function(f) {\n            return this.clone().isub(f);\n        };\n        function U(A, f, a) {\n            a.negative = f.negative ^ A.negative;\n            var c = A.length + f.length | 0;\n            a.length = c, c = c - 1 | 0;\n            var d = A.words[0] | 0, g = f.words[0] | 0, x = d * g, M = x & 67108863, l = x / 67108864 | 0;\n            a.words[0] = M;\n            for(var s = 1; s < c; s++){\n                for(var v = l >>> 26, k = l & 67108863, u = Math.min(s, f.length - 1), E = Math.max(0, s - A.length + 1); E <= u; E++){\n                    var _ = s - E | 0;\n                    d = A.words[_] | 0, g = f.words[E] | 0, x = d * g + k, v += x / 67108864 | 0, k = x & 67108863;\n                }\n                a.words[s] = k | 0, l = v | 0;\n            }\n            return l !== 0 ? a.words[s] = l | 0 : a.length--, a._strip();\n        }\n        var J = function(f, a, c) {\n            var d = f.words, g = a.words, x = c.words, M = 0, l, s, v, k = d[0] | 0, u = k & 8191, E = k >>> 13, _ = d[1] | 0, B = _ & 8191, R = _ >>> 13, T = d[2] | 0, P = T & 8191, O = T >>> 13, Ct = d[3] | 0, D = Ct & 8191, q = Ct >>> 13, De = d[4] | 0, X = De & 8191, Z = De >>> 13, Fe = d[5] | 0, $ = Fe & 8191, tt = Fe >>> 13, Te = d[6] | 0, et = Te & 8191, rt = Te >>> 13, Ue = d[7] | 0, it = Ue & 8191, nt = Ue >>> 13, ke = d[8] | 0, ft = ke & 8191, ot = ke >>> 13, qe = d[9] | 0, st = qe & 8191, at = qe >>> 13, Ke = g[0] | 0, ut = Ke & 8191, ht = Ke >>> 13, He = g[1] | 0, ct = He & 8191, lt = He >>> 13, ze = g[2] | 0, dt = ze & 8191, pt = ze >>> 13, Le = g[3] | 0, vt = Le & 8191, mt = Le >>> 13, je = g[4] | 0, gt = je & 8191, At = je >>> 13, Qe = g[5] | 0, bt = Qe & 8191, yt = Qe >>> 13, Je = g[6] | 0, wt = Je & 8191, xt = Je >>> 13, Ge = g[7] | 0, Mt = Ge & 8191, Et = Ge >>> 13, Ye = g[8] | 0, St = Ye & 8191, Nt = Ye >>> 13, Ve = g[9] | 0, It = Ve & 8191, _t = Ve >>> 13;\n            c.negative = f.negative ^ a.negative, c.length = 19, l = Math.imul(u, ut), s = Math.imul(u, ht), s = s + Math.imul(E, ut) | 0, v = Math.imul(E, ht);\n            var Me = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (Me >>> 26) | 0, Me &= 67108863, l = Math.imul(B, ut), s = Math.imul(B, ht), s = s + Math.imul(R, ut) | 0, v = Math.imul(R, ht), l = l + Math.imul(u, ct) | 0, s = s + Math.imul(u, lt) | 0, s = s + Math.imul(E, ct) | 0, v = v + Math.imul(E, lt) | 0;\n            var Ee = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (Ee >>> 26) | 0, Ee &= 67108863, l = Math.imul(P, ut), s = Math.imul(P, ht), s = s + Math.imul(O, ut) | 0, v = Math.imul(O, ht), l = l + Math.imul(B, ct) | 0, s = s + Math.imul(B, lt) | 0, s = s + Math.imul(R, ct) | 0, v = v + Math.imul(R, lt) | 0, l = l + Math.imul(u, dt) | 0, s = s + Math.imul(u, pt) | 0, s = s + Math.imul(E, dt) | 0, v = v + Math.imul(E, pt) | 0;\n            var Se = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (Se >>> 26) | 0, Se &= 67108863, l = Math.imul(D, ut), s = Math.imul(D, ht), s = s + Math.imul(q, ut) | 0, v = Math.imul(q, ht), l = l + Math.imul(P, ct) | 0, s = s + Math.imul(P, lt) | 0, s = s + Math.imul(O, ct) | 0, v = v + Math.imul(O, lt) | 0, l = l + Math.imul(B, dt) | 0, s = s + Math.imul(B, pt) | 0, s = s + Math.imul(R, dt) | 0, v = v + Math.imul(R, pt) | 0, l = l + Math.imul(u, vt) | 0, s = s + Math.imul(u, mt) | 0, s = s + Math.imul(E, vt) | 0, v = v + Math.imul(E, mt) | 0;\n            var Ne = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (Ne >>> 26) | 0, Ne &= 67108863, l = Math.imul(X, ut), s = Math.imul(X, ht), s = s + Math.imul(Z, ut) | 0, v = Math.imul(Z, ht), l = l + Math.imul(D, ct) | 0, s = s + Math.imul(D, lt) | 0, s = s + Math.imul(q, ct) | 0, v = v + Math.imul(q, lt) | 0, l = l + Math.imul(P, dt) | 0, s = s + Math.imul(P, pt) | 0, s = s + Math.imul(O, dt) | 0, v = v + Math.imul(O, pt) | 0, l = l + Math.imul(B, vt) | 0, s = s + Math.imul(B, mt) | 0, s = s + Math.imul(R, vt) | 0, v = v + Math.imul(R, mt) | 0, l = l + Math.imul(u, gt) | 0, s = s + Math.imul(u, At) | 0, s = s + Math.imul(E, gt) | 0, v = v + Math.imul(E, At) | 0;\n            var Ie = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (Ie >>> 26) | 0, Ie &= 67108863, l = Math.imul($, ut), s = Math.imul($, ht), s = s + Math.imul(tt, ut) | 0, v = Math.imul(tt, ht), l = l + Math.imul(X, ct) | 0, s = s + Math.imul(X, lt) | 0, s = s + Math.imul(Z, ct) | 0, v = v + Math.imul(Z, lt) | 0, l = l + Math.imul(D, dt) | 0, s = s + Math.imul(D, pt) | 0, s = s + Math.imul(q, dt) | 0, v = v + Math.imul(q, pt) | 0, l = l + Math.imul(P, vt) | 0, s = s + Math.imul(P, mt) | 0, s = s + Math.imul(O, vt) | 0, v = v + Math.imul(O, mt) | 0, l = l + Math.imul(B, gt) | 0, s = s + Math.imul(B, At) | 0, s = s + Math.imul(R, gt) | 0, v = v + Math.imul(R, At) | 0, l = l + Math.imul(u, bt) | 0, s = s + Math.imul(u, yt) | 0, s = s + Math.imul(E, bt) | 0, v = v + Math.imul(E, yt) | 0;\n            var Wr = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (Wr >>> 26) | 0, Wr &= 67108863, l = Math.imul(et, ut), s = Math.imul(et, ht), s = s + Math.imul(rt, ut) | 0, v = Math.imul(rt, ht), l = l + Math.imul($, ct) | 0, s = s + Math.imul($, lt) | 0, s = s + Math.imul(tt, ct) | 0, v = v + Math.imul(tt, lt) | 0, l = l + Math.imul(X, dt) | 0, s = s + Math.imul(X, pt) | 0, s = s + Math.imul(Z, dt) | 0, v = v + Math.imul(Z, pt) | 0, l = l + Math.imul(D, vt) | 0, s = s + Math.imul(D, mt) | 0, s = s + Math.imul(q, vt) | 0, v = v + Math.imul(q, mt) | 0, l = l + Math.imul(P, gt) | 0, s = s + Math.imul(P, At) | 0, s = s + Math.imul(O, gt) | 0, v = v + Math.imul(O, At) | 0, l = l + Math.imul(B, bt) | 0, s = s + Math.imul(B, yt) | 0, s = s + Math.imul(R, bt) | 0, v = v + Math.imul(R, yt) | 0, l = l + Math.imul(u, wt) | 0, s = s + Math.imul(u, xt) | 0, s = s + Math.imul(E, wt) | 0, v = v + Math.imul(E, xt) | 0;\n            var Xr = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (Xr >>> 26) | 0, Xr &= 67108863, l = Math.imul(it, ut), s = Math.imul(it, ht), s = s + Math.imul(nt, ut) | 0, v = Math.imul(nt, ht), l = l + Math.imul(et, ct) | 0, s = s + Math.imul(et, lt) | 0, s = s + Math.imul(rt, ct) | 0, v = v + Math.imul(rt, lt) | 0, l = l + Math.imul($, dt) | 0, s = s + Math.imul($, pt) | 0, s = s + Math.imul(tt, dt) | 0, v = v + Math.imul(tt, pt) | 0, l = l + Math.imul(X, vt) | 0, s = s + Math.imul(X, mt) | 0, s = s + Math.imul(Z, vt) | 0, v = v + Math.imul(Z, mt) | 0, l = l + Math.imul(D, gt) | 0, s = s + Math.imul(D, At) | 0, s = s + Math.imul(q, gt) | 0, v = v + Math.imul(q, At) | 0, l = l + Math.imul(P, bt) | 0, s = s + Math.imul(P, yt) | 0, s = s + Math.imul(O, bt) | 0, v = v + Math.imul(O, yt) | 0, l = l + Math.imul(B, wt) | 0, s = s + Math.imul(B, xt) | 0, s = s + Math.imul(R, wt) | 0, v = v + Math.imul(R, xt) | 0, l = l + Math.imul(u, Mt) | 0, s = s + Math.imul(u, Et) | 0, s = s + Math.imul(E, Mt) | 0, v = v + Math.imul(E, Et) | 0;\n            var Zr = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (Zr >>> 26) | 0, Zr &= 67108863, l = Math.imul(ft, ut), s = Math.imul(ft, ht), s = s + Math.imul(ot, ut) | 0, v = Math.imul(ot, ht), l = l + Math.imul(it, ct) | 0, s = s + Math.imul(it, lt) | 0, s = s + Math.imul(nt, ct) | 0, v = v + Math.imul(nt, lt) | 0, l = l + Math.imul(et, dt) | 0, s = s + Math.imul(et, pt) | 0, s = s + Math.imul(rt, dt) | 0, v = v + Math.imul(rt, pt) | 0, l = l + Math.imul($, vt) | 0, s = s + Math.imul($, mt) | 0, s = s + Math.imul(tt, vt) | 0, v = v + Math.imul(tt, mt) | 0, l = l + Math.imul(X, gt) | 0, s = s + Math.imul(X, At) | 0, s = s + Math.imul(Z, gt) | 0, v = v + Math.imul(Z, At) | 0, l = l + Math.imul(D, bt) | 0, s = s + Math.imul(D, yt) | 0, s = s + Math.imul(q, bt) | 0, v = v + Math.imul(q, yt) | 0, l = l + Math.imul(P, wt) | 0, s = s + Math.imul(P, xt) | 0, s = s + Math.imul(O, wt) | 0, v = v + Math.imul(O, xt) | 0, l = l + Math.imul(B, Mt) | 0, s = s + Math.imul(B, Et) | 0, s = s + Math.imul(R, Mt) | 0, v = v + Math.imul(R, Et) | 0, l = l + Math.imul(u, St) | 0, s = s + Math.imul(u, Nt) | 0, s = s + Math.imul(E, St) | 0, v = v + Math.imul(E, Nt) | 0;\n            var $r = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + ($r >>> 26) | 0, $r &= 67108863, l = Math.imul(st, ut), s = Math.imul(st, ht), s = s + Math.imul(at, ut) | 0, v = Math.imul(at, ht), l = l + Math.imul(ft, ct) | 0, s = s + Math.imul(ft, lt) | 0, s = s + Math.imul(ot, ct) | 0, v = v + Math.imul(ot, lt) | 0, l = l + Math.imul(it, dt) | 0, s = s + Math.imul(it, pt) | 0, s = s + Math.imul(nt, dt) | 0, v = v + Math.imul(nt, pt) | 0, l = l + Math.imul(et, vt) | 0, s = s + Math.imul(et, mt) | 0, s = s + Math.imul(rt, vt) | 0, v = v + Math.imul(rt, mt) | 0, l = l + Math.imul($, gt) | 0, s = s + Math.imul($, At) | 0, s = s + Math.imul(tt, gt) | 0, v = v + Math.imul(tt, At) | 0, l = l + Math.imul(X, bt) | 0, s = s + Math.imul(X, yt) | 0, s = s + Math.imul(Z, bt) | 0, v = v + Math.imul(Z, yt) | 0, l = l + Math.imul(D, wt) | 0, s = s + Math.imul(D, xt) | 0, s = s + Math.imul(q, wt) | 0, v = v + Math.imul(q, xt) | 0, l = l + Math.imul(P, Mt) | 0, s = s + Math.imul(P, Et) | 0, s = s + Math.imul(O, Mt) | 0, v = v + Math.imul(O, Et) | 0, l = l + Math.imul(B, St) | 0, s = s + Math.imul(B, Nt) | 0, s = s + Math.imul(R, St) | 0, v = v + Math.imul(R, Nt) | 0, l = l + Math.imul(u, It) | 0, s = s + Math.imul(u, _t) | 0, s = s + Math.imul(E, It) | 0, v = v + Math.imul(E, _t) | 0;\n            var ti = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (ti >>> 26) | 0, ti &= 67108863, l = Math.imul(st, ct), s = Math.imul(st, lt), s = s + Math.imul(at, ct) | 0, v = Math.imul(at, lt), l = l + Math.imul(ft, dt) | 0, s = s + Math.imul(ft, pt) | 0, s = s + Math.imul(ot, dt) | 0, v = v + Math.imul(ot, pt) | 0, l = l + Math.imul(it, vt) | 0, s = s + Math.imul(it, mt) | 0, s = s + Math.imul(nt, vt) | 0, v = v + Math.imul(nt, mt) | 0, l = l + Math.imul(et, gt) | 0, s = s + Math.imul(et, At) | 0, s = s + Math.imul(rt, gt) | 0, v = v + Math.imul(rt, At) | 0, l = l + Math.imul($, bt) | 0, s = s + Math.imul($, yt) | 0, s = s + Math.imul(tt, bt) | 0, v = v + Math.imul(tt, yt) | 0, l = l + Math.imul(X, wt) | 0, s = s + Math.imul(X, xt) | 0, s = s + Math.imul(Z, wt) | 0, v = v + Math.imul(Z, xt) | 0, l = l + Math.imul(D, Mt) | 0, s = s + Math.imul(D, Et) | 0, s = s + Math.imul(q, Mt) | 0, v = v + Math.imul(q, Et) | 0, l = l + Math.imul(P, St) | 0, s = s + Math.imul(P, Nt) | 0, s = s + Math.imul(O, St) | 0, v = v + Math.imul(O, Nt) | 0, l = l + Math.imul(B, It) | 0, s = s + Math.imul(B, _t) | 0, s = s + Math.imul(R, It) | 0, v = v + Math.imul(R, _t) | 0;\n            var ei = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (ei >>> 26) | 0, ei &= 67108863, l = Math.imul(st, dt), s = Math.imul(st, pt), s = s + Math.imul(at, dt) | 0, v = Math.imul(at, pt), l = l + Math.imul(ft, vt) | 0, s = s + Math.imul(ft, mt) | 0, s = s + Math.imul(ot, vt) | 0, v = v + Math.imul(ot, mt) | 0, l = l + Math.imul(it, gt) | 0, s = s + Math.imul(it, At) | 0, s = s + Math.imul(nt, gt) | 0, v = v + Math.imul(nt, At) | 0, l = l + Math.imul(et, bt) | 0, s = s + Math.imul(et, yt) | 0, s = s + Math.imul(rt, bt) | 0, v = v + Math.imul(rt, yt) | 0, l = l + Math.imul($, wt) | 0, s = s + Math.imul($, xt) | 0, s = s + Math.imul(tt, wt) | 0, v = v + Math.imul(tt, xt) | 0, l = l + Math.imul(X, Mt) | 0, s = s + Math.imul(X, Et) | 0, s = s + Math.imul(Z, Mt) | 0, v = v + Math.imul(Z, Et) | 0, l = l + Math.imul(D, St) | 0, s = s + Math.imul(D, Nt) | 0, s = s + Math.imul(q, St) | 0, v = v + Math.imul(q, Nt) | 0, l = l + Math.imul(P, It) | 0, s = s + Math.imul(P, _t) | 0, s = s + Math.imul(O, It) | 0, v = v + Math.imul(O, _t) | 0;\n            var ri = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (ri >>> 26) | 0, ri &= 67108863, l = Math.imul(st, vt), s = Math.imul(st, mt), s = s + Math.imul(at, vt) | 0, v = Math.imul(at, mt), l = l + Math.imul(ft, gt) | 0, s = s + Math.imul(ft, At) | 0, s = s + Math.imul(ot, gt) | 0, v = v + Math.imul(ot, At) | 0, l = l + Math.imul(it, bt) | 0, s = s + Math.imul(it, yt) | 0, s = s + Math.imul(nt, bt) | 0, v = v + Math.imul(nt, yt) | 0, l = l + Math.imul(et, wt) | 0, s = s + Math.imul(et, xt) | 0, s = s + Math.imul(rt, wt) | 0, v = v + Math.imul(rt, xt) | 0, l = l + Math.imul($, Mt) | 0, s = s + Math.imul($, Et) | 0, s = s + Math.imul(tt, Mt) | 0, v = v + Math.imul(tt, Et) | 0, l = l + Math.imul(X, St) | 0, s = s + Math.imul(X, Nt) | 0, s = s + Math.imul(Z, St) | 0, v = v + Math.imul(Z, Nt) | 0, l = l + Math.imul(D, It) | 0, s = s + Math.imul(D, _t) | 0, s = s + Math.imul(q, It) | 0, v = v + Math.imul(q, _t) | 0;\n            var ii = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (ii >>> 26) | 0, ii &= 67108863, l = Math.imul(st, gt), s = Math.imul(st, At), s = s + Math.imul(at, gt) | 0, v = Math.imul(at, At), l = l + Math.imul(ft, bt) | 0, s = s + Math.imul(ft, yt) | 0, s = s + Math.imul(ot, bt) | 0, v = v + Math.imul(ot, yt) | 0, l = l + Math.imul(it, wt) | 0, s = s + Math.imul(it, xt) | 0, s = s + Math.imul(nt, wt) | 0, v = v + Math.imul(nt, xt) | 0, l = l + Math.imul(et, Mt) | 0, s = s + Math.imul(et, Et) | 0, s = s + Math.imul(rt, Mt) | 0, v = v + Math.imul(rt, Et) | 0, l = l + Math.imul($, St) | 0, s = s + Math.imul($, Nt) | 0, s = s + Math.imul(tt, St) | 0, v = v + Math.imul(tt, Nt) | 0, l = l + Math.imul(X, It) | 0, s = s + Math.imul(X, _t) | 0, s = s + Math.imul(Z, It) | 0, v = v + Math.imul(Z, _t) | 0;\n            var ni = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (ni >>> 26) | 0, ni &= 67108863, l = Math.imul(st, bt), s = Math.imul(st, yt), s = s + Math.imul(at, bt) | 0, v = Math.imul(at, yt), l = l + Math.imul(ft, wt) | 0, s = s + Math.imul(ft, xt) | 0, s = s + Math.imul(ot, wt) | 0, v = v + Math.imul(ot, xt) | 0, l = l + Math.imul(it, Mt) | 0, s = s + Math.imul(it, Et) | 0, s = s + Math.imul(nt, Mt) | 0, v = v + Math.imul(nt, Et) | 0, l = l + Math.imul(et, St) | 0, s = s + Math.imul(et, Nt) | 0, s = s + Math.imul(rt, St) | 0, v = v + Math.imul(rt, Nt) | 0, l = l + Math.imul($, It) | 0, s = s + Math.imul($, _t) | 0, s = s + Math.imul(tt, It) | 0, v = v + Math.imul(tt, _t) | 0;\n            var fi = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (fi >>> 26) | 0, fi &= 67108863, l = Math.imul(st, wt), s = Math.imul(st, xt), s = s + Math.imul(at, wt) | 0, v = Math.imul(at, xt), l = l + Math.imul(ft, Mt) | 0, s = s + Math.imul(ft, Et) | 0, s = s + Math.imul(ot, Mt) | 0, v = v + Math.imul(ot, Et) | 0, l = l + Math.imul(it, St) | 0, s = s + Math.imul(it, Nt) | 0, s = s + Math.imul(nt, St) | 0, v = v + Math.imul(nt, Nt) | 0, l = l + Math.imul(et, It) | 0, s = s + Math.imul(et, _t) | 0, s = s + Math.imul(rt, It) | 0, v = v + Math.imul(rt, _t) | 0;\n            var oi = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (oi >>> 26) | 0, oi &= 67108863, l = Math.imul(st, Mt), s = Math.imul(st, Et), s = s + Math.imul(at, Mt) | 0, v = Math.imul(at, Et), l = l + Math.imul(ft, St) | 0, s = s + Math.imul(ft, Nt) | 0, s = s + Math.imul(ot, St) | 0, v = v + Math.imul(ot, Nt) | 0, l = l + Math.imul(it, It) | 0, s = s + Math.imul(it, _t) | 0, s = s + Math.imul(nt, It) | 0, v = v + Math.imul(nt, _t) | 0;\n            var si = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (si >>> 26) | 0, si &= 67108863, l = Math.imul(st, St), s = Math.imul(st, Nt), s = s + Math.imul(at, St) | 0, v = Math.imul(at, Nt), l = l + Math.imul(ft, It) | 0, s = s + Math.imul(ft, _t) | 0, s = s + Math.imul(ot, It) | 0, v = v + Math.imul(ot, _t) | 0;\n            var ai = (M + l | 0) + ((s & 8191) << 13) | 0;\n            M = (v + (s >>> 13) | 0) + (ai >>> 26) | 0, ai &= 67108863, l = Math.imul(st, It), s = Math.imul(st, _t), s = s + Math.imul(at, It) | 0, v = Math.imul(at, _t);\n            var ui = (M + l | 0) + ((s & 8191) << 13) | 0;\n            return M = (v + (s >>> 13) | 0) + (ui >>> 26) | 0, ui &= 67108863, x[0] = Me, x[1] = Ee, x[2] = Se, x[3] = Ne, x[4] = Ie, x[5] = Wr, x[6] = Xr, x[7] = Zr, x[8] = $r, x[9] = ti, x[10] = ei, x[11] = ri, x[12] = ii, x[13] = ni, x[14] = fi, x[15] = oi, x[16] = si, x[17] = ai, x[18] = ui, M !== 0 && (x[19] = M, c.length++), c;\n        };\n        Math.imul || (J = U);\n        function Bt(A, f, a) {\n            a.negative = f.negative ^ A.negative, a.length = A.length + f.length;\n            for(var c = 0, d = 0, g = 0; g < a.length - 1; g++){\n                var x = d;\n                d = 0;\n                for(var M = c & 67108863, l = Math.min(g, f.length - 1), s = Math.max(0, g - A.length + 1); s <= l; s++){\n                    var v = g - s, k = A.words[v] | 0, u = f.words[s] | 0, E = k * u, _ = E & 67108863;\n                    x = x + (E / 67108864 | 0) | 0, _ = _ + M | 0, M = _ & 67108863, x = x + (_ >>> 26) | 0, d += x >>> 26, x &= 67108863;\n                }\n                a.words[g] = M, c = x, x = d;\n            }\n            return c !== 0 ? a.words[g] = c : a.length--, a._strip();\n        }\n        function G(A, f, a) {\n            return Bt(A, f, a);\n        }\n        o.prototype.mulTo = function(f, a) {\n            var c, d = this.length + f.length;\n            return this.length === 10 && f.length === 10 ? c = J(this, f, a) : d < 63 ? c = U(this, f, a) : d < 1024 ? c = Bt(this, f, a) : c = G(this, f, a), c;\n        }, o.prototype.mul = function(f) {\n            var a = new o(null);\n            return a.words = new Array(this.length + f.length), this.mulTo(f, a);\n        }, o.prototype.mulf = function(f) {\n            var a = new o(null);\n            return a.words = new Array(this.length + f.length), G(this, f, a);\n        }, o.prototype.imul = function(f) {\n            return this.clone().mulTo(f, this);\n        }, o.prototype.imuln = function(f) {\n            var a = f < 0;\n            a && (f = -f), i(typeof f == \"number\"), i(f < 67108864);\n            for(var c = 0, d = 0; d < this.length; d++){\n                var g = (this.words[d] | 0) * f, x = (g & 67108863) + (c & 67108863);\n                c >>= 26, c += g / 67108864 | 0, c += x >>> 26, this.words[d] = x & 67108863;\n            }\n            return c !== 0 && (this.words[d] = c, this.length++), a ? this.ineg() : this;\n        }, o.prototype.muln = function(f) {\n            return this.clone().imuln(f);\n        }, o.prototype.sqr = function() {\n            return this.mul(this);\n        }, o.prototype.isqr = function() {\n            return this.imul(this.clone());\n        }, o.prototype.pow = function(f) {\n            var a = F(f);\n            if (a.length === 0) return new o(1);\n            for(var c = this, d = 0; d < a.length && a[d] === 0; d++, c = c.sqr());\n            if (++d < a.length) for(var g = c.sqr(); d < a.length; d++, g = g.sqr())a[d] !== 0 && (c = c.mul(g));\n            return c;\n        }, o.prototype.iushln = function(f) {\n            i(typeof f == \"number\" && f >= 0);\n            var a = f % 26, c = (f - a) / 26, d = 67108863 >>> 26 - a << 26 - a, g;\n            if (a !== 0) {\n                var x = 0;\n                for(g = 0; g < this.length; g++){\n                    var M = this.words[g] & d, l = (this.words[g] | 0) - M << a;\n                    this.words[g] = l | x, x = M >>> 26 - a;\n                }\n                x && (this.words[g] = x, this.length++);\n            }\n            if (c !== 0) {\n                for(g = this.length - 1; g >= 0; g--)this.words[g + c] = this.words[g];\n                for(g = 0; g < c; g++)this.words[g] = 0;\n                this.length += c;\n            }\n            return this._strip();\n        }, o.prototype.ishln = function(f) {\n            return i(this.negative === 0), this.iushln(f);\n        }, o.prototype.iushrn = function(f, a, c) {\n            i(typeof f == \"number\" && f >= 0);\n            var d;\n            a ? d = (a - a % 26) / 26 : d = 0;\n            var g = f % 26, x = Math.min((f - g) / 26, this.length), M = 67108863 ^ 67108863 >>> g << g, l = c;\n            if (d -= x, d = Math.max(0, d), l) {\n                for(var s = 0; s < x; s++)l.words[s] = this.words[s];\n                l.length = x;\n            }\n            if (x !== 0) if (this.length > x) for(this.length -= x, s = 0; s < this.length; s++)this.words[s] = this.words[s + x];\n            else this.words[0] = 0, this.length = 1;\n            var v = 0;\n            for(s = this.length - 1; s >= 0 && (v !== 0 || s >= d); s--){\n                var k = this.words[s] | 0;\n                this.words[s] = v << 26 - g | k >>> g, v = k & M;\n            }\n            return l && v !== 0 && (l.words[l.length++] = v), this.length === 0 && (this.words[0] = 0, this.length = 1), this._strip();\n        }, o.prototype.ishrn = function(f, a, c) {\n            return i(this.negative === 0), this.iushrn(f, a, c);\n        }, o.prototype.shln = function(f) {\n            return this.clone().ishln(f);\n        }, o.prototype.ushln = function(f) {\n            return this.clone().iushln(f);\n        }, o.prototype.shrn = function(f) {\n            return this.clone().ishrn(f);\n        }, o.prototype.ushrn = function(f) {\n            return this.clone().iushrn(f);\n        }, o.prototype.testn = function(f) {\n            i(typeof f == \"number\" && f >= 0);\n            var a = f % 26, c = (f - a) / 26, d = 1 << a;\n            if (this.length <= c) return !1;\n            var g = this.words[c];\n            return !!(g & d);\n        }, o.prototype.imaskn = function(f) {\n            i(typeof f == \"number\" && f >= 0);\n            var a = f % 26, c = (f - a) / 26;\n            if (i(this.negative === 0, \"imaskn works only with positive numbers\"), this.length <= c) return this;\n            if (a !== 0 && c++, this.length = Math.min(c, this.length), a !== 0) {\n                var d = 67108863 ^ 67108863 >>> a << a;\n                this.words[this.length - 1] &= d;\n            }\n            return this._strip();\n        }, o.prototype.maskn = function(f) {\n            return this.clone().imaskn(f);\n        }, o.prototype.iaddn = function(f) {\n            return i(typeof f == \"number\"), i(f < 67108864), f < 0 ? this.isubn(-f) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) <= f ? (this.words[0] = f - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(f), this.negative = 1, this) : this._iaddn(f);\n        }, o.prototype._iaddn = function(f) {\n            this.words[0] += f;\n            for(var a = 0; a < this.length && this.words[a] >= 67108864; a++)this.words[a] -= 67108864, a === this.length - 1 ? this.words[a + 1] = 1 : this.words[a + 1]++;\n            return this.length = Math.max(this.length, a + 1), this;\n        }, o.prototype.isubn = function(f) {\n            if (i(typeof f == \"number\"), i(f < 67108864), f < 0) return this.iaddn(-f);\n            if (this.negative !== 0) return this.negative = 0, this.iaddn(f), this.negative = 1, this;\n            if (this.words[0] -= f, this.length === 1 && this.words[0] < 0) this.words[0] = -this.words[0], this.negative = 1;\n            else for(var a = 0; a < this.length && this.words[a] < 0; a++)this.words[a] += 67108864, this.words[a + 1] -= 1;\n            return this._strip();\n        }, o.prototype.addn = function(f) {\n            return this.clone().iaddn(f);\n        }, o.prototype.subn = function(f) {\n            return this.clone().isubn(f);\n        }, o.prototype.iabs = function() {\n            return this.negative = 0, this;\n        }, o.prototype.abs = function() {\n            return this.clone().iabs();\n        }, o.prototype._ishlnsubmul = function(f, a, c) {\n            var d = f.length + c, g;\n            this._expand(d);\n            var x, M = 0;\n            for(g = 0; g < f.length; g++){\n                x = (this.words[g + c] | 0) + M;\n                var l = (f.words[g] | 0) * a;\n                x -= l & 67108863, M = (x >> 26) - (l / 67108864 | 0), this.words[g + c] = x & 67108863;\n            }\n            for(; g < this.length - c; g++)x = (this.words[g + c] | 0) + M, M = x >> 26, this.words[g + c] = x & 67108863;\n            if (M === 0) return this._strip();\n            for(i(M === -1), M = 0, g = 0; g < this.length; g++)x = -(this.words[g] | 0) + M, M = x >> 26, this.words[g] = x & 67108863;\n            return this.negative = 1, this._strip();\n        }, o.prototype._wordDiv = function(f, a) {\n            var c = this.length - f.length, d = this.clone(), g = f, x = g.words[g.length - 1] | 0, M = this._countBits(x);\n            c = 26 - M, c !== 0 && (g = g.ushln(c), d.iushln(c), x = g.words[g.length - 1] | 0);\n            var l = d.length - g.length, s;\n            if (a !== \"mod\") {\n                s = new o(null), s.length = l + 1, s.words = new Array(s.length);\n                for(var v = 0; v < s.length; v++)s.words[v] = 0;\n            }\n            var k = d.clone()._ishlnsubmul(g, 1, l);\n            k.negative === 0 && (d = k, s && (s.words[l] = 1));\n            for(var u = l - 1; u >= 0; u--){\n                var E = (d.words[g.length + u] | 0) * 67108864 + (d.words[g.length + u - 1] | 0);\n                for(E = Math.min(E / x | 0, 67108863), d._ishlnsubmul(g, E, u); d.negative !== 0;)E--, d.negative = 0, d._ishlnsubmul(g, 1, u), d.isZero() || (d.negative ^= 1);\n                s && (s.words[u] = E);\n            }\n            return s && s._strip(), d._strip(), a !== \"div\" && c !== 0 && d.iushrn(c), {\n                div: s || null,\n                mod: d\n            };\n        }, o.prototype.divmod = function(f, a, c) {\n            if (i(!f.isZero()), this.isZero()) return {\n                div: new o(0),\n                mod: new o(0)\n            };\n            var d, g, x;\n            return this.negative !== 0 && f.negative === 0 ? (x = this.neg().divmod(f, a), a !== \"mod\" && (d = x.div.neg()), a !== \"div\" && (g = x.mod.neg(), c && g.negative !== 0 && g.iadd(f)), {\n                div: d,\n                mod: g\n            }) : this.negative === 0 && f.negative !== 0 ? (x = this.divmod(f.neg(), a), a !== \"mod\" && (d = x.div.neg()), {\n                div: d,\n                mod: x.mod\n            }) : this.negative & f.negative ? (x = this.neg().divmod(f.neg(), a), a !== \"div\" && (g = x.mod.neg(), c && g.negative !== 0 && g.isub(f)), {\n                div: x.div,\n                mod: g\n            }) : f.length > this.length || this.cmp(f) < 0 ? {\n                div: new o(0),\n                mod: this\n            } : f.length === 1 ? a === \"div\" ? {\n                div: this.divn(f.words[0]),\n                mod: null\n            } : a === \"mod\" ? {\n                div: null,\n                mod: new o(this.modrn(f.words[0]))\n            } : {\n                div: this.divn(f.words[0]),\n                mod: new o(this.modrn(f.words[0]))\n            } : this._wordDiv(f, a);\n        }, o.prototype.div = function(f) {\n            return this.divmod(f, \"div\", !1).div;\n        }, o.prototype.mod = function(f) {\n            return this.divmod(f, \"mod\", !1).mod;\n        }, o.prototype.umod = function(f) {\n            return this.divmod(f, \"mod\", !0).mod;\n        }, o.prototype.divRound = function(f) {\n            var a = this.divmod(f);\n            if (a.mod.isZero()) return a.div;\n            var c = a.div.negative !== 0 ? a.mod.isub(f) : a.mod, d = f.ushrn(1), g = f.andln(1), x = c.cmp(d);\n            return x < 0 || g === 1 && x === 0 ? a.div : a.div.negative !== 0 ? a.div.isubn(1) : a.div.iaddn(1);\n        }, o.prototype.modrn = function(f) {\n            var a = f < 0;\n            a && (f = -f), i(f <= 67108863);\n            for(var c = (1 << 26) % f, d = 0, g = this.length - 1; g >= 0; g--)d = (c * d + (this.words[g] | 0)) % f;\n            return a ? -d : d;\n        }, o.prototype.modn = function(f) {\n            return this.modrn(f);\n        }, o.prototype.idivn = function(f) {\n            var a = f < 0;\n            a && (f = -f), i(f <= 67108863);\n            for(var c = 0, d = this.length - 1; d >= 0; d--){\n                var g = (this.words[d] | 0) + c * 67108864;\n                this.words[d] = g / f | 0, c = g % f;\n            }\n            return this._strip(), a ? this.ineg() : this;\n        }, o.prototype.divn = function(f) {\n            return this.clone().idivn(f);\n        }, o.prototype.egcd = function(f) {\n            i(f.negative === 0), i(!f.isZero());\n            var a = this, c = f.clone();\n            a.negative !== 0 ? a = a.umod(f) : a = a.clone();\n            for(var d = new o(1), g = new o(0), x = new o(0), M = new o(1), l = 0; a.isEven() && c.isEven();)a.iushrn(1), c.iushrn(1), ++l;\n            for(var s = c.clone(), v = a.clone(); !a.isZero();){\n                for(var k = 0, u = 1; !(a.words[0] & u) && k < 26; ++k, u <<= 1);\n                if (k > 0) for(a.iushrn(k); k-- > 0;)(d.isOdd() || g.isOdd()) && (d.iadd(s), g.isub(v)), d.iushrn(1), g.iushrn(1);\n                for(var E = 0, _ = 1; !(c.words[0] & _) && E < 26; ++E, _ <<= 1);\n                if (E > 0) for(c.iushrn(E); E-- > 0;)(x.isOdd() || M.isOdd()) && (x.iadd(s), M.isub(v)), x.iushrn(1), M.iushrn(1);\n                a.cmp(c) >= 0 ? (a.isub(c), d.isub(x), g.isub(M)) : (c.isub(a), x.isub(d), M.isub(g));\n            }\n            return {\n                a: x,\n                b: M,\n                gcd: c.iushln(l)\n            };\n        }, o.prototype._invmp = function(f) {\n            i(f.negative === 0), i(!f.isZero());\n            var a = this, c = f.clone();\n            a.negative !== 0 ? a = a.umod(f) : a = a.clone();\n            for(var d = new o(1), g = new o(0), x = c.clone(); a.cmpn(1) > 0 && c.cmpn(1) > 0;){\n                for(var M = 0, l = 1; !(a.words[0] & l) && M < 26; ++M, l <<= 1);\n                if (M > 0) for(a.iushrn(M); M-- > 0;)d.isOdd() && d.iadd(x), d.iushrn(1);\n                for(var s = 0, v = 1; !(c.words[0] & v) && s < 26; ++s, v <<= 1);\n                if (s > 0) for(c.iushrn(s); s-- > 0;)g.isOdd() && g.iadd(x), g.iushrn(1);\n                a.cmp(c) >= 0 ? (a.isub(c), d.isub(g)) : (c.isub(a), g.isub(d));\n            }\n            var k;\n            return a.cmpn(1) === 0 ? k = d : k = g, k.cmpn(0) < 0 && k.iadd(f), k;\n        }, o.prototype.gcd = function(f) {\n            if (this.isZero()) return f.abs();\n            if (f.isZero()) return this.abs();\n            var a = this.clone(), c = f.clone();\n            a.negative = 0, c.negative = 0;\n            for(var d = 0; a.isEven() && c.isEven(); d++)a.iushrn(1), c.iushrn(1);\n            do {\n                for(; a.isEven();)a.iushrn(1);\n                for(; c.isEven();)c.iushrn(1);\n                var g = a.cmp(c);\n                if (g < 0) {\n                    var x = a;\n                    a = c, c = x;\n                } else if (g === 0 || c.cmpn(1) === 0) break;\n                a.isub(c);\n            }while (!0);\n            return c.iushln(d);\n        }, o.prototype.invm = function(f) {\n            return this.egcd(f).a.umod(f);\n        }, o.prototype.isEven = function() {\n            return (this.words[0] & 1) === 0;\n        }, o.prototype.isOdd = function() {\n            return (this.words[0] & 1) === 1;\n        }, o.prototype.andln = function(f) {\n            return this.words[0] & f;\n        }, o.prototype.bincn = function(f) {\n            i(typeof f == \"number\");\n            var a = f % 26, c = (f - a) / 26, d = 1 << a;\n            if (this.length <= c) return this._expand(c + 1), this.words[c] |= d, this;\n            for(var g = d, x = c; g !== 0 && x < this.length; x++){\n                var M = this.words[x] | 0;\n                M += g, g = M >>> 26, M &= 67108863, this.words[x] = M;\n            }\n            return g !== 0 && (this.words[x] = g, this.length++), this;\n        }, o.prototype.isZero = function() {\n            return this.length === 1 && this.words[0] === 0;\n        }, o.prototype.cmpn = function(f) {\n            var a = f < 0;\n            if (this.negative !== 0 && !a) return -1;\n            if (this.negative === 0 && a) return 1;\n            this._strip();\n            var c;\n            if (this.length > 1) c = 1;\n            else {\n                a && (f = -f), i(f <= 67108863, \"Number is too big\");\n                var d = this.words[0] | 0;\n                c = d === f ? 0 : d < f ? -1 : 1;\n            }\n            return this.negative !== 0 ? -c | 0 : c;\n        }, o.prototype.cmp = function(f) {\n            if (this.negative !== 0 && f.negative === 0) return -1;\n            if (this.negative === 0 && f.negative !== 0) return 1;\n            var a = this.ucmp(f);\n            return this.negative !== 0 ? -a | 0 : a;\n        }, o.prototype.ucmp = function(f) {\n            if (this.length > f.length) return 1;\n            if (this.length < f.length) return -1;\n            for(var a = 0, c = this.length - 1; c >= 0; c--){\n                var d = this.words[c] | 0, g = f.words[c] | 0;\n                if (d !== g) {\n                    d < g ? a = -1 : d > g && (a = 1);\n                    break;\n                }\n            }\n            return a;\n        }, o.prototype.gtn = function(f) {\n            return this.cmpn(f) === 1;\n        }, o.prototype.gt = function(f) {\n            return this.cmp(f) === 1;\n        }, o.prototype.gten = function(f) {\n            return this.cmpn(f) >= 0;\n        }, o.prototype.gte = function(f) {\n            return this.cmp(f) >= 0;\n        }, o.prototype.ltn = function(f) {\n            return this.cmpn(f) === -1;\n        }, o.prototype.lt = function(f) {\n            return this.cmp(f) === -1;\n        }, o.prototype.lten = function(f) {\n            return this.cmpn(f) <= 0;\n        }, o.prototype.lte = function(f) {\n            return this.cmp(f) <= 0;\n        }, o.prototype.eqn = function(f) {\n            return this.cmpn(f) === 0;\n        }, o.prototype.eq = function(f) {\n            return this.cmp(f) === 0;\n        }, o.red = function(f) {\n            return new Y(f);\n        }, o.prototype.toRed = function(f) {\n            return i(!this.red, \"Already a number in reduction context\"), i(this.negative === 0, \"red works only with positives\"), f.convertTo(this)._forceRed(f);\n        }, o.prototype.fromRed = function() {\n            return i(this.red, \"fromRed works only with numbers in reduction context\"), this.red.convertFrom(this);\n        }, o.prototype._forceRed = function(f) {\n            return this.red = f, this;\n        }, o.prototype.forceRed = function(f) {\n            return i(!this.red, \"Already a number in reduction context\"), this._forceRed(f);\n        }, o.prototype.redAdd = function(f) {\n            return i(this.red, \"redAdd works only with red numbers\"), this.red.add(this, f);\n        }, o.prototype.redIAdd = function(f) {\n            return i(this.red, \"redIAdd works only with red numbers\"), this.red.iadd(this, f);\n        }, o.prototype.redSub = function(f) {\n            return i(this.red, \"redSub works only with red numbers\"), this.red.sub(this, f);\n        }, o.prototype.redISub = function(f) {\n            return i(this.red, \"redISub works only with red numbers\"), this.red.isub(this, f);\n        }, o.prototype.redShl = function(f) {\n            return i(this.red, \"redShl works only with red numbers\"), this.red.shl(this, f);\n        }, o.prototype.redMul = function(f) {\n            return i(this.red, \"redMul works only with red numbers\"), this.red._verify2(this, f), this.red.mul(this, f);\n        }, o.prototype.redIMul = function(f) {\n            return i(this.red, \"redMul works only with red numbers\"), this.red._verify2(this, f), this.red.imul(this, f);\n        }, o.prototype.redSqr = function() {\n            return i(this.red, \"redSqr works only with red numbers\"), this.red._verify1(this), this.red.sqr(this);\n        }, o.prototype.redISqr = function() {\n            return i(this.red, \"redISqr works only with red numbers\"), this.red._verify1(this), this.red.isqr(this);\n        }, o.prototype.redSqrt = function() {\n            return i(this.red, \"redSqrt works only with red numbers\"), this.red._verify1(this), this.red.sqrt(this);\n        }, o.prototype.redInvm = function() {\n            return i(this.red, \"redInvm works only with red numbers\"), this.red._verify1(this), this.red.invm(this);\n        }, o.prototype.redNeg = function() {\n            return i(this.red, \"redNeg works only with red numbers\"), this.red._verify1(this), this.red.neg(this);\n        }, o.prototype.redPow = function(f) {\n            return i(this.red && !f.red, \"redPow(normalNum)\"), this.red._verify1(this), this.red.pow(this, f);\n        };\n        var H = {\n            k256: null,\n            p224: null,\n            p192: null,\n            p25519: null\n        };\n        function z(A, f) {\n            this.name = A, this.p = new o(f, 16), this.n = this.p.bitLength(), this.k = new o(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();\n        }\n        z.prototype._tmp = function() {\n            var f = new o(null);\n            return f.words = new Array(Math.ceil(this.n / 13)), f;\n        }, z.prototype.ireduce = function(f) {\n            var a = f, c;\n            do this.split(a, this.tmp), a = this.imulK(a), a = a.iadd(this.tmp), c = a.bitLength();\n            while (c > this.n);\n            var d = c < this.n ? -1 : a.ucmp(this.p);\n            return d === 0 ? (a.words[0] = 0, a.length = 1) : d > 0 ? a.isub(this.p) : a.strip !== void 0 ? a.strip() : a._strip(), a;\n        }, z.prototype.split = function(f, a) {\n            f.iushrn(this.n, 0, a);\n        }, z.prototype.imulK = function(f) {\n            return f.imul(this.k);\n        };\n        function Pt() {\n            z.call(this, \"k256\", \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\");\n        }\n        n(Pt, z), Pt.prototype.split = function(f, a) {\n            for(var c = 4194303, d = Math.min(f.length, 9), g = 0; g < d; g++)a.words[g] = f.words[g];\n            if (a.length = d, f.length <= 9) {\n                f.words[0] = 0, f.length = 1;\n                return;\n            }\n            var x = f.words[9];\n            for(a.words[a.length++] = x & c, g = 10; g < f.length; g++){\n                var M = f.words[g] | 0;\n                f.words[g - 10] = (M & c) << 4 | x >>> 22, x = M;\n            }\n            x >>>= 22, f.words[g - 10] = x, x === 0 && f.length > 10 ? f.length -= 10 : f.length -= 9;\n        }, Pt.prototype.imulK = function(f) {\n            f.words[f.length] = 0, f.words[f.length + 1] = 0, f.length += 2;\n            for(var a = 0, c = 0; c < f.length; c++){\n                var d = f.words[c] | 0;\n                a += d * 977, f.words[c] = a & 67108863, a = d * 64 + (a / 67108864 | 0);\n            }\n            return f.words[f.length - 1] === 0 && (f.length--, f.words[f.length - 1] === 0 && f.length--), f;\n        };\n        function W() {\n            z.call(this, \"p224\", \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\");\n        }\n        n(W, z);\n        function Rt() {\n            z.call(this, \"p192\", \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\");\n        }\n        n(Rt, z);\n        function Yt() {\n            z.call(this, \"25519\", \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\");\n        }\n        n(Yt, z), Yt.prototype.imulK = function(f) {\n            for(var a = 0, c = 0; c < f.length; c++){\n                var d = (f.words[c] | 0) * 19 + a, g = d & 67108863;\n                d >>>= 26, f.words[c] = g, a = d;\n            }\n            return a !== 0 && (f.words[f.length++] = a), f;\n        }, o._prime = function(f) {\n            if (H[f]) return H[f];\n            var a;\n            if (f === \"k256\") a = new Pt;\n            else if (f === \"p224\") a = new W;\n            else if (f === \"p192\") a = new Rt;\n            else if (f === \"p25519\") a = new Yt;\n            else throw new Error(\"Unknown prime \" + f);\n            return H[f] = a, a;\n        };\n        function Y(A) {\n            if (typeof A == \"string\") {\n                var f = o._prime(A);\n                this.m = f.p, this.prime = f;\n            } else i(A.gtn(1), \"modulus must be greater than 1\"), this.m = A, this.prime = null;\n        }\n        Y.prototype._verify1 = function(f) {\n            i(f.negative === 0, \"red works only with positives\"), i(f.red, \"red works only with red numbers\");\n        }, Y.prototype._verify2 = function(f, a) {\n            i((f.negative | a.negative) === 0, \"red works only with positives\"), i(f.red && f.red === a.red, \"red works only with red numbers\");\n        }, Y.prototype.imod = function(f) {\n            return this.prime ? this.prime.ireduce(f)._forceRed(this) : (w(f, f.umod(this.m)._forceRed(this)), f);\n        }, Y.prototype.neg = function(f) {\n            return f.isZero() ? f.clone() : this.m.sub(f)._forceRed(this);\n        }, Y.prototype.add = function(f, a) {\n            this._verify2(f, a);\n            var c = f.add(a);\n            return c.cmp(this.m) >= 0 && c.isub(this.m), c._forceRed(this);\n        }, Y.prototype.iadd = function(f, a) {\n            this._verify2(f, a);\n            var c = f.iadd(a);\n            return c.cmp(this.m) >= 0 && c.isub(this.m), c;\n        }, Y.prototype.sub = function(f, a) {\n            this._verify2(f, a);\n            var c = f.sub(a);\n            return c.cmpn(0) < 0 && c.iadd(this.m), c._forceRed(this);\n        }, Y.prototype.isub = function(f, a) {\n            this._verify2(f, a);\n            var c = f.isub(a);\n            return c.cmpn(0) < 0 && c.iadd(this.m), c;\n        }, Y.prototype.shl = function(f, a) {\n            return this._verify1(f), this.imod(f.ushln(a));\n        }, Y.prototype.imul = function(f, a) {\n            return this._verify2(f, a), this.imod(f.imul(a));\n        }, Y.prototype.mul = function(f, a) {\n            return this._verify2(f, a), this.imod(f.mul(a));\n        }, Y.prototype.isqr = function(f) {\n            return this.imul(f, f.clone());\n        }, Y.prototype.sqr = function(f) {\n            return this.mul(f, f);\n        }, Y.prototype.sqrt = function(f) {\n            if (f.isZero()) return f.clone();\n            var a = this.m.andln(3);\n            if (i(a % 2 === 1), a === 3) {\n                var c = this.m.add(new o(1)).iushrn(2);\n                return this.pow(f, c);\n            }\n            for(var d = this.m.subn(1), g = 0; !d.isZero() && d.andln(1) === 0;)g++, d.iushrn(1);\n            i(!d.isZero());\n            var x = new o(1).toRed(this), M = x.redNeg(), l = this.m.subn(1).iushrn(1), s = this.m.bitLength();\n            for(s = new o(2 * s * s).toRed(this); this.pow(s, l).cmp(M) !== 0;)s.redIAdd(M);\n            for(var v = this.pow(s, d), k = this.pow(f, d.addn(1).iushrn(1)), u = this.pow(f, d), E = g; u.cmp(x) !== 0;){\n                for(var _ = u, B = 0; _.cmp(x) !== 0; B++)_ = _.redSqr();\n                i(B < E);\n                var R = this.pow(v, new o(1).iushln(E - B - 1));\n                k = k.redMul(R), v = R.redSqr(), u = u.redMul(v), E = B;\n            }\n            return k;\n        }, Y.prototype.invm = function(f) {\n            var a = f._invmp(this.m);\n            return a.negative !== 0 ? (a.negative = 0, this.imod(a).redNeg()) : this.imod(a);\n        }, Y.prototype.pow = function(f, a) {\n            if (a.isZero()) return new o(1).toRed(this);\n            if (a.cmpn(1) === 0) return f.clone();\n            var c = 4, d = new Array(1 << c);\n            d[0] = new o(1).toRed(this), d[1] = f;\n            for(var g = 2; g < d.length; g++)d[g] = this.mul(d[g - 1], f);\n            var x = d[0], M = 0, l = 0, s = a.bitLength() % 26;\n            for(s === 0 && (s = 26), g = a.length - 1; g >= 0; g--){\n                for(var v = a.words[g], k = s - 1; k >= 0; k--){\n                    var u = v >> k & 1;\n                    if (x !== d[0] && (x = this.sqr(x)), u === 0 && M === 0) {\n                        l = 0;\n                        continue;\n                    }\n                    M <<= 1, M |= u, l++, !(l !== c && (g !== 0 || k !== 0)) && (x = this.mul(x, d[M]), l = 0, M = 0);\n                }\n                s = 26;\n            }\n            return x;\n        }, Y.prototype.convertTo = function(f) {\n            var a = f.umod(this.m);\n            return a === f ? a.clone() : a;\n        }, Y.prototype.convertFrom = function(f) {\n            var a = f.clone();\n            return a.red = null, a;\n        }, o.mont = function(f) {\n            return new Vt(f);\n        };\n        function Vt(A) {\n            Y.call(this, A), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new o(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);\n        }\n        n(Vt, Y), Vt.prototype.convertTo = function(f) {\n            return this.imod(f.ushln(this.shift));\n        }, Vt.prototype.convertFrom = function(f) {\n            var a = this.imod(f.mul(this.rinv));\n            return a.red = null, a;\n        }, Vt.prototype.imul = function(f, a) {\n            if (f.isZero() || a.isZero()) return f.words[0] = 0, f.length = 1, f;\n            var c = f.imul(a), d = c.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), g = c.isub(d).iushrn(this.shift), x = g;\n            return g.cmp(this.m) >= 0 ? x = g.isub(this.m) : g.cmpn(0) < 0 && (x = g.iadd(this.m)), x._forceRed(this);\n        }, Vt.prototype.mul = function(f, a) {\n            if (f.isZero() || a.isZero()) return new o(0)._forceRed(this);\n            var c = f.mul(a), d = c.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), g = c.isub(d).iushrn(this.shift), x = g;\n            return g.cmp(this.m) >= 0 ? x = g.isub(this.m) : g.cmpn(0) < 0 && (x = g.iadd(this.m)), x._forceRed(this);\n        }, Vt.prototype.invm = function(f) {\n            var a = this.imod(f._invmp(this.m).mul(this.r2));\n            return a._forceRed(this);\n        };\n    })(e, On);\n})(Ln);\nvar K = Ln.exports;\nconst jn = \"bignumber/5.7.0\";\nvar Rr = K.BN;\nconst Ae = new L(jn), wi = {}, Qn = 9007199254740991;\nfunction C0(e) {\n    return e != null && (V.isBigNumber(e) || typeof e == \"number\" && e % 1 === 0 || typeof e == \"string\" && !!e.match(/^-?[0-9]+$/) || Qt(e) || typeof e == \"bigint\" || ir(e));\n}\n_c24 = C0;\nlet Jn = !1;\nclass V {\n    fromTwos(t) {\n        return Lt(j(this).fromTwos(t));\n    }\n    toTwos(t) {\n        return Lt(j(this).toTwos(t));\n    }\n    abs() {\n        return this._hex[0] === \"-\" ? V.from(this._hex.substring(1)) : this;\n    }\n    add(t) {\n        return Lt(j(this).add(j(t)));\n    }\n    sub(t) {\n        return Lt(j(this).sub(j(t)));\n    }\n    div(t) {\n        return V.from(t).isZero() && Wt(\"division-by-zero\", \"div\"), Lt(j(this).div(j(t)));\n    }\n    mul(t) {\n        return Lt(j(this).mul(j(t)));\n    }\n    mod(t) {\n        const r = j(t);\n        return r.isNeg() && Wt(\"division-by-zero\", \"mod\"), Lt(j(this).umod(r));\n    }\n    pow(t) {\n        const r = j(t);\n        return r.isNeg() && Wt(\"negative-power\", \"pow\"), Lt(j(this).pow(r));\n    }\n    and(t) {\n        const r = j(t);\n        return (this.isNegative() || r.isNeg()) && Wt(\"unbound-bitwise-result\", \"and\"), Lt(j(this).and(r));\n    }\n    or(t) {\n        const r = j(t);\n        return (this.isNegative() || r.isNeg()) && Wt(\"unbound-bitwise-result\", \"or\"), Lt(j(this).or(r));\n    }\n    xor(t) {\n        const r = j(t);\n        return (this.isNegative() || r.isNeg()) && Wt(\"unbound-bitwise-result\", \"xor\"), Lt(j(this).xor(r));\n    }\n    mask(t) {\n        return (this.isNegative() || t < 0) && Wt(\"negative-width\", \"mask\"), Lt(j(this).maskn(t));\n    }\n    shl(t) {\n        return (this.isNegative() || t < 0) && Wt(\"negative-width\", \"shl\"), Lt(j(this).shln(t));\n    }\n    shr(t) {\n        return (this.isNegative() || t < 0) && Wt(\"negative-width\", \"shr\"), Lt(j(this).shrn(t));\n    }\n    eq(t) {\n        return j(this).eq(j(t));\n    }\n    lt(t) {\n        return j(this).lt(j(t));\n    }\n    lte(t) {\n        return j(this).lte(j(t));\n    }\n    gt(t) {\n        return j(this).gt(j(t));\n    }\n    gte(t) {\n        return j(this).gte(j(t));\n    }\n    isNegative() {\n        return this._hex[0] === \"-\";\n    }\n    isZero() {\n        return j(this).isZero();\n    }\n    toNumber() {\n        try {\n            return j(this).toNumber();\n        } catch (e) {\n            Wt(\"overflow\", \"toNumber\", this.toString());\n        }\n        return null;\n    }\n    toBigInt() {\n        try {\n            return BigInt(this.toString());\n        } catch (e) {}\n        return Ae.throwError(\"this platform does not support BigInt\", L.errors.UNSUPPORTED_OPERATION, {\n            value: this.toString()\n        });\n    }\n    toString() {\n        return arguments.length > 0 && (arguments[0] === 10 ? Jn || (Jn = !0, Ae.warn(\"BigNumber.toString does not accept any parameters; base-10 is assumed\")) : arguments[0] === 16 ? Ae.throwError(\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\", L.errors.UNEXPECTED_ARGUMENT, {}) : Ae.throwError(\"BigNumber.toString does not accept parameters\", L.errors.UNEXPECTED_ARGUMENT, {})), j(this).toString(10);\n    }\n    toHexString() {\n        return this._hex;\n    }\n    toJSON(t) {\n        return {\n            type: \"BigNumber\",\n            hex: this.toHexString()\n        };\n    }\n    static from(t) {\n        if (t instanceof V) return t;\n        if (typeof t == \"string\") return t.match(/^-?0x[0-9a-f]+$/i) ? new V(wi, vr(t)) : t.match(/^-?[0-9]+$/) ? new V(wi, vr(new Rr(t))) : Ae.throwArgumentError(\"invalid BigNumber string\", \"value\", t);\n        if (typeof t == \"number\") return t % 1 && Wt(\"underflow\", \"BigNumber.from\", t), (t >= Qn || t <= -Qn) && Wt(\"overflow\", \"BigNumber.from\", t), V.from(String(t));\n        const r = t;\n        if (typeof r == \"bigint\") return V.from(r.toString());\n        if (ir(r)) return V.from(Kt(r));\n        if (r) if (r.toHexString) {\n            const i = r.toHexString();\n            if (typeof i == \"string\") return V.from(i);\n        } else {\n            let i = r._hex;\n            if (i == null && r.type === \"BigNumber\" && (i = r.hex), typeof i == \"string\" && (Qt(i) || i[0] === \"-\" && Qt(i.substring(1)))) return V.from(i);\n        }\n        return Ae.throwArgumentError(\"invalid BigNumber value\", \"value\", t);\n    }\n    static isBigNumber(t) {\n        return !!(t && t._isBigNumber);\n    }\n    constructor(t, r){\n        t !== wi && Ae.throwError(\"cannot call constructor directly; use BigNumber.from\", L.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new (BigNumber)\"\n        }), this._hex = r, this._isBigNumber = !0, Object.freeze(this);\n    }\n}\nfunction vr(e) {\n    if (typeof e != \"string\") return vr(e.toString(16));\n    if (e[0] === \"-\") return e = e.substring(1), e[0] === \"-\" && Ae.throwArgumentError(\"invalid hex\", \"value\", e), e = vr(e), e === \"0x00\" ? e : \"-\" + e;\n    if (e.substring(0, 2) !== \"0x\" && (e = \"0x\" + e), e === \"0x\") return \"0x00\";\n    for(e.length % 2 && (e = \"0x0\" + e.substring(2)); e.length > 4 && e.substring(0, 4) === \"0x00\";)e = \"0x\" + e.substring(4);\n    return e;\n}\nfunction Lt(e) {\n    return V.from(vr(e));\n}\n_c25 = Lt;\nfunction j(e) {\n    const t = V.from(e).toHexString();\n    return t[0] === \"-\" ? new Rr(\"-\" + t.substring(3), 16) : new Rr(t.substring(2), 16);\n}\nfunction Wt(e, t, r) {\n    const i = {\n        fault: e,\n        operation: t\n    };\n    return r != null && (i.value = r), Ae.throwError(e, L.errors.NUMERIC_FAULT, i);\n}\n_c26 = Wt;\nfunction R0(e) {\n    return new Rr(e, 36).toString(16);\n}\n_c27 = R0;\nconst Ht = new L(jn), mr = {}, Gn = V.from(0), Yn = V.from(-1);\nfunction Vn(e, t, r, i) {\n    const n = {\n        fault: t,\n        operation: r\n    };\n    return i !== void 0 && (n.value = i), Ht.throwError(e, L.errors.NUMERIC_FAULT, n);\n}\n_c28 = Vn;\nlet gr = \"0\";\nfor(; gr.length < 256;)gr += gr;\nfunction xi(e) {\n    if (typeof e != \"number\") try {\n        e = V.from(e).toNumber();\n    } catch (e) {}\n    return typeof e == \"number\" && e >= 0 && e <= 256 && !(e % 1) ? \"1\" + gr.substring(0, e) : Ht.throwArgumentError(\"invalid decimal size\", \"decimals\", e);\n}\nfunction Mi(e, t) {\n    t == null && (t = 0);\n    const r = xi(t);\n    e = V.from(e);\n    const i = e.lt(Gn);\n    i && (e = e.mul(Yn));\n    let n = e.mod(r).toString();\n    for(; n.length < r.length - 1;)n = \"0\" + n;\n    n = n.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n    const o = e.div(r).toString();\n    return r.length === 1 ? e = o : e = o + \".\" + n, i && (e = \"-\" + e), e;\n}\n_c29 = Mi;\nfunction be(e, t) {\n    t == null && (t = 0);\n    const r = xi(t);\n    (typeof e != \"string\" || !e.match(/^-?[0-9.]+$/)) && Ht.throwArgumentError(\"invalid decimal value\", \"value\", e);\n    const i = e.substring(0, 1) === \"-\";\n    i && (e = e.substring(1)), e === \".\" && Ht.throwArgumentError(\"missing value\", \"value\", e);\n    const n = e.split(\".\");\n    n.length > 2 && Ht.throwArgumentError(\"too many decimal points\", \"value\", e);\n    let o = n[0], h = n[1];\n    for(o || (o = \"0\"), h || (h = \"0\"); h[h.length - 1] === \"0\";)h = h.substring(0, h.length - 1);\n    for(h.length > r.length - 1 && Vn(\"fractional component exceeds decimals\", \"underflow\", \"parseFixed\"), h === \"\" && (h = \"0\"); h.length < r.length - 1;)h += \"0\";\n    const p = V.from(o), b = V.from(h);\n    let m = p.mul(r).add(b);\n    return i && (m = m.mul(Yn)), m;\n}\nclass dr {\n    static from(t) {\n        if (t instanceof dr) return t;\n        typeof t == \"number\" && (t = \"fixed128x\".concat(t));\n        let r = !0, i = 128, n = 18;\n        if (typeof t == \"string\") {\n            if (t !== \"fixed\") if (t === \"ufixed\") r = !1;\n            else {\n                const o = t.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n                o || Ht.throwArgumentError(\"invalid fixed format\", \"format\", t), r = o[1] !== \"u\", i = parseInt(o[2]), n = parseInt(o[3]);\n            }\n        } else if (t) {\n            const o = (h, p, b)=>t[h] == null ? b : (typeof t[h] !== p && Ht.throwArgumentError(\"invalid fixed format (\" + h + \" not \" + p + \")\", \"format.\" + h, t[h]), t[h]);\n            r = o(\"signed\", \"boolean\", r), i = o(\"width\", \"number\", i), n = o(\"decimals\", \"number\", n);\n        }\n        return i % 8 && Ht.throwArgumentError(\"invalid fixed format width (not byte aligned)\", \"format.width\", i), n > 80 && Ht.throwArgumentError(\"invalid fixed format (decimals too large)\", \"format.decimals\", n), new dr(mr, r, i, n);\n    }\n    constructor(t, r, i, n){\n        t !== mr && Ht.throwError(\"cannot use FixedFormat constructor; use FixedFormat.from\", L.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new FixedFormat\"\n        }), this.signed = r, this.width = i, this.decimals = n, this.name = (r ? \"\" : \"u\") + \"fixed\" + String(i) + \"x\" + String(n), this._multiplier = xi(n), Object.freeze(this);\n    }\n}\nclass Ut {\n    _checkFormat(t) {\n        this.format.name !== t.format.name && Ht.throwArgumentError(\"incompatible format; use fixedNumber.toFormat\", \"other\", t);\n    }\n    addUnsafe(t) {\n        this._checkFormat(t);\n        const r = be(this._value, this.format.decimals), i = be(t._value, t.format.decimals);\n        return Ut.fromValue(r.add(i), this.format.decimals, this.format);\n    }\n    subUnsafe(t) {\n        this._checkFormat(t);\n        const r = be(this._value, this.format.decimals), i = be(t._value, t.format.decimals);\n        return Ut.fromValue(r.sub(i), this.format.decimals, this.format);\n    }\n    mulUnsafe(t) {\n        this._checkFormat(t);\n        const r = be(this._value, this.format.decimals), i = be(t._value, t.format.decimals);\n        return Ut.fromValue(r.mul(i).div(this.format._multiplier), this.format.decimals, this.format);\n    }\n    divUnsafe(t) {\n        this._checkFormat(t);\n        const r = be(this._value, this.format.decimals), i = be(t._value, t.format.decimals);\n        return Ut.fromValue(r.mul(this.format._multiplier).div(i), this.format.decimals, this.format);\n    }\n    floor() {\n        const t = this.toString().split(\".\");\n        t.length === 1 && t.push(\"0\");\n        let r = Ut.from(t[0], this.format);\n        const i = !t[1].match(/^(0*)$/);\n        return this.isNegative() && i && (r = r.subUnsafe(Wn.toFormat(r.format))), r;\n    }\n    ceiling() {\n        const t = this.toString().split(\".\");\n        t.length === 1 && t.push(\"0\");\n        let r = Ut.from(t[0], this.format);\n        const i = !t[1].match(/^(0*)$/);\n        return !this.isNegative() && i && (r = r.addUnsafe(Wn.toFormat(r.format))), r;\n    }\n    round(t) {\n        t == null && (t = 0);\n        const r = this.toString().split(\".\");\n        if (r.length === 1 && r.push(\"0\"), (t < 0 || t > 80 || t % 1) && Ht.throwArgumentError(\"invalid decimal count\", \"decimals\", t), r[1].length <= t) return this;\n        const i = Ut.from(\"1\" + gr.substring(0, t), this.format), n = O0.toFormat(this.format);\n        return this.mulUnsafe(i).addUnsafe(n).floor().divUnsafe(i);\n    }\n    isZero() {\n        return this._value === \"0.0\" || this._value === \"0\";\n    }\n    isNegative() {\n        return this._value[0] === \"-\";\n    }\n    toString() {\n        return this._value;\n    }\n    toHexString(t) {\n        if (t == null) return this._hex;\n        t % 8 && Ht.throwArgumentError(\"invalid byte width\", \"width\", t);\n        const r = V.from(this._hex).fromTwos(this.format.width).toTwos(t).toHexString();\n        return oe(r, t / 8);\n    }\n    toUnsafeFloat() {\n        return parseFloat(this.toString());\n    }\n    toFormat(t) {\n        return Ut.fromString(this._value, t);\n    }\n    static fromValue(t, r, i) {\n        return i == null && r != null && !C0(r) && (i = r, r = null), r == null && (r = 0), i == null && (i = \"fixed\"), Ut.fromString(Mi(t, r), dr.from(i));\n    }\n    static fromString(t, r) {\n        r == null && (r = \"fixed\");\n        const i = dr.from(r), n = be(t, i.decimals);\n        !i.signed && n.lt(Gn) && Vn(\"unsigned value cannot be negative\", \"overflow\", \"value\", t);\n        let o = null;\n        i.signed ? o = n.toTwos(i.width).toHexString() : (o = n.toHexString(), o = oe(o, i.width / 8));\n        const h = Mi(n, i.decimals);\n        return new Ut(mr, o, h, i);\n    }\n    static fromBytes(t, r) {\n        r == null && (r = \"fixed\");\n        const i = dr.from(r);\n        if (Ot(t).length > i.width / 8) throw new Error(\"overflow\");\n        let n = V.from(t);\n        i.signed && (n = n.fromTwos(i.width));\n        const o = n.toTwos((i.signed ? 0 : 1) + i.width).toHexString(), h = Mi(n, i.decimals);\n        return new Ut(mr, o, h, i);\n    }\n    static from(t, r) {\n        if (typeof t == \"string\") return Ut.fromString(t, r);\n        if (ir(t)) return Ut.fromBytes(t, r);\n        try {\n            return Ut.fromValue(t, 0, r);\n        } catch (i) {\n            if (i.code !== L.errors.INVALID_ARGUMENT) throw i;\n        }\n        return Ht.throwArgumentError(\"invalid FixedNumber value\", \"value\", t);\n    }\n    static isFixedNumber(t) {\n        return !!(t && t._isFixedNumber);\n    }\n    constructor(t, r, i, n){\n        t !== mr && Ht.throwError(\"cannot use FixedNumber constructor; use FixedNumber.from\", L.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new FixedFormat\"\n        }), this.format = n, this._hex = r, this._value = i, this._isFixedNumber = !0, Object.freeze(this);\n    }\n}\nconst Wn = Ut.from(1), O0 = Ut.from(\"0.5\"), P0 = \"strings/5.7.0\", Xn = new L(P0);\nvar Or;\n(function(e) {\n    e.current = \"\", e.NFC = \"NFC\", e.NFD = \"NFD\", e.NFKC = \"NFKC\", e.NFKD = \"NFKD\";\n})(Or || (Or = {}));\nvar nr;\n(function(e) {\n    e.UNEXPECTED_CONTINUE = \"unexpected continuation byte\", e.BAD_PREFIX = \"bad codepoint prefix\", e.OVERRUN = \"string overrun\", e.MISSING_CONTINUE = \"missing continuation byte\", e.OUT_OF_RANGE = \"out of UTF-8 range\", e.UTF16_SURROGATE = \"UTF-16 surrogate\", e.OVERLONG = \"overlong representation\";\n})(nr || (nr = {}));\nfunction D0(e, t, r, i, n) {\n    return Xn.throwArgumentError(\"invalid codepoint at offset \".concat(t, \"; \").concat(e), \"bytes\", r);\n}\n_c30 = D0;\nfunction Zn(e, t, r, i, n) {\n    if (e === nr.BAD_PREFIX || e === nr.UNEXPECTED_CONTINUE) {\n        let o = 0;\n        for(let h = t + 1; h < r.length && r[h] >> 6 === 2; h++)o++;\n        return o;\n    }\n    return e === nr.OVERRUN ? r.length - t - 1 : 0;\n}\n_c31 = Zn;\nfunction F0(e, t, r, i, n) {\n    return e === nr.OVERLONG ? (i.push(n), 0) : (i.push(65533), Zn(e, t, r));\n}\n_c32 = F0;\nObject.freeze({\n    error: D0,\n    ignore: Zn,\n    replace: F0\n});\nfunction Ei(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Or.current;\n    t != Or.current && (Xn.checkNormalize(), e = e.normalize(t));\n    let r = [];\n    for(let i = 0; i < e.length; i++){\n        const n = e.charCodeAt(i);\n        if (n < 128) r.push(n);\n        else if (n < 2048) r.push(n >> 6 | 192), r.push(n & 63 | 128);\n        else if ((n & 64512) == 55296) {\n            i++;\n            const o = e.charCodeAt(i);\n            if (i >= e.length || (o & 64512) !== 56320) throw new Error(\"invalid utf-8 string\");\n            const h = 65536 + ((n & 1023) << 10) + (o & 1023);\n            r.push(h >> 18 | 240), r.push(h >> 12 & 63 | 128), r.push(h >> 6 & 63 | 128), r.push(h & 63 | 128);\n        } else r.push(n >> 12 | 224), r.push(n >> 6 & 63 | 128), r.push(n & 63 | 128);\n    }\n    return Ot(r);\n}\n_c33 = Ei;\nfunction T0(e) {\n    if (e.length % 4 !== 0) throw new Error(\"bad data\");\n    let t = [];\n    for(let r = 0; r < e.length; r += 4)t.push(parseInt(e.substring(r, r + 4), 16));\n    return t;\n}\n_c34 = T0;\nfunction Si(e, t) {\n    t || (t = function(n) {\n        return [\n            parseInt(n, 16)\n        ];\n    });\n    let r = 0, i = {};\n    return e.split(\",\").forEach((n)=>{\n        let o = n.split(\":\");\n        r += parseInt(o[0], 16), i[r] = t(o[1]);\n    }), i;\n}\n_c35 = Si;\nfunction $n(e) {\n    let t = 0;\n    return e.split(\",\").map((r)=>{\n        let i = r.split(\"-\");\n        i.length === 1 ? i[1] = \"0\" : i[1] === \"\" && (i[1] = \"1\");\n        let n = t + parseInt(i[0], 16);\n        return t = parseInt(i[1], 16), {\n            l: n,\n            h: t\n        };\n    });\n}\n$n(\"221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d\"), \"ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff\".split(\",\").map((e)=>parseInt(e, 16)), Si(\"b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3\"), Si(\"179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7\"), Si(\"df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D\", T0), $n(\"80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001\");\nconst tf = \"hash/5.7.0\";\nfunction U0(e) {\n    e = atob(e);\n    const t = [];\n    for(let r = 0; r < e.length; r++)t.push(e.charCodeAt(r));\n    return Ot(t);\n}\n_c36 = U0;\nfunction ef(e, t) {\n    t == null && (t = 1);\n    const r = [], i = r.forEach, n = function(o, h) {\n        i.call(o, function(p) {\n            h > 0 && Array.isArray(p) ? n(p, h - 1) : r.push(p);\n        });\n    };\n    return n(e, t), r;\n}\nfunction k0(e) {\n    const t = {};\n    for(let r = 0; r < e.length; r++){\n        const i = e[r];\n        t[i[0]] = i[1];\n    }\n    return t;\n}\nfunction q0(e) {\n    let t = 0;\n    function r() {\n        return e[t++] << 8 | e[t++];\n    }\n    let i = r(), n = 1, o = [\n        0,\n        1\n    ];\n    for(let H = 1; H < i; H++)o.push(n += r());\n    let h = r(), p = t;\n    t += h;\n    let b = 0, m = 0;\n    function w() {\n        return b == 0 && (m = m << 8 | e[t++], b = 8), m >> --b & 1;\n    }\n    const y = 31, S = Math.pow(2, y), I = S >>> 1, N = I >> 1, C = S - 1;\n    let F = 0;\n    for(let H = 0; H < y; H++)F = F << 1 | w();\n    let U = [], J = 0, Bt = S;\n    for(;;){\n        let H = Math.floor(((F - J + 1) * n - 1) / Bt), z = 0, Pt = i;\n        for(; Pt - z > 1;){\n            let Yt = z + Pt >>> 1;\n            H < o[Yt] ? Pt = Yt : z = Yt;\n        }\n        if (z == 0) break;\n        U.push(z);\n        let W = J + Math.floor(Bt * o[z] / n), Rt = J + Math.floor(Bt * o[z + 1] / n) - 1;\n        for(; !((W ^ Rt) & I);)F = F << 1 & C | w(), W = W << 1 & C, Rt = Rt << 1 & C | 1;\n        for(; W & ~Rt & N;)F = F & I | F << 1 & C >>> 1 | w(), W = W << 1 ^ I, Rt = (Rt ^ I) << 1 | I | 1;\n        J = W, Bt = 1 + Rt - W;\n    }\n    let G = i - 4;\n    return U.map((H)=>{\n        switch(H - G){\n            case 3:\n                return G + 65792 + (e[p++] << 16 | e[p++] << 8 | e[p++]);\n            case 2:\n                return G + 256 + (e[p++] << 8 | e[p++]);\n            case 1:\n                return G + e[p++];\n            default:\n                return H - 1;\n        }\n    });\n}\nfunction K0(e) {\n    let t = 0;\n    return ()=>e[t++];\n}\n_c37 = K0;\nfunction H0(e) {\n    return K0(q0(e));\n}\n_c38 = H0;\nfunction z0(e) {\n    return e & 1 ? ~e >> 1 : e >> 1;\n}\nfunction L0(e, t) {\n    let r = Array(e);\n    for(let i = 0; i < e; i++)r[i] = 1 + t();\n    return r;\n}\n_c39 = L0;\nfunction rf(e, t) {\n    let r = Array(e);\n    for(let i = 0, n = -1; i < e; i++)r[i] = n += 1 + t();\n    return r;\n}\nfunction j0(e, t) {\n    let r = Array(e);\n    for(let i = 0, n = 0; i < e; i++)r[i] = n += z0(t());\n    return r;\n}\nfunction Pr(e, t) {\n    let r = rf(e(), e), i = e(), n = rf(i, e), o = L0(i, e);\n    for(let h = 0; h < i; h++)for(let p = 0; p < o[h]; p++)r.push(n[h] + p);\n    return t ? r.map((h)=>t[h]) : r;\n}\n_c40 = Pr;\nfunction Q0(e) {\n    let t = [];\n    for(;;){\n        let r = e();\n        if (r == 0) break;\n        t.push(G0(r, e));\n    }\n    for(;;){\n        let r = e() - 1;\n        if (r < 0) break;\n        t.push(Y0(r, e));\n    }\n    return k0(ef(t));\n}\n_c41 = Q0;\nfunction J0(e) {\n    let t = [];\n    for(;;){\n        let r = e();\n        if (r == 0) break;\n        t.push(r);\n    }\n    return t;\n}\n_c42 = J0;\nfunction nf(e, t, r) {\n    let i = Array(e).fill(void 0).map(()=>[]);\n    for(let n = 0; n < t; n++)j0(e, r).forEach((o, h)=>i[h].push(o));\n    return i;\n}\nfunction G0(e, t) {\n    let r = 1 + t(), i = t(), n = J0(t), o = nf(n.length, 1 + e, t);\n    return ef(o.map((h, p)=>{\n        const b = h[0], m = h.slice(1);\n        return Array(n[p]).fill(void 0).map((w, y)=>{\n            let S = y * i;\n            return [\n                b + y * r,\n                m.map((I)=>I + S)\n            ];\n        });\n    }));\n}\n_c43 = G0;\nfunction Y0(e, t) {\n    let r = 1 + t();\n    return nf(r, 1 + e, t).map((n)=>[\n            n[0],\n            n.slice(1)\n        ]);\n}\n_c44 = Y0;\nfunction V0(e) {\n    let t = Pr(e).sort((i, n)=>i - n);\n    return r();\n    function r() {\n        let i = [];\n        for(;;){\n            let m = Pr(e, t);\n            if (m.length == 0) break;\n            i.push({\n                set: new Set(m),\n                node: r()\n            });\n        }\n        i.sort((m, w)=>w.set.size - m.set.size);\n        let n = e(), o = n % 3;\n        n = n / 3 | 0;\n        let h = !!(n & 1);\n        n >>= 1;\n        let p = n == 1, b = n == 2;\n        return {\n            branches: i,\n            valid: o,\n            fe0f: h,\n            save: p,\n            check: b\n        };\n    }\n}\n_c45 = V0;\nfunction W0() {\n    return H0(U0(\"\"));\n}\n_c46 = W0;\nconst Dr = W0();\nnew Set(Pr(Dr)), new Set(Pr(Dr)), Q0(Dr), V0(Dr), new L(tf);\nconst X0 = new Uint8Array(32);\nX0.fill(0);\nconst Z0 = \"\\x19Ethereum Signed Message:\\n\";\nfunction ff(e) {\n    return typeof e == \"string\" && (e = Ei(e)), yi(E0([\n        Ei(Z0),\n        Ei(String(e.length)),\n        e\n    ]));\n}\nconst $0 = \"rlp/5.7.0\";\nnew L($0);\nconst ts = \"address/5.7.0\", Ar = new L(ts);\nfunction of(e) {\n    Qt(e, 20) || Ar.throwArgumentError(\"invalid address\", \"address\", e), e = e.toLowerCase();\n    const t = e.substring(2).split(\"\"), r = new Uint8Array(40);\n    for(let n = 0; n < 40; n++)r[n] = t[n].charCodeAt(0);\n    const i = Ot(yi(r));\n    for(let n = 0; n < 40; n += 2)i[n >> 1] >> 4 >= 8 && (t[n] = t[n].toUpperCase()), (i[n >> 1] & 15) >= 8 && (t[n + 1] = t[n + 1].toUpperCase());\n    return \"0x\" + t.join(\"\");\n}\nconst es = 9007199254740991;\nfunction rs(e) {\n    return Math.log10 ? Math.log10(e) : Math.log(e) / Math.LN10;\n}\nconst Ni = {};\nfor(let e = 0; e < 10; e++)Ni[String(e)] = String(e);\nfor(let e = 0; e < 26; e++)Ni[String.fromCharCode(65 + e)] = String(10 + e);\nconst sf = Math.floor(rs(es));\nfunction is(e) {\n    e = e.toUpperCase(), e = e.substring(4) + e.substring(0, 2) + \"00\";\n    let t = e.split(\"\").map((i)=>Ni[i]).join(\"\");\n    for(; t.length >= sf;){\n        let i = t.substring(0, sf);\n        t = parseInt(i, 10) % 97 + t.substring(i.length);\n    }\n    let r = String(98 - parseInt(t, 10) % 97);\n    for(; r.length < 2;)r = \"0\" + r;\n    return r;\n}\nfunction ns(e) {\n    let t = null;\n    if (typeof e != \"string\" && Ar.throwArgumentError(\"invalid address\", \"address\", e), e.match(/^(0x)?[0-9a-fA-F]{40}$/)) e.substring(0, 2) !== \"0x\" && (e = \"0x\" + e), t = of(e), e.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && t !== e && Ar.throwArgumentError(\"bad address checksum\", \"address\", e);\n    else if (e.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\n        for(e.substring(2, 4) !== is(e) && Ar.throwArgumentError(\"bad icap checksum\", \"address\", e), t = R0(e.substring(4)); t.length < 40;)t = \"0\" + t;\n        t = of(\"0x\" + t);\n    } else Ar.throwArgumentError(\"invalid address\", \"address\", e);\n    return t;\n}\nconst fs = \"properties/5.7.0\";\nnew L(fs);\nfunction br(e, t, r) {\n    Object.defineProperty(e, t, {\n        enumerable: !0,\n        value: r,\n        writable: !1\n    });\n}\nnew L(tf);\nconst os = new Uint8Array(32);\nos.fill(0), V.from(-1);\nconst ss = V.from(0), as = V.from(1);\nV.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"), oe(as.toHexString(), 32), oe(ss.toHexString(), 32);\nvar se = {}, Q = {}, yr = af;\nfunction af(e, t) {\n    if (!e) throw new Error(t || \"Assertion failed\");\n}\naf.equal = function(t, r, i) {\n    if (t != r) throw new Error(i || \"Assertion failed: \" + t + \" != \" + r);\n};\nvar Ii = {\n    exports: {}\n};\ntypeof Object.create == \"function\" ? Ii.exports = function(t, r) {\n    r && (t.super_ = r, t.prototype = Object.create(r.prototype, {\n        constructor: {\n            value: t,\n            enumerable: !1,\n            writable: !0,\n            configurable: !0\n        }\n    }));\n} : Ii.exports = function(t, r) {\n    if (r) {\n        t.super_ = r;\n        var i = function() {};\n        i.prototype = r.prototype, t.prototype = new i, t.prototype.constructor = t;\n    }\n};\nvar us = yr, hs = Ii.exports;\nQ.inherits = hs;\nfunction cs(e, t) {\n    return (e.charCodeAt(t) & 64512) !== 55296 || t < 0 || t + 1 >= e.length ? !1 : (e.charCodeAt(t + 1) & 64512) === 56320;\n}\nfunction ls(e, t) {\n    if (Array.isArray(e)) return e.slice();\n    if (!e) return [];\n    var r = [];\n    if (typeof e == \"string\") if (t) {\n        if (t === \"hex\") for(e = e.replace(/[^a-z0-9]+/ig, \"\"), e.length % 2 !== 0 && (e = \"0\" + e), n = 0; n < e.length; n += 2)r.push(parseInt(e[n] + e[n + 1], 16));\n    } else for(var i = 0, n = 0; n < e.length; n++){\n        var o = e.charCodeAt(n);\n        o < 128 ? r[i++] = o : o < 2048 ? (r[i++] = o >> 6 | 192, r[i++] = o & 63 | 128) : cs(e, n) ? (o = 65536 + ((o & 1023) << 10) + (e.charCodeAt(++n) & 1023), r[i++] = o >> 18 | 240, r[i++] = o >> 12 & 63 | 128, r[i++] = o >> 6 & 63 | 128, r[i++] = o & 63 | 128) : (r[i++] = o >> 12 | 224, r[i++] = o >> 6 & 63 | 128, r[i++] = o & 63 | 128);\n    }\n    else for(n = 0; n < e.length; n++)r[n] = e[n] | 0;\n    return r;\n}\nQ.toArray = ls;\nfunction ds(e) {\n    for(var t = \"\", r = 0; r < e.length; r++)t += hf(e[r].toString(16));\n    return t;\n}\nQ.toHex = ds;\nfunction uf(e) {\n    var t = e >>> 24 | e >>> 8 & 65280 | e << 8 & 16711680 | (e & 255) << 24;\n    return t >>> 0;\n}\nQ.htonl = uf;\nfunction ps(e, t) {\n    for(var r = \"\", i = 0; i < e.length; i++){\n        var n = e[i];\n        t === \"little\" && (n = uf(n)), r += cf(n.toString(16));\n    }\n    return r;\n}\nQ.toHex32 = ps;\nfunction hf(e) {\n    return e.length === 1 ? \"0\" + e : e;\n}\nQ.zero2 = hf;\nfunction cf(e) {\n    return e.length === 7 ? \"0\" + e : e.length === 6 ? \"00\" + e : e.length === 5 ? \"000\" + e : e.length === 4 ? \"0000\" + e : e.length === 3 ? \"00000\" + e : e.length === 2 ? \"000000\" + e : e.length === 1 ? \"0000000\" + e : e;\n}\nQ.zero8 = cf;\nfunction vs(e, t, r, i) {\n    var n = r - t;\n    us(n % 4 === 0);\n    for(var o = new Array(n / 4), h = 0, p = t; h < o.length; h++, p += 4){\n        var b;\n        i === \"big\" ? b = e[p] << 24 | e[p + 1] << 16 | e[p + 2] << 8 | e[p + 3] : b = e[p + 3] << 24 | e[p + 2] << 16 | e[p + 1] << 8 | e[p], o[h] = b >>> 0;\n    }\n    return o;\n}\nQ.join32 = vs;\nfunction ms(e, t) {\n    for(var r = new Array(e.length * 4), i = 0, n = 0; i < e.length; i++, n += 4){\n        var o = e[i];\n        t === \"big\" ? (r[n] = o >>> 24, r[n + 1] = o >>> 16 & 255, r[n + 2] = o >>> 8 & 255, r[n + 3] = o & 255) : (r[n + 3] = o >>> 24, r[n + 2] = o >>> 16 & 255, r[n + 1] = o >>> 8 & 255, r[n] = o & 255);\n    }\n    return r;\n}\nQ.split32 = ms;\nfunction gs(e, t) {\n    return e >>> t | e << 32 - t;\n}\nQ.rotr32 = gs;\nfunction As(e, t) {\n    return e << t | e >>> 32 - t;\n}\n_c47 = As;\nQ.rotl32 = As;\nfunction bs(e, t) {\n    return e + t >>> 0;\n}\nQ.sum32 = bs;\nfunction ys(e, t, r) {\n    return e + t + r >>> 0;\n}\nQ.sum32_3 = ys;\nfunction ws(e, t, r, i) {\n    return e + t + r + i >>> 0;\n}\nQ.sum32_4 = ws;\nfunction xs(e, t, r, i, n) {\n    return e + t + r + i + n >>> 0;\n}\nQ.sum32_5 = xs;\nfunction Ms(e, t, r, i) {\n    var n = e[t], o = e[t + 1], h = i + o >>> 0, p = (h < i ? 1 : 0) + r + n;\n    e[t] = p >>> 0, e[t + 1] = h;\n}\n_c48 = Ms;\nQ.sum64 = Ms;\nfunction Es(e, t, r, i) {\n    var n = t + i >>> 0, o = (n < t ? 1 : 0) + e + r;\n    return o >>> 0;\n}\n_c49 = Es;\nQ.sum64_hi = Es;\nfunction Ss(e, t, r, i) {\n    var n = t + i;\n    return n >>> 0;\n}\n_c50 = Ss;\nQ.sum64_lo = Ss;\nfunction Ns(e, t, r, i, n, o, h, p) {\n    var b = 0, m = t;\n    m = m + i >>> 0, b += m < t ? 1 : 0, m = m + o >>> 0, b += m < o ? 1 : 0, m = m + p >>> 0, b += m < p ? 1 : 0;\n    var w = e + r + n + h + b;\n    return w >>> 0;\n}\n_c51 = Ns;\nQ.sum64_4_hi = Ns;\nfunction Is(e, t, r, i, n, o, h, p) {\n    var b = t + i + o + p;\n    return b >>> 0;\n}\n_c52 = Is;\nQ.sum64_4_lo = Is;\nfunction _s(e, t, r, i, n, o, h, p, b, m) {\n    var w = 0, y = t;\n    y = y + i >>> 0, w += y < t ? 1 : 0, y = y + o >>> 0, w += y < o ? 1 : 0, y = y + p >>> 0, w += y < p ? 1 : 0, y = y + m >>> 0, w += y < m ? 1 : 0;\n    var S = e + r + n + h + b + w;\n    return S >>> 0;\n}\nQ.sum64_5_hi = _s;\nfunction Bs(e, t, r, i, n, o, h, p, b, m) {\n    var w = t + i + o + p + m;\n    return w >>> 0;\n}\n_c53 = Bs;\nQ.sum64_5_lo = Bs;\nfunction Cs(e, t, r) {\n    var i = t << 32 - r | e >>> r;\n    return i >>> 0;\n}\n_c54 = Cs;\nQ.rotr64_hi = Cs;\nfunction Rs(e, t, r) {\n    var i = e << 32 - r | t >>> r;\n    return i >>> 0;\n}\n_c55 = Rs;\nQ.rotr64_lo = Rs;\nfunction Os(e, t, r) {\n    return e >>> r;\n}\n_c56 = Os;\nQ.shr64_hi = Os;\nfunction Ps(e, t, r) {\n    var i = e << 32 - r | t >>> r;\n    return i >>> 0;\n}\n_c57 = Ps;\nQ.shr64_lo = Ps;\nvar fr = {}, lf = Q, Ds = yr;\nfunction Fr() {\n    this.pending = null, this.pendingTotal = 0, this.blockSize = this.constructor.blockSize, this.outSize = this.constructor.outSize, this.hmacStrength = this.constructor.hmacStrength, this.padLength = this.constructor.padLength / 8, this.endian = \"big\", this._delta8 = this.blockSize / 8, this._delta32 = this.blockSize / 32;\n}\n_c58 = Fr;\nfr.BlockHash = Fr, Fr.prototype.update = function(t, r) {\n    if (t = lf.toArray(t, r), this.pending ? this.pending = this.pending.concat(t) : this.pending = t, this.pendingTotal += t.length, this.pending.length >= this._delta8) {\n        t = this.pending;\n        var i = t.length % this._delta8;\n        this.pending = t.slice(t.length - i, t.length), this.pending.length === 0 && (this.pending = null), t = lf.join32(t, 0, t.length - i, this.endian);\n        for(var n = 0; n < t.length; n += this._delta32)this._update(t, n, n + this._delta32);\n    }\n    return this;\n}, Fr.prototype.digest = function(t) {\n    return this.update(this._pad()), Ds(this.pending === null), this._digest(t);\n}, Fr.prototype._pad = function() {\n    var t = this.pendingTotal, r = this._delta8, i = r - (t + this.padLength) % r, n = new Array(i + this.padLength);\n    n[0] = 128;\n    for(var o = 1; o < i; o++)n[o] = 0;\n    if (t <<= 3, this.endian === \"big\") {\n        for(var h = 8; h < this.padLength; h++)n[o++] = 0;\n        n[o++] = 0, n[o++] = 0, n[o++] = 0, n[o++] = 0, n[o++] = t >>> 24 & 255, n[o++] = t >>> 16 & 255, n[o++] = t >>> 8 & 255, n[o++] = t & 255;\n    } else for(n[o++] = t & 255, n[o++] = t >>> 8 & 255, n[o++] = t >>> 16 & 255, n[o++] = t >>> 24 & 255, n[o++] = 0, n[o++] = 0, n[o++] = 0, n[o++] = 0, h = 8; h < this.padLength; h++)n[o++] = 0;\n    return n;\n};\nvar or = {}, ae = {}, Fs = Q, ue = Fs.rotr32;\nfunction Ts(e, t, r, i) {\n    if (e === 0) return df(t, r, i);\n    if (e === 1 || e === 3) return vf(t, r, i);\n    if (e === 2) return pf(t, r, i);\n}\n_c59 = Ts;\nae.ft_1 = Ts;\nfunction df(e, t, r) {\n    return e & t ^ ~e & r;\n}\nae.ch32 = df;\nfunction pf(e, t, r) {\n    return e & t ^ e & r ^ t & r;\n}\nae.maj32 = pf;\nfunction vf(e, t, r) {\n    return e ^ t ^ r;\n}\nae.p32 = vf;\nfunction Us(e) {\n    return ue(e, 2) ^ ue(e, 13) ^ ue(e, 22);\n}\n_c60 = Us;\nae.s0_256 = Us;\nfunction ks(e) {\n    return ue(e, 6) ^ ue(e, 11) ^ ue(e, 25);\n}\nae.s1_256 = ks;\nfunction qs(e) {\n    return ue(e, 7) ^ ue(e, 18) ^ e >>> 3;\n}\nae.g0_256 = qs;\nfunction Ks(e) {\n    return ue(e, 17) ^ ue(e, 19) ^ e >>> 10;\n}\n_c61 = Ks;\nae.g1_256 = Ks;\nvar sr = Q, Hs = fr, zs = ae, _i = sr.rotl32, wr = sr.sum32, Ls = sr.sum32_5, js = zs.ft_1, mf = Hs.BlockHash, Qs = [\n    1518500249,\n    1859775393,\n    2400959708,\n    3395469782\n];\nfunction he() {\n    if (!(this instanceof he)) return new he;\n    mf.call(this), this.h = [\n        1732584193,\n        4023233417,\n        2562383102,\n        271733878,\n        3285377520\n    ], this.W = new Array(80);\n}\nsr.inherits(he, mf);\nvar Js = he;\nhe.blockSize = 512, he.outSize = 160, he.hmacStrength = 80, he.padLength = 64, he.prototype._update = function(t, r) {\n    for(var i = this.W, n = 0; n < 16; n++)i[n] = t[r + n];\n    for(; n < i.length; n++)i[n] = _i(i[n - 3] ^ i[n - 8] ^ i[n - 14] ^ i[n - 16], 1);\n    var o = this.h[0], h = this.h[1], p = this.h[2], b = this.h[3], m = this.h[4];\n    for(n = 0; n < i.length; n++){\n        var w = ~~(n / 20), y = Ls(_i(o, 5), js(w, h, p, b), m, i[n], Qs[w]);\n        m = b, b = p, p = _i(h, 30), h = o, o = y;\n    }\n    this.h[0] = wr(this.h[0], o), this.h[1] = wr(this.h[1], h), this.h[2] = wr(this.h[2], p), this.h[3] = wr(this.h[3], b), this.h[4] = wr(this.h[4], m);\n}, he.prototype._digest = function(t) {\n    return t === \"hex\" ? sr.toHex32(this.h, \"big\") : sr.split32(this.h, \"big\");\n};\nvar ar = Q, Gs = fr, ur = ae, Ys = yr, ie = ar.sum32, Vs = ar.sum32_4, Ws = ar.sum32_5, Xs = ur.ch32, Zs = ur.maj32, $s = ur.s0_256, ta = ur.s1_256, ea = ur.g0_256, ra = ur.g1_256, gf = Gs.BlockHash, ia = [\n    1116352408,\n    1899447441,\n    3049323471,\n    3921009573,\n    961987163,\n    1508970993,\n    2453635748,\n    2870763221,\n    3624381080,\n    310598401,\n    607225278,\n    1426881987,\n    1925078388,\n    2162078206,\n    2614888103,\n    3248222580,\n    3835390401,\n    4022224774,\n    264347078,\n    604807628,\n    770255983,\n    1249150122,\n    1555081692,\n    1996064986,\n    2554220882,\n    2821834349,\n    2952996808,\n    3210313671,\n    3336571891,\n    3584528711,\n    113926993,\n    338241895,\n    666307205,\n    773529912,\n    1294757372,\n    1396182291,\n    1695183700,\n    1986661051,\n    2177026350,\n    2456956037,\n    2730485921,\n    2820302411,\n    3259730800,\n    3345764771,\n    3516065817,\n    3600352804,\n    4094571909,\n    275423344,\n    430227734,\n    506948616,\n    659060556,\n    883997877,\n    958139571,\n    1322822218,\n    1537002063,\n    1747873779,\n    1955562222,\n    2024104815,\n    2227730452,\n    2361852424,\n    2428436474,\n    2756734187,\n    3204031479,\n    3329325298\n];\nfunction ce() {\n    if (!(this instanceof ce)) return new ce;\n    gf.call(this), this.h = [\n        1779033703,\n        3144134277,\n        1013904242,\n        2773480762,\n        1359893119,\n        2600822924,\n        528734635,\n        1541459225\n    ], this.k = ia, this.W = new Array(64);\n}\nar.inherits(ce, gf);\nvar Af = ce;\nce.blockSize = 512, ce.outSize = 256, ce.hmacStrength = 192, ce.padLength = 64, ce.prototype._update = function(t, r) {\n    for(var i = this.W, n = 0; n < 16; n++)i[n] = t[r + n];\n    for(; n < i.length; n++)i[n] = Vs(ra(i[n - 2]), i[n - 7], ea(i[n - 15]), i[n - 16]);\n    var o = this.h[0], h = this.h[1], p = this.h[2], b = this.h[3], m = this.h[4], w = this.h[5], y = this.h[6], S = this.h[7];\n    for(Ys(this.k.length === i.length), n = 0; n < i.length; n++){\n        var I = Ws(S, ta(m), Xs(m, w, y), this.k[n], i[n]), N = ie($s(o), Zs(o, h, p));\n        S = y, y = w, w = m, m = ie(b, I), b = p, p = h, h = o, o = ie(I, N);\n    }\n    this.h[0] = ie(this.h[0], o), this.h[1] = ie(this.h[1], h), this.h[2] = ie(this.h[2], p), this.h[3] = ie(this.h[3], b), this.h[4] = ie(this.h[4], m), this.h[5] = ie(this.h[5], w), this.h[6] = ie(this.h[6], y), this.h[7] = ie(this.h[7], S);\n}, ce.prototype._digest = function(t) {\n    return t === \"hex\" ? ar.toHex32(this.h, \"big\") : ar.split32(this.h, \"big\");\n};\nvar Bi = Q, bf = Af;\nfunction ye() {\n    if (!(this instanceof ye)) return new ye;\n    bf.call(this), this.h = [\n        3238371032,\n        914150663,\n        812702999,\n        4144912697,\n        4290775857,\n        1750603025,\n        1694076839,\n        3204075428\n    ];\n}\nBi.inherits(ye, bf);\nvar na = ye;\nye.blockSize = 512, ye.outSize = 224, ye.hmacStrength = 192, ye.padLength = 64, ye.prototype._digest = function(t) {\n    return t === \"hex\" ? Bi.toHex32(this.h.slice(0, 7), \"big\") : Bi.split32(this.h.slice(0, 7), \"big\");\n};\nvar jt = Q, fa = fr, oa = yr, le = jt.rotr64_hi, de = jt.rotr64_lo, yf = jt.shr64_hi, wf = jt.shr64_lo, Be = jt.sum64, Ci = jt.sum64_hi, Ri = jt.sum64_lo, sa = jt.sum64_4_hi, aa = jt.sum64_4_lo, ua = jt.sum64_5_hi, ha = jt.sum64_5_lo, xf = fa.BlockHash, ca = [\n    1116352408,\n    3609767458,\n    1899447441,\n    602891725,\n    3049323471,\n    3964484399,\n    3921009573,\n    2173295548,\n    961987163,\n    4081628472,\n    1508970993,\n    3053834265,\n    2453635748,\n    2937671579,\n    2870763221,\n    3664609560,\n    3624381080,\n    2734883394,\n    310598401,\n    1164996542,\n    607225278,\n    1323610764,\n    1426881987,\n    3590304994,\n    1925078388,\n    4068182383,\n    2162078206,\n    991336113,\n    2614888103,\n    633803317,\n    3248222580,\n    3479774868,\n    3835390401,\n    2666613458,\n    4022224774,\n    944711139,\n    264347078,\n    2341262773,\n    604807628,\n    2007800933,\n    770255983,\n    1495990901,\n    1249150122,\n    1856431235,\n    1555081692,\n    3175218132,\n    1996064986,\n    2198950837,\n    2554220882,\n    3999719339,\n    2821834349,\n    766784016,\n    2952996808,\n    2566594879,\n    3210313671,\n    3203337956,\n    3336571891,\n    1034457026,\n    3584528711,\n    2466948901,\n    113926993,\n    3758326383,\n    338241895,\n    168717936,\n    666307205,\n    1188179964,\n    773529912,\n    1546045734,\n    1294757372,\n    1522805485,\n    1396182291,\n    2643833823,\n    1695183700,\n    2343527390,\n    1986661051,\n    1014477480,\n    2177026350,\n    1206759142,\n    2456956037,\n    344077627,\n    2730485921,\n    1290863460,\n    2820302411,\n    3158454273,\n    3259730800,\n    3505952657,\n    3345764771,\n    106217008,\n    3516065817,\n    3606008344,\n    3600352804,\n    1432725776,\n    4094571909,\n    1467031594,\n    275423344,\n    851169720,\n    430227734,\n    3100823752,\n    506948616,\n    1363258195,\n    659060556,\n    3750685593,\n    883997877,\n    3785050280,\n    958139571,\n    3318307427,\n    1322822218,\n    3812723403,\n    1537002063,\n    2003034995,\n    1747873779,\n    3602036899,\n    1955562222,\n    1575990012,\n    2024104815,\n    1125592928,\n    2227730452,\n    2716904306,\n    2361852424,\n    442776044,\n    2428436474,\n    593698344,\n    2756734187,\n    3733110249,\n    3204031479,\n    2999351573,\n    3329325298,\n    3815920427,\n    3391569614,\n    3928383900,\n    3515267271,\n    566280711,\n    3940187606,\n    3454069534,\n    4118630271,\n    4000239992,\n    116418474,\n    1914138554,\n    174292421,\n    2731055270,\n    289380356,\n    3203993006,\n    460393269,\n    320620315,\n    685471733,\n    587496836,\n    852142971,\n    1086792851,\n    1017036298,\n    365543100,\n    1126000580,\n    2618297676,\n    1288033470,\n    3409855158,\n    1501505948,\n    4234509866,\n    1607167915,\n    987167468,\n    1816402316,\n    1246189591\n];\nfunction ne() {\n    if (!(this instanceof ne)) return new ne;\n    xf.call(this), this.h = [\n        1779033703,\n        4089235720,\n        3144134277,\n        2227873595,\n        1013904242,\n        4271175723,\n        2773480762,\n        1595750129,\n        1359893119,\n        2917565137,\n        2600822924,\n        725511199,\n        528734635,\n        4215389547,\n        1541459225,\n        327033209\n    ], this.k = ca, this.W = new Array(160);\n}\njt.inherits(ne, xf);\nvar Mf = ne;\nne.blockSize = 1024, ne.outSize = 512, ne.hmacStrength = 192, ne.padLength = 128, ne.prototype._prepareBlock = function(t, r) {\n    for(var i = this.W, n = 0; n < 32; n++)i[n] = t[r + n];\n    for(; n < i.length; n += 2){\n        var o = xa(i[n - 4], i[n - 3]), h = Ma(i[n - 4], i[n - 3]), p = i[n - 14], b = i[n - 13], m = ya(i[n - 30], i[n - 29]), w = wa(i[n - 30], i[n - 29]), y = i[n - 32], S = i[n - 31];\n        i[n] = sa(o, h, p, b, m, w, y, S), i[n + 1] = aa(o, h, p, b, m, w, y, S);\n    }\n}, ne.prototype._update = function(t, r) {\n    this._prepareBlock(t, r);\n    var i = this.W, n = this.h[0], o = this.h[1], h = this.h[2], p = this.h[3], b = this.h[4], m = this.h[5], w = this.h[6], y = this.h[7], S = this.h[8], I = this.h[9], N = this.h[10], C = this.h[11], F = this.h[12], U = this.h[13], J = this.h[14], Bt = this.h[15];\n    oa(this.k.length === i.length);\n    for(var G = 0; G < i.length; G += 2){\n        var H = J, z = Bt, Pt = Aa(S, I), W = ba(S, I), Rt = la(S, I, N, C, F), Yt = da(S, I, N, C, F, U), Y = this.k[G], Vt = this.k[G + 1], A = i[G], f = i[G + 1], a = ua(H, z, Pt, W, Rt, Yt, Y, Vt, A, f), c = ha(H, z, Pt, W, Rt, Yt, Y, Vt, A, f);\n        H = ma(n, o), z = ga(n, o), Pt = pa(n, o, h, p, b), W = va(n, o, h, p, b, m);\n        var d = Ci(H, z, Pt, W), g = Ri(H, z, Pt, W);\n        J = F, Bt = U, F = N, U = C, N = S, C = I, S = Ci(w, y, a, c), I = Ri(y, y, a, c), w = b, y = m, b = h, m = p, h = n, p = o, n = Ci(a, c, d, g), o = Ri(a, c, d, g);\n    }\n    Be(this.h, 0, n, o), Be(this.h, 2, h, p), Be(this.h, 4, b, m), Be(this.h, 6, w, y), Be(this.h, 8, S, I), Be(this.h, 10, N, C), Be(this.h, 12, F, U), Be(this.h, 14, J, Bt);\n}, ne.prototype._digest = function(t) {\n    return t === \"hex\" ? jt.toHex32(this.h, \"big\") : jt.split32(this.h, \"big\");\n};\nfunction la(e, t, r, i, n) {\n    var o = e & r ^ ~e & n;\n    return o < 0 && (o += 4294967296), o;\n}\nfunction da(e, t, r, i, n, o) {\n    var h = t & i ^ ~t & o;\n    return h < 0 && (h += 4294967296), h;\n}\nfunction pa(e, t, r, i, n) {\n    var o = e & r ^ e & n ^ r & n;\n    return o < 0 && (o += 4294967296), o;\n}\nfunction va(e, t, r, i, n, o) {\n    var h = t & i ^ t & o ^ i & o;\n    return h < 0 && (h += 4294967296), h;\n}\nfunction ma(e, t) {\n    var r = le(e, t, 28), i = le(t, e, 2), n = le(t, e, 7), o = r ^ i ^ n;\n    return o < 0 && (o += 4294967296), o;\n}\nfunction ga(e, t) {\n    var r = de(e, t, 28), i = de(t, e, 2), n = de(t, e, 7), o = r ^ i ^ n;\n    return o < 0 && (o += 4294967296), o;\n}\nfunction Aa(e, t) {\n    var r = le(e, t, 14), i = le(e, t, 18), n = le(t, e, 9), o = r ^ i ^ n;\n    return o < 0 && (o += 4294967296), o;\n}\n_c62 = Aa;\nfunction ba(e, t) {\n    var r = de(e, t, 14), i = de(e, t, 18), n = de(t, e, 9), o = r ^ i ^ n;\n    return o < 0 && (o += 4294967296), o;\n}\nfunction ya(e, t) {\n    var r = le(e, t, 1), i = le(e, t, 8), n = yf(e, t, 7), o = r ^ i ^ n;\n    return o < 0 && (o += 4294967296), o;\n}\nfunction wa(e, t) {\n    var r = de(e, t, 1), i = de(e, t, 8), n = wf(e, t, 7), o = r ^ i ^ n;\n    return o < 0 && (o += 4294967296), o;\n}\nfunction xa(e, t) {\n    var r = le(e, t, 19), i = le(t, e, 29), n = yf(e, t, 6), o = r ^ i ^ n;\n    return o < 0 && (o += 4294967296), o;\n}\nfunction Ma(e, t) {\n    var r = de(e, t, 19), i = de(t, e, 29), n = wf(e, t, 6), o = r ^ i ^ n;\n    return o < 0 && (o += 4294967296), o;\n}\n_c63 = Ma;\nvar Oi = Q, Ef = Mf;\nfunction we() {\n    if (!(this instanceof we)) return new we;\n    Ef.call(this), this.h = [\n        3418070365,\n        3238371032,\n        1654270250,\n        914150663,\n        2438529370,\n        812702999,\n        355462360,\n        4144912697,\n        1731405415,\n        4290775857,\n        2394180231,\n        1750603025,\n        3675008525,\n        1694076839,\n        1203062813,\n        3204075428\n    ];\n}\nOi.inherits(we, Ef);\nvar Ea = we;\nwe.blockSize = 1024, we.outSize = 384, we.hmacStrength = 192, we.padLength = 128, we.prototype._digest = function(t) {\n    return t === \"hex\" ? Oi.toHex32(this.h.slice(0, 12), \"big\") : Oi.split32(this.h.slice(0, 12), \"big\");\n}, or.sha1 = Js, or.sha224 = na, or.sha256 = Af, or.sha384 = Ea, or.sha512 = Mf;\nvar Sf = {}, Xe = Q, Sa = fr, Tr = Xe.rotl32, Nf = Xe.sum32, xr = Xe.sum32_3, If = Xe.sum32_4, _f = Sa.BlockHash;\nfunction pe() {\n    if (!(this instanceof pe)) return new pe;\n    _f.call(this), this.h = [\n        1732584193,\n        4023233417,\n        2562383102,\n        271733878,\n        3285377520\n    ], this.endian = \"little\";\n}\nXe.inherits(pe, _f), Sf.ripemd160 = pe, pe.blockSize = 512, pe.outSize = 160, pe.hmacStrength = 192, pe.padLength = 64, pe.prototype._update = function(t, r) {\n    for(var i = this.h[0], n = this.h[1], o = this.h[2], h = this.h[3], p = this.h[4], b = i, m = n, w = o, y = h, S = p, I = 0; I < 80; I++){\n        var N = Nf(Tr(If(i, Bf(I, n, o, h), t[_a[I] + r], Na(I)), Ca[I]), p);\n        i = p, p = h, h = Tr(o, 10), o = n, n = N, N = Nf(Tr(If(b, Bf(79 - I, m, w, y), t[Ba[I] + r], Ia(I)), Ra[I]), S), b = S, S = y, y = Tr(w, 10), w = m, m = N;\n    }\n    N = xr(this.h[1], o, y), this.h[1] = xr(this.h[2], h, S), this.h[2] = xr(this.h[3], p, b), this.h[3] = xr(this.h[4], i, m), this.h[4] = xr(this.h[0], n, w), this.h[0] = N;\n}, pe.prototype._digest = function(t) {\n    return t === \"hex\" ? Xe.toHex32(this.h, \"little\") : Xe.split32(this.h, \"little\");\n};\nfunction Bf(e, t, r, i) {\n    return e <= 15 ? t ^ r ^ i : e <= 31 ? t & r | ~t & i : e <= 47 ? (t | ~r) ^ i : e <= 63 ? t & i | r & ~i : t ^ (r | ~i);\n}\n_c64 = Bf;\nfunction Na(e) {\n    return e <= 15 ? 0 : e <= 31 ? 1518500249 : e <= 47 ? 1859775393 : e <= 63 ? 2400959708 : 2840853838;\n}\n_c65 = Na;\nfunction Ia(e) {\n    return e <= 15 ? 1352829926 : e <= 31 ? 1548603684 : e <= 47 ? 1836072691 : e <= 63 ? 2053994217 : 0;\n}\n_c66 = Ia;\nvar _a = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    7,\n    4,\n    13,\n    1,\n    10,\n    6,\n    15,\n    3,\n    12,\n    0,\n    9,\n    5,\n    2,\n    14,\n    11,\n    8,\n    3,\n    10,\n    14,\n    4,\n    9,\n    15,\n    8,\n    1,\n    2,\n    7,\n    0,\n    6,\n    13,\n    11,\n    5,\n    12,\n    1,\n    9,\n    11,\n    10,\n    0,\n    8,\n    12,\n    4,\n    13,\n    3,\n    7,\n    15,\n    14,\n    5,\n    6,\n    2,\n    4,\n    0,\n    5,\n    9,\n    7,\n    12,\n    2,\n    10,\n    14,\n    1,\n    3,\n    8,\n    11,\n    6,\n    15,\n    13\n], Ba = [\n    5,\n    14,\n    7,\n    0,\n    9,\n    2,\n    11,\n    4,\n    13,\n    6,\n    15,\n    8,\n    1,\n    10,\n    3,\n    12,\n    6,\n    11,\n    3,\n    7,\n    0,\n    13,\n    5,\n    10,\n    14,\n    15,\n    8,\n    12,\n    4,\n    9,\n    1,\n    2,\n    15,\n    5,\n    1,\n    3,\n    7,\n    14,\n    6,\n    9,\n    11,\n    8,\n    12,\n    2,\n    10,\n    0,\n    4,\n    13,\n    8,\n    6,\n    4,\n    1,\n    3,\n    11,\n    15,\n    0,\n    5,\n    12,\n    2,\n    13,\n    9,\n    7,\n    10,\n    14,\n    12,\n    15,\n    10,\n    4,\n    1,\n    5,\n    8,\n    7,\n    6,\n    2,\n    13,\n    14,\n    0,\n    3,\n    9,\n    11\n], Ca = [\n    11,\n    14,\n    15,\n    12,\n    5,\n    8,\n    7,\n    9,\n    11,\n    13,\n    14,\n    15,\n    6,\n    7,\n    9,\n    8,\n    7,\n    6,\n    8,\n    13,\n    11,\n    9,\n    7,\n    15,\n    7,\n    12,\n    15,\n    9,\n    11,\n    7,\n    13,\n    12,\n    11,\n    13,\n    6,\n    7,\n    14,\n    9,\n    13,\n    15,\n    14,\n    8,\n    13,\n    6,\n    5,\n    12,\n    7,\n    5,\n    11,\n    12,\n    14,\n    15,\n    14,\n    15,\n    9,\n    8,\n    9,\n    14,\n    5,\n    6,\n    8,\n    6,\n    5,\n    12,\n    9,\n    15,\n    5,\n    11,\n    6,\n    8,\n    13,\n    12,\n    5,\n    12,\n    13,\n    14,\n    11,\n    8,\n    5,\n    6\n], Ra = [\n    8,\n    9,\n    9,\n    11,\n    13,\n    15,\n    15,\n    5,\n    7,\n    7,\n    8,\n    11,\n    14,\n    14,\n    12,\n    6,\n    9,\n    13,\n    15,\n    7,\n    12,\n    8,\n    9,\n    11,\n    7,\n    7,\n    12,\n    7,\n    6,\n    15,\n    13,\n    11,\n    9,\n    7,\n    15,\n    11,\n    8,\n    6,\n    6,\n    14,\n    12,\n    13,\n    5,\n    14,\n    13,\n    13,\n    7,\n    5,\n    15,\n    5,\n    8,\n    11,\n    14,\n    14,\n    6,\n    14,\n    6,\n    9,\n    12,\n    9,\n    12,\n    5,\n    15,\n    8,\n    8,\n    5,\n    12,\n    9,\n    12,\n    5,\n    14,\n    6,\n    8,\n    13,\n    6,\n    5,\n    15,\n    13,\n    11,\n    11\n], Oa = Q, Pa = yr;\nfunction hr(e, t, r) {\n    if (!(this instanceof hr)) return new hr(e, t, r);\n    this.Hash = e, this.blockSize = e.blockSize / 8, this.outSize = e.outSize / 8, this.inner = null, this.outer = null, this._init(Oa.toArray(t, r));\n}\nvar Da = hr;\nhr.prototype._init = function(t) {\n    t.length > this.blockSize && (t = new this.Hash().update(t).digest()), Pa(t.length <= this.blockSize);\n    for(var r = t.length; r < this.blockSize; r++)t.push(0);\n    for(r = 0; r < t.length; r++)t[r] ^= 54;\n    for(this.inner = new this.Hash().update(t), r = 0; r < t.length; r++)t[r] ^= 106;\n    this.outer = new this.Hash().update(t);\n}, hr.prototype.update = function(t, r) {\n    return this.inner.update(t, r), this;\n}, hr.prototype.digest = function(t) {\n    return this.outer.update(this.inner.digest()), this.outer.digest(t);\n}, function(e) {\n    var t = e;\n    t.utils = Q, t.common = fr, t.sha = or, t.ripemd = Sf, t.hmac = Da, t.sha1 = t.sha.sha1, t.sha256 = t.sha.sha256, t.sha224 = t.sha.sha224, t.sha384 = t.sha.sha384, t.sha512 = t.sha.sha512, t.ripemd160 = t.ripemd.ripemd160;\n}(se);\nfunction cr(e, t, r) {\n    return r = {\n        path: t,\n        exports: {},\n        require: function(i, n) {\n            return Fa(i, n !== null && n !== void 0 ? n : r.path);\n        }\n    }, e(r, r.exports), r.exports;\n}\nfunction Fa() {\n    throw new Error(\"Dynamic requires are not currently supported by @rollup/plugin-commonjs\");\n}\n_c67 = Fa;\nvar Pi = Cf;\nfunction Cf(e, t) {\n    if (!e) throw new Error(t || \"Assertion failed\");\n}\n_c68 = Cf;\nCf.equal = function(t, r, i) {\n    if (t != r) throw new Error(i || \"Assertion failed: \" + t + \" != \" + r);\n};\nvar fe = cr(function(e, t) {\n    var r = t;\n    function i(h, p) {\n        if (Array.isArray(h)) return h.slice();\n        if (!h) return [];\n        var b = [];\n        if (typeof h != \"string\") {\n            for(var m = 0; m < h.length; m++)b[m] = h[m] | 0;\n            return b;\n        }\n        if (p === \"hex\") {\n            h = h.replace(/[^a-z0-9]+/ig, \"\"), h.length % 2 !== 0 && (h = \"0\" + h);\n            for(var m = 0; m < h.length; m += 2)b.push(parseInt(h[m] + h[m + 1], 16));\n        } else for(var m = 0; m < h.length; m++){\n            var w = h.charCodeAt(m), y = w >> 8, S = w & 255;\n            y ? b.push(y, S) : b.push(S);\n        }\n        return b;\n    }\n    r.toArray = i;\n    function n(h) {\n        return h.length === 1 ? \"0\" + h : h;\n    }\n    r.zero2 = n;\n    function o(h) {\n        for(var p = \"\", b = 0; b < h.length; b++)p += n(h[b].toString(16));\n        return p;\n    }\n    r.toHex = o, r.encode = function(p, b) {\n        return b === \"hex\" ? o(p) : p;\n    };\n}), Jt = cr(function(e, t) {\n    var r = t;\n    r.assert = Pi, r.toArray = fe.toArray, r.zero2 = fe.zero2, r.toHex = fe.toHex, r.encode = fe.encode;\n    function i(b, m, w) {\n        var y = new Array(Math.max(b.bitLength(), w) + 1);\n        y.fill(0);\n        for(var S = 1 << m + 1, I = b.clone(), N = 0; N < y.length; N++){\n            var C, F = I.andln(S - 1);\n            I.isOdd() ? (F > (S >> 1) - 1 ? C = (S >> 1) - F : C = F, I.isubn(C)) : C = 0, y[N] = C, I.iushrn(1);\n        }\n        return y;\n    }\n    r.getNAF = i;\n    function n(b, m) {\n        var w = [\n            [],\n            []\n        ];\n        b = b.clone(), m = m.clone();\n        for(var y = 0, S = 0, I; b.cmpn(-y) > 0 || m.cmpn(-S) > 0;){\n            var N = b.andln(3) + y & 3, C = m.andln(3) + S & 3;\n            N === 3 && (N = -1), C === 3 && (C = -1);\n            var F;\n            N & 1 ? (I = b.andln(7) + y & 7, (I === 3 || I === 5) && C === 2 ? F = -N : F = N) : F = 0, w[0].push(F);\n            var U;\n            C & 1 ? (I = m.andln(7) + S & 7, (I === 3 || I === 5) && N === 2 ? U = -C : U = C) : U = 0, w[1].push(U), 2 * y === F + 1 && (y = 1 - y), 2 * S === U + 1 && (S = 1 - S), b.iushrn(1), m.iushrn(1);\n        }\n        return w;\n    }\n    r.getJSF = n;\n    function o(b, m, w) {\n        var y = \"_\" + m;\n        b.prototype[m] = function() {\n            return this[y] !== void 0 ? this[y] : this[y] = w.call(this);\n        };\n    }\n    r.cachedProperty = o;\n    function h(b) {\n        return typeof b == \"string\" ? r.toArray(b, \"hex\") : b;\n    }\n    r.parseBytes = h;\n    function p(b) {\n        return new K(b, \"hex\", \"le\");\n    }\n    r.intFromLE = p;\n}), Ur = Jt.getNAF, Ta = Jt.getJSF, kr = Jt.assert;\nfunction Ce(e, t) {\n    this.type = e, this.p = new K(t.p, 16), this.red = t.prime ? K.red(t.prime) : K.mont(this.p), this.zero = new K(0).toRed(this.red), this.one = new K(1).toRed(this.red), this.two = new K(2).toRed(this.red), this.n = t.n && new K(t.n, 16), this.g = t.g && this.pointFromJSON(t.g, t.gRed), this._wnafT1 = new Array(4), this._wnafT2 = new Array(4), this._wnafT3 = new Array(4), this._wnafT4 = new Array(4), this._bitLength = this.n ? this.n.bitLength() : 0;\n    var r = this.n && this.p.div(this.n);\n    !r || r.cmpn(100) > 0 ? this.redN = null : (this._maxwellTrick = !0, this.redN = this.n.toRed(this.red));\n}\n_c69 = Ce;\nvar Ze = Ce;\nCe.prototype.point = function() {\n    throw new Error(\"Not implemented\");\n}, Ce.prototype.validate = function() {\n    throw new Error(\"Not implemented\");\n}, Ce.prototype._fixedNafMul = function(t, r) {\n    kr(t.precomputed);\n    var i = t._getDoubles(), n = Ur(r, 1, this._bitLength), o = (1 << i.step + 1) - (i.step % 2 === 0 ? 2 : 1);\n    o /= 3;\n    var h = [], p, b;\n    for(p = 0; p < n.length; p += i.step){\n        b = 0;\n        for(var m = p + i.step - 1; m >= p; m--)b = (b << 1) + n[m];\n        h.push(b);\n    }\n    for(var w = this.jpoint(null, null, null), y = this.jpoint(null, null, null), S = o; S > 0; S--){\n        for(p = 0; p < h.length; p++)b = h[p], b === S ? y = y.mixedAdd(i.points[p]) : b === -S && (y = y.mixedAdd(i.points[p].neg()));\n        w = w.add(y);\n    }\n    return w.toP();\n}, Ce.prototype._wnafMul = function(t, r) {\n    var i = 4, n = t._getNAFPoints(i);\n    i = n.wnd;\n    for(var o = n.points, h = Ur(r, i, this._bitLength), p = this.jpoint(null, null, null), b = h.length - 1; b >= 0; b--){\n        for(var m = 0; b >= 0 && h[b] === 0; b--)m++;\n        if (b >= 0 && m++, p = p.dblp(m), b < 0) break;\n        var w = h[b];\n        kr(w !== 0), t.type === \"affine\" ? w > 0 ? p = p.mixedAdd(o[w - 1 >> 1]) : p = p.mixedAdd(o[-w - 1 >> 1].neg()) : w > 0 ? p = p.add(o[w - 1 >> 1]) : p = p.add(o[-w - 1 >> 1].neg());\n    }\n    return t.type === \"affine\" ? p.toP() : p;\n}, Ce.prototype._wnafMulAdd = function(t, r, i, n, o) {\n    var h = this._wnafT1, p = this._wnafT2, b = this._wnafT3, m = 0, w, y, S;\n    for(w = 0; w < n; w++){\n        S = r[w];\n        var I = S._getNAFPoints(t);\n        h[w] = I.wnd, p[w] = I.points;\n    }\n    for(w = n - 1; w >= 1; w -= 2){\n        var N = w - 1, C = w;\n        if (h[N] !== 1 || h[C] !== 1) {\n            b[N] = Ur(i[N], h[N], this._bitLength), b[C] = Ur(i[C], h[C], this._bitLength), m = Math.max(b[N].length, m), m = Math.max(b[C].length, m);\n            continue;\n        }\n        var F = [\n            r[N],\n            null,\n            null,\n            r[C]\n        ];\n        r[N].y.cmp(r[C].y) === 0 ? (F[1] = r[N].add(r[C]), F[2] = r[N].toJ().mixedAdd(r[C].neg())) : r[N].y.cmp(r[C].y.redNeg()) === 0 ? (F[1] = r[N].toJ().mixedAdd(r[C]), F[2] = r[N].add(r[C].neg())) : (F[1] = r[N].toJ().mixedAdd(r[C]), F[2] = r[N].toJ().mixedAdd(r[C].neg()));\n        var U = [\n            -3,\n            -1,\n            -5,\n            -7,\n            0,\n            7,\n            5,\n            1,\n            3\n        ], J = Ta(i[N], i[C]);\n        for(m = Math.max(J[0].length, m), b[N] = new Array(m), b[C] = new Array(m), y = 0; y < m; y++){\n            var Bt = J[0][y] | 0, G = J[1][y] | 0;\n            b[N][y] = U[(Bt + 1) * 3 + (G + 1)], b[C][y] = 0, p[N] = F;\n        }\n    }\n    var H = this.jpoint(null, null, null), z = this._wnafT4;\n    for(w = m; w >= 0; w--){\n        for(var Pt = 0; w >= 0;){\n            var W = !0;\n            for(y = 0; y < n; y++)z[y] = b[y][w] | 0, z[y] !== 0 && (W = !1);\n            if (!W) break;\n            Pt++, w--;\n        }\n        if (w >= 0 && Pt++, H = H.dblp(Pt), w < 0) break;\n        for(y = 0; y < n; y++){\n            var Rt = z[y];\n            Rt !== 0 && (Rt > 0 ? S = p[y][Rt - 1 >> 1] : Rt < 0 && (S = p[y][-Rt - 1 >> 1].neg()), S.type === \"affine\" ? H = H.mixedAdd(S) : H = H.add(S));\n        }\n    }\n    for(w = 0; w < n; w++)p[w] = null;\n    return o ? H : H.toP();\n};\nfunction Xt(e, t) {\n    this.curve = e, this.type = t, this.precomputed = null;\n}\n_c70 = Xt;\nCe.BasePoint = Xt, Xt.prototype.eq = function() {\n    throw new Error(\"Not implemented\");\n}, Xt.prototype.validate = function() {\n    return this.curve.validate(this);\n}, Ce.prototype.decodePoint = function(t, r) {\n    t = Jt.toArray(t, r);\n    var i = this.p.byteLength();\n    if ((t[0] === 4 || t[0] === 6 || t[0] === 7) && t.length - 1 === 2 * i) {\n        t[0] === 6 ? kr(t[t.length - 1] % 2 === 0) : t[0] === 7 && kr(t[t.length - 1] % 2 === 1);\n        var n = this.point(t.slice(1, 1 + i), t.slice(1 + i, 1 + 2 * i));\n        return n;\n    } else if ((t[0] === 2 || t[0] === 3) && t.length - 1 === i) return this.pointFromX(t.slice(1, 1 + i), t[0] === 3);\n    throw new Error(\"Unknown point format\");\n}, Xt.prototype.encodeCompressed = function(t) {\n    return this.encode(t, !0);\n}, Xt.prototype._encode = function(t) {\n    var r = this.curve.p.byteLength(), i = this.getX().toArray(\"be\", r);\n    return t ? [\n        this.getY().isEven() ? 2 : 3\n    ].concat(i) : [\n        4\n    ].concat(i, this.getY().toArray(\"be\", r));\n}, Xt.prototype.encode = function(t, r) {\n    return Jt.encode(this._encode(r), t);\n}, Xt.prototype.precompute = function(t) {\n    if (this.precomputed) return this;\n    var r = {\n        doubles: null,\n        naf: null,\n        beta: null\n    };\n    return r.naf = this._getNAFPoints(8), r.doubles = this._getDoubles(4, t), r.beta = this._getBeta(), this.precomputed = r, this;\n}, Xt.prototype._hasDoubles = function(t) {\n    if (!this.precomputed) return !1;\n    var r = this.precomputed.doubles;\n    return r ? r.points.length >= Math.ceil((t.bitLength() + 1) / r.step) : !1;\n}, Xt.prototype._getDoubles = function(t, r) {\n    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;\n    for(var i = [\n        this\n    ], n = this, o = 0; o < r; o += t){\n        for(var h = 0; h < t; h++)n = n.dbl();\n        i.push(n);\n    }\n    return {\n        step: t,\n        points: i\n    };\n}, Xt.prototype._getNAFPoints = function(t) {\n    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;\n    for(var r = [\n        this\n    ], i = (1 << t) - 1, n = i === 1 ? null : this.dbl(), o = 1; o < i; o++)r[o] = r[o - 1].add(n);\n    return {\n        wnd: t,\n        points: r\n    };\n}, Xt.prototype._getBeta = function() {\n    return null;\n}, Xt.prototype.dblp = function(t) {\n    for(var r = this, i = 0; i < t; i++)r = r.dbl();\n    return r;\n};\nvar Di = cr(function(e) {\n    typeof Object.create == \"function\" ? e.exports = function(r, i) {\n        i && (r.super_ = i, r.prototype = Object.create(i.prototype, {\n            constructor: {\n                value: r,\n                enumerable: !1,\n                writable: !0,\n                configurable: !0\n            }\n        }));\n    } : e.exports = function(r, i) {\n        if (i) {\n            r.super_ = i;\n            var n = function() {};\n            n.prototype = i.prototype, r.prototype = new n, r.prototype.constructor = r;\n        }\n    };\n}), Ua = Jt.assert;\nfunction Zt(e) {\n    Ze.call(this, \"short\", e), this.a = new K(e.a, 16).toRed(this.red), this.b = new K(e.b, 16).toRed(this.red), this.tinv = this.two.redInvm(), this.zeroA = this.a.fromRed().cmpn(0) === 0, this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0, this.endo = this._getEndomorphism(e), this._endoWnafT1 = new Array(4), this._endoWnafT2 = new Array(4);\n}\n_c71 = Zt;\nDi(Zt, Ze);\nvar ka = Zt;\nZt.prototype._getEndomorphism = function(t) {\n    if (!(!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)) {\n        var r, i;\n        if (t.beta) r = new K(t.beta, 16).toRed(this.red);\n        else {\n            var n = this._getEndoRoots(this.p);\n            r = n[0].cmp(n[1]) < 0 ? n[0] : n[1], r = r.toRed(this.red);\n        }\n        if (t.lambda) i = new K(t.lambda, 16);\n        else {\n            var o = this._getEndoRoots(this.n);\n            this.g.mul(o[0]).x.cmp(this.g.x.redMul(r)) === 0 ? i = o[0] : (i = o[1], Ua(this.g.mul(i).x.cmp(this.g.x.redMul(r)) === 0));\n        }\n        var h;\n        return t.basis ? h = t.basis.map(function(p) {\n            return {\n                a: new K(p.a, 16),\n                b: new K(p.b, 16)\n            };\n        }) : h = this._getEndoBasis(i), {\n            beta: r,\n            lambda: i,\n            basis: h\n        };\n    }\n}, Zt.prototype._getEndoRoots = function(t) {\n    var r = t === this.p ? this.red : K.mont(t), i = new K(2).toRed(r).redInvm(), n = i.redNeg(), o = new K(3).toRed(r).redNeg().redSqrt().redMul(i), h = n.redAdd(o).fromRed(), p = n.redSub(o).fromRed();\n    return [\n        h,\n        p\n    ];\n}, Zt.prototype._getEndoBasis = function(t) {\n    for(var r = this.n.ushrn(Math.floor(this.n.bitLength() / 2)), i = t, n = this.n.clone(), o = new K(1), h = new K(0), p = new K(0), b = new K(1), m, w, y, S, I, N, C, F = 0, U, J; i.cmpn(0) !== 0;){\n        var Bt = n.div(i);\n        U = n.sub(Bt.mul(i)), J = p.sub(Bt.mul(o));\n        var G = b.sub(Bt.mul(h));\n        if (!y && U.cmp(r) < 0) m = C.neg(), w = o, y = U.neg(), S = J;\n        else if (y && ++F === 2) break;\n        C = U, n = i, i = U, p = o, o = J, b = h, h = G;\n    }\n    I = U.neg(), N = J;\n    var H = y.sqr().add(S.sqr()), z = I.sqr().add(N.sqr());\n    return z.cmp(H) >= 0 && (I = m, N = w), y.negative && (y = y.neg(), S = S.neg()), I.negative && (I = I.neg(), N = N.neg()), [\n        {\n            a: y,\n            b: S\n        },\n        {\n            a: I,\n            b: N\n        }\n    ];\n}, Zt.prototype._endoSplit = function(t) {\n    var r = this.endo.basis, i = r[0], n = r[1], o = n.b.mul(t).divRound(this.n), h = i.b.neg().mul(t).divRound(this.n), p = o.mul(i.a), b = h.mul(n.a), m = o.mul(i.b), w = h.mul(n.b), y = t.sub(p).sub(b), S = m.add(w).neg();\n    return {\n        k1: y,\n        k2: S\n    };\n}, Zt.prototype.pointFromX = function(t, r) {\n    t = new K(t, 16), t.red || (t = t.toRed(this.red));\n    var i = t.redSqr().redMul(t).redIAdd(t.redMul(this.a)).redIAdd(this.b), n = i.redSqrt();\n    if (n.redSqr().redSub(i).cmp(this.zero) !== 0) throw new Error(\"invalid point\");\n    var o = n.fromRed().isOdd();\n    return (r && !o || !r && o) && (n = n.redNeg()), this.point(t, n);\n}, Zt.prototype.validate = function(t) {\n    if (t.inf) return !0;\n    var r = t.x, i = t.y, n = this.a.redMul(r), o = r.redSqr().redMul(r).redIAdd(n).redIAdd(this.b);\n    return i.redSqr().redISub(o).cmpn(0) === 0;\n}, Zt.prototype._endoWnafMulAdd = function(t, r, i) {\n    for(var n = this._endoWnafT1, o = this._endoWnafT2, h = 0; h < t.length; h++){\n        var p = this._endoSplit(r[h]), b = t[h], m = b._getBeta();\n        p.k1.negative && (p.k1.ineg(), b = b.neg(!0)), p.k2.negative && (p.k2.ineg(), m = m.neg(!0)), n[h * 2] = b, n[h * 2 + 1] = m, o[h * 2] = p.k1, o[h * 2 + 1] = p.k2;\n    }\n    for(var w = this._wnafMulAdd(1, n, o, h * 2, i), y = 0; y < h * 2; y++)n[y] = null, o[y] = null;\n    return w;\n};\nfunction Ft(e, t, r, i) {\n    Ze.BasePoint.call(this, e, \"affine\"), t === null && r === null ? (this.x = null, this.y = null, this.inf = !0) : (this.x = new K(t, 16), this.y = new K(r, 16), i && (this.x.forceRed(this.curve.red), this.y.forceRed(this.curve.red)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.inf = !1);\n}\n_c72 = Ft;\nDi(Ft, Ze.BasePoint), Zt.prototype.point = function(t, r, i) {\n    return new Ft(this, t, r, i);\n}, Zt.prototype.pointFromJSON = function(t, r) {\n    return Ft.fromJSON(this, t, r);\n}, Ft.prototype._getBeta = function() {\n    if (this.curve.endo) {\n        var t = this.precomputed;\n        if (t && t.beta) return t.beta;\n        var r = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);\n        if (t) {\n            var i = this.curve, n = function(o) {\n                return i.point(o.x.redMul(i.endo.beta), o.y);\n            };\n            t.beta = r, r.precomputed = {\n                beta: null,\n                naf: t.naf && {\n                    wnd: t.naf.wnd,\n                    points: t.naf.points.map(n)\n                },\n                doubles: t.doubles && {\n                    step: t.doubles.step,\n                    points: t.doubles.points.map(n)\n                }\n            };\n        }\n        return r;\n    }\n}, Ft.prototype.toJSON = function() {\n    return this.precomputed ? [\n        this.x,\n        this.y,\n        this.precomputed && {\n            doubles: this.precomputed.doubles && {\n                step: this.precomputed.doubles.step,\n                points: this.precomputed.doubles.points.slice(1)\n            },\n            naf: this.precomputed.naf && {\n                wnd: this.precomputed.naf.wnd,\n                points: this.precomputed.naf.points.slice(1)\n            }\n        }\n    ] : [\n        this.x,\n        this.y\n    ];\n}, Ft.fromJSON = function(t, r, i) {\n    typeof r == \"string\" && (r = JSON.parse(r));\n    var n = t.point(r[0], r[1], i);\n    if (!r[2]) return n;\n    function o(p) {\n        return t.point(p[0], p[1], i);\n    }\n    var h = r[2];\n    return n.precomputed = {\n        beta: null,\n        doubles: h.doubles && {\n            step: h.doubles.step,\n            points: [\n                n\n            ].concat(h.doubles.points.map(o))\n        },\n        naf: h.naf && {\n            wnd: h.naf.wnd,\n            points: [\n                n\n            ].concat(h.naf.points.map(o))\n        }\n    }, n;\n}, Ft.prototype.inspect = function() {\n    return this.isInfinity() ? \"<EC Point Infinity>\" : \"<EC Point x: \" + this.x.fromRed().toString(16, 2) + \" y: \" + this.y.fromRed().toString(16, 2) + \">\";\n}, Ft.prototype.isInfinity = function() {\n    return this.inf;\n}, Ft.prototype.add = function(t) {\n    if (this.inf) return t;\n    if (t.inf) return this;\n    if (this.eq(t)) return this.dbl();\n    if (this.neg().eq(t)) return this.curve.point(null, null);\n    if (this.x.cmp(t.x) === 0) return this.curve.point(null, null);\n    var r = this.y.redSub(t.y);\n    r.cmpn(0) !== 0 && (r = r.redMul(this.x.redSub(t.x).redInvm()));\n    var i = r.redSqr().redISub(this.x).redISub(t.x), n = r.redMul(this.x.redSub(i)).redISub(this.y);\n    return this.curve.point(i, n);\n}, Ft.prototype.dbl = function() {\n    if (this.inf) return this;\n    var t = this.y.redAdd(this.y);\n    if (t.cmpn(0) === 0) return this.curve.point(null, null);\n    var r = this.curve.a, i = this.x.redSqr(), n = t.redInvm(), o = i.redAdd(i).redIAdd(i).redIAdd(r).redMul(n), h = o.redSqr().redISub(this.x.redAdd(this.x)), p = o.redMul(this.x.redSub(h)).redISub(this.y);\n    return this.curve.point(h, p);\n}, Ft.prototype.getX = function() {\n    return this.x.fromRed();\n}, Ft.prototype.getY = function() {\n    return this.y.fromRed();\n}, Ft.prototype.mul = function(t) {\n    return t = new K(t, 16), this.isInfinity() ? this : this._hasDoubles(t) ? this.curve._fixedNafMul(this, t) : this.curve.endo ? this.curve._endoWnafMulAdd([\n        this\n    ], [\n        t\n    ]) : this.curve._wnafMul(this, t);\n}, Ft.prototype.mulAdd = function(t, r, i) {\n    var n = [\n        this,\n        r\n    ], o = [\n        t,\n        i\n    ];\n    return this.curve.endo ? this.curve._endoWnafMulAdd(n, o) : this.curve._wnafMulAdd(1, n, o, 2);\n}, Ft.prototype.jmulAdd = function(t, r, i) {\n    var n = [\n        this,\n        r\n    ], o = [\n        t,\n        i\n    ];\n    return this.curve.endo ? this.curve._endoWnafMulAdd(n, o, !0) : this.curve._wnafMulAdd(1, n, o, 2, !0);\n}, Ft.prototype.eq = function(t) {\n    return this === t || this.inf === t.inf && (this.inf || this.x.cmp(t.x) === 0 && this.y.cmp(t.y) === 0);\n}, Ft.prototype.neg = function(t) {\n    if (this.inf) return this;\n    var r = this.curve.point(this.x, this.y.redNeg());\n    if (t && this.precomputed) {\n        var i = this.precomputed, n = function(o) {\n            return o.neg();\n        };\n        r.precomputed = {\n            naf: i.naf && {\n                wnd: i.naf.wnd,\n                points: i.naf.points.map(n)\n            },\n            doubles: i.doubles && {\n                step: i.doubles.step,\n                points: i.doubles.points.map(n)\n            }\n        };\n    }\n    return r;\n}, Ft.prototype.toJ = function() {\n    if (this.inf) return this.curve.jpoint(null, null, null);\n    var t = this.curve.jpoint(this.x, this.y, this.curve.one);\n    return t;\n};\nfunction Tt(e, t, r, i) {\n    Ze.BasePoint.call(this, e, \"jacobian\"), t === null && r === null && i === null ? (this.x = this.curve.one, this.y = this.curve.one, this.z = new K(0)) : (this.x = new K(t, 16), this.y = new K(r, 16), this.z = new K(i, 16)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.zOne = this.z === this.curve.one;\n}\n_c73 = Tt;\nDi(Tt, Ze.BasePoint), Zt.prototype.jpoint = function(t, r, i) {\n    return new Tt(this, t, r, i);\n}, Tt.prototype.toP = function() {\n    if (this.isInfinity()) return this.curve.point(null, null);\n    var t = this.z.redInvm(), r = t.redSqr(), i = this.x.redMul(r), n = this.y.redMul(r).redMul(t);\n    return this.curve.point(i, n);\n}, Tt.prototype.neg = function() {\n    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);\n}, Tt.prototype.add = function(t) {\n    if (this.isInfinity()) return t;\n    if (t.isInfinity()) return this;\n    var r = t.z.redSqr(), i = this.z.redSqr(), n = this.x.redMul(r), o = t.x.redMul(i), h = this.y.redMul(r.redMul(t.z)), p = t.y.redMul(i.redMul(this.z)), b = n.redSub(o), m = h.redSub(p);\n    if (b.cmpn(0) === 0) return m.cmpn(0) !== 0 ? this.curve.jpoint(null, null, null) : this.dbl();\n    var w = b.redSqr(), y = w.redMul(b), S = n.redMul(w), I = m.redSqr().redIAdd(y).redISub(S).redISub(S), N = m.redMul(S.redISub(I)).redISub(h.redMul(y)), C = this.z.redMul(t.z).redMul(b);\n    return this.curve.jpoint(I, N, C);\n}, Tt.prototype.mixedAdd = function(t) {\n    if (this.isInfinity()) return t.toJ();\n    if (t.isInfinity()) return this;\n    var r = this.z.redSqr(), i = this.x, n = t.x.redMul(r), o = this.y, h = t.y.redMul(r).redMul(this.z), p = i.redSub(n), b = o.redSub(h);\n    if (p.cmpn(0) === 0) return b.cmpn(0) !== 0 ? this.curve.jpoint(null, null, null) : this.dbl();\n    var m = p.redSqr(), w = m.redMul(p), y = i.redMul(m), S = b.redSqr().redIAdd(w).redISub(y).redISub(y), I = b.redMul(y.redISub(S)).redISub(o.redMul(w)), N = this.z.redMul(p);\n    return this.curve.jpoint(S, I, N);\n}, Tt.prototype.dblp = function(t) {\n    if (t === 0) return this;\n    if (this.isInfinity()) return this;\n    if (!t) return this.dbl();\n    var r;\n    if (this.curve.zeroA || this.curve.threeA) {\n        var i = this;\n        for(r = 0; r < t; r++)i = i.dbl();\n        return i;\n    }\n    var n = this.curve.a, o = this.curve.tinv, h = this.x, p = this.y, b = this.z, m = b.redSqr().redSqr(), w = p.redAdd(p);\n    for(r = 0; r < t; r++){\n        var y = h.redSqr(), S = w.redSqr(), I = S.redSqr(), N = y.redAdd(y).redIAdd(y).redIAdd(n.redMul(m)), C = h.redMul(S), F = N.redSqr().redISub(C.redAdd(C)), U = C.redISub(F), J = N.redMul(U);\n        J = J.redIAdd(J).redISub(I);\n        var Bt = w.redMul(b);\n        r + 1 < t && (m = m.redMul(I)), h = F, b = Bt, w = J;\n    }\n    return this.curve.jpoint(h, w.redMul(o), b);\n}, Tt.prototype.dbl = function() {\n    return this.isInfinity() ? this : this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl();\n}, Tt.prototype._zeroDbl = function() {\n    var t, r, i;\n    if (this.zOne) {\n        var n = this.x.redSqr(), o = this.y.redSqr(), h = o.redSqr(), p = this.x.redAdd(o).redSqr().redISub(n).redISub(h);\n        p = p.redIAdd(p);\n        var b = n.redAdd(n).redIAdd(n), m = b.redSqr().redISub(p).redISub(p), w = h.redIAdd(h);\n        w = w.redIAdd(w), w = w.redIAdd(w), t = m, r = b.redMul(p.redISub(m)).redISub(w), i = this.y.redAdd(this.y);\n    } else {\n        var y = this.x.redSqr(), S = this.y.redSqr(), I = S.redSqr(), N = this.x.redAdd(S).redSqr().redISub(y).redISub(I);\n        N = N.redIAdd(N);\n        var C = y.redAdd(y).redIAdd(y), F = C.redSqr(), U = I.redIAdd(I);\n        U = U.redIAdd(U), U = U.redIAdd(U), t = F.redISub(N).redISub(N), r = C.redMul(N.redISub(t)).redISub(U), i = this.y.redMul(this.z), i = i.redIAdd(i);\n    }\n    return this.curve.jpoint(t, r, i);\n}, Tt.prototype._threeDbl = function() {\n    var t, r, i;\n    if (this.zOne) {\n        var n = this.x.redSqr(), o = this.y.redSqr(), h = o.redSqr(), p = this.x.redAdd(o).redSqr().redISub(n).redISub(h);\n        p = p.redIAdd(p);\n        var b = n.redAdd(n).redIAdd(n).redIAdd(this.curve.a), m = b.redSqr().redISub(p).redISub(p);\n        t = m;\n        var w = h.redIAdd(h);\n        w = w.redIAdd(w), w = w.redIAdd(w), r = b.redMul(p.redISub(m)).redISub(w), i = this.y.redAdd(this.y);\n    } else {\n        var y = this.z.redSqr(), S = this.y.redSqr(), I = this.x.redMul(S), N = this.x.redSub(y).redMul(this.x.redAdd(y));\n        N = N.redAdd(N).redIAdd(N);\n        var C = I.redIAdd(I);\n        C = C.redIAdd(C);\n        var F = C.redAdd(C);\n        t = N.redSqr().redISub(F), i = this.y.redAdd(this.z).redSqr().redISub(S).redISub(y);\n        var U = S.redSqr();\n        U = U.redIAdd(U), U = U.redIAdd(U), U = U.redIAdd(U), r = N.redMul(C.redISub(t)).redISub(U);\n    }\n    return this.curve.jpoint(t, r, i);\n}, Tt.prototype._dbl = function() {\n    var t = this.curve.a, r = this.x, i = this.y, n = this.z, o = n.redSqr().redSqr(), h = r.redSqr(), p = i.redSqr(), b = h.redAdd(h).redIAdd(h).redIAdd(t.redMul(o)), m = r.redAdd(r);\n    m = m.redIAdd(m);\n    var w = m.redMul(p), y = b.redSqr().redISub(w.redAdd(w)), S = w.redISub(y), I = p.redSqr();\n    I = I.redIAdd(I), I = I.redIAdd(I), I = I.redIAdd(I);\n    var N = b.redMul(S).redISub(I), C = i.redAdd(i).redMul(n);\n    return this.curve.jpoint(y, N, C);\n}, Tt.prototype.trpl = function() {\n    if (!this.curve.zeroA) return this.dbl().add(this);\n    var t = this.x.redSqr(), r = this.y.redSqr(), i = this.z.redSqr(), n = r.redSqr(), o = t.redAdd(t).redIAdd(t), h = o.redSqr(), p = this.x.redAdd(r).redSqr().redISub(t).redISub(n);\n    p = p.redIAdd(p), p = p.redAdd(p).redIAdd(p), p = p.redISub(h);\n    var b = p.redSqr(), m = n.redIAdd(n);\n    m = m.redIAdd(m), m = m.redIAdd(m), m = m.redIAdd(m);\n    var w = o.redIAdd(p).redSqr().redISub(h).redISub(b).redISub(m), y = r.redMul(w);\n    y = y.redIAdd(y), y = y.redIAdd(y);\n    var S = this.x.redMul(b).redISub(y);\n    S = S.redIAdd(S), S = S.redIAdd(S);\n    var I = this.y.redMul(w.redMul(m.redISub(w)).redISub(p.redMul(b)));\n    I = I.redIAdd(I), I = I.redIAdd(I), I = I.redIAdd(I);\n    var N = this.z.redAdd(p).redSqr().redISub(i).redISub(b);\n    return this.curve.jpoint(S, I, N);\n}, Tt.prototype.mul = function(t, r) {\n    return t = new K(t, r), this.curve._wnafMul(this, t);\n}, Tt.prototype.eq = function(t) {\n    if (t.type === \"affine\") return this.eq(t.toJ());\n    if (this === t) return !0;\n    var r = this.z.redSqr(), i = t.z.redSqr();\n    if (this.x.redMul(i).redISub(t.x.redMul(r)).cmpn(0) !== 0) return !1;\n    var n = r.redMul(this.z), o = i.redMul(t.z);\n    return this.y.redMul(o).redISub(t.y.redMul(n)).cmpn(0) === 0;\n}, Tt.prototype.eqXToP = function(t) {\n    var r = this.z.redSqr(), i = t.toRed(this.curve.red).redMul(r);\n    if (this.x.cmp(i) === 0) return !0;\n    for(var n = t.clone(), o = this.curve.redN.redMul(r);;){\n        if (n.iadd(this.curve.n), n.cmp(this.curve.p) >= 0) return !1;\n        if (i.redIAdd(o), this.x.cmp(i) === 0) return !0;\n    }\n}, Tt.prototype.inspect = function() {\n    return this.isInfinity() ? \"<EC JPoint Infinity>\" : \"<EC JPoint x: \" + this.x.toString(16, 2) + \" y: \" + this.y.toString(16, 2) + \" z: \" + this.z.toString(16, 2) + \">\";\n}, Tt.prototype.isInfinity = function() {\n    return this.z.cmpn(0) === 0;\n};\nvar qr = cr(function(e, t) {\n    var r = t;\n    r.base = Ze, r.short = ka, r.mont = null, r.edwards = null;\n}), Kr = cr(function(e, t) {\n    var r = t, i = Jt.assert;\n    function n(p) {\n        p.type === \"short\" ? this.curve = new qr.short(p) : p.type === \"edwards\" ? this.curve = new qr.edwards(p) : this.curve = new qr.mont(p), this.g = this.curve.g, this.n = this.curve.n, this.hash = p.hash, i(this.g.validate(), \"Invalid curve\"), i(this.g.mul(this.n).isInfinity(), \"Invalid curve, G*N != O\");\n    }\n    r.PresetCurve = n;\n    function o(p, b) {\n        Object.defineProperty(r, p, {\n            configurable: !0,\n            enumerable: !0,\n            get: function() {\n                var m = new n(b);\n                return Object.defineProperty(r, p, {\n                    configurable: !0,\n                    enumerable: !0,\n                    value: m\n                }), m;\n            }\n        });\n    }\n    o(\"p192\", {\n        type: \"short\",\n        prime: \"p192\",\n        p: \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\",\n        a: \"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc\",\n        b: \"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1\",\n        n: \"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831\",\n        hash: se.sha256,\n        gRed: !1,\n        g: [\n            \"188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012\",\n            \"07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811\"\n        ]\n    }), o(\"p224\", {\n        type: \"short\",\n        prime: \"p224\",\n        p: \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\",\n        a: \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe\",\n        b: \"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4\",\n        n: \"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d\",\n        hash: se.sha256,\n        gRed: !1,\n        g: [\n            \"b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21\",\n            \"bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34\"\n        ]\n    }), o(\"p256\", {\n        type: \"short\",\n        prime: null,\n        p: \"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff\",\n        a: \"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc\",\n        b: \"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b\",\n        n: \"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551\",\n        hash: se.sha256,\n        gRed: !1,\n        g: [\n            \"6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296\",\n            \"4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5\"\n        ]\n    }), o(\"p384\", {\n        type: \"short\",\n        prime: null,\n        p: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff\",\n        a: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc\",\n        b: \"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef\",\n        n: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973\",\n        hash: se.sha384,\n        gRed: !1,\n        g: [\n            \"aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7\",\n            \"3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f\"\n        ]\n    }), o(\"p521\", {\n        type: \"short\",\n        prime: null,\n        p: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff\",\n        a: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc\",\n        b: \"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00\",\n        n: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409\",\n        hash: se.sha512,\n        gRed: !1,\n        g: [\n            \"000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66\",\n            \"00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650\"\n        ]\n    }), o(\"curve25519\", {\n        type: \"mont\",\n        prime: \"p25519\",\n        p: \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\",\n        a: \"76d06\",\n        b: \"1\",\n        n: \"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed\",\n        hash: se.sha256,\n        gRed: !1,\n        g: [\n            \"9\"\n        ]\n    }), o(\"ed25519\", {\n        type: \"edwards\",\n        prime: \"p25519\",\n        p: \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\",\n        a: \"-1\",\n        c: \"1\",\n        d: \"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3\",\n        n: \"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed\",\n        hash: se.sha256,\n        gRed: !1,\n        g: [\n            \"216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a\",\n            \"6666666666666666666666666666666666666666666666666666666666666658\"\n        ]\n    });\n    var h;\n    try {\n        h = null.crash();\n    } catch (e) {\n        h = void 0;\n    }\n    o(\"secp256k1\", {\n        type: \"short\",\n        prime: \"k256\",\n        p: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\",\n        a: \"0\",\n        b: \"7\",\n        n: \"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141\",\n        h: \"1\",\n        hash: se.sha256,\n        beta: \"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee\",\n        lambda: \"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72\",\n        basis: [\n            {\n                a: \"3086d221a7d46bcde86c90e49284eb15\",\n                b: \"-e4437ed6010e88286f547fa90abfe4c3\"\n            },\n            {\n                a: \"114ca50f7a8e2f3f657c1108d9d44cfd8\",\n                b: \"3086d221a7d46bcde86c90e49284eb15\"\n            }\n        ],\n        gRed: !1,\n        g: [\n            \"79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n            \"483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\",\n            h\n        ]\n    });\n});\nfunction Re(e) {\n    if (!(this instanceof Re)) return new Re(e);\n    this.hash = e.hash, this.predResist = !!e.predResist, this.outLen = this.hash.outSize, this.minEntropy = e.minEntropy || this.hash.hmacStrength, this._reseed = null, this.reseedInterval = null, this.K = null, this.V = null;\n    var t = fe.toArray(e.entropy, e.entropyEnc || \"hex\"), r = fe.toArray(e.nonce, e.nonceEnc || \"hex\"), i = fe.toArray(e.pers, e.persEnc || \"hex\");\n    Pi(t.length >= this.minEntropy / 8, \"Not enough entropy. Minimum is: \" + this.minEntropy + \" bits\"), this._init(t, r, i);\n}\n_c74 = Re;\nvar Rf = Re;\nRe.prototype._init = function(t, r, i) {\n    var n = t.concat(r).concat(i);\n    this.K = new Array(this.outLen / 8), this.V = new Array(this.outLen / 8);\n    for(var o = 0; o < this.V.length; o++)this.K[o] = 0, this.V[o] = 1;\n    this._update(n), this._reseed = 1, this.reseedInterval = 281474976710656;\n}, Re.prototype._hmac = function() {\n    return new se.hmac(this.hash, this.K);\n}, Re.prototype._update = function(t) {\n    var r = this._hmac().update(this.V).update([\n        0\n    ]);\n    t && (r = r.update(t)), this.K = r.digest(), this.V = this._hmac().update(this.V).digest(), t && (this.K = this._hmac().update(this.V).update([\n        1\n    ]).update(t).digest(), this.V = this._hmac().update(this.V).digest());\n}, Re.prototype.reseed = function(t, r, i, n) {\n    typeof r != \"string\" && (n = i, i = r, r = null), t = fe.toArray(t, r), i = fe.toArray(i, n), Pi(t.length >= this.minEntropy / 8, \"Not enough entropy. Minimum is: \" + this.minEntropy + \" bits\"), this._update(t.concat(i || [])), this._reseed = 1;\n}, Re.prototype.generate = function(t, r, i, n) {\n    if (this._reseed > this.reseedInterval) throw new Error(\"Reseed is required\");\n    typeof r != \"string\" && (n = i, i = r, r = null), i && (i = fe.toArray(i, n || \"hex\"), this._update(i));\n    for(var o = []; o.length < t;)this.V = this._hmac().update(this.V).digest(), o = o.concat(this.V);\n    var h = o.slice(0, t);\n    return this._update(i), this._reseed++, fe.encode(h, r);\n};\nvar Fi = Jt.assert;\nfunction kt(e, t) {\n    this.ec = e, this.priv = null, this.pub = null, t.priv && this._importPrivate(t.priv, t.privEnc), t.pub && this._importPublic(t.pub, t.pubEnc);\n}\nvar Ti = kt;\nkt.fromPublic = function(t, r, i) {\n    return r instanceof kt ? r : new kt(t, {\n        pub: r,\n        pubEnc: i\n    });\n}, kt.fromPrivate = function(t, r, i) {\n    return r instanceof kt ? r : new kt(t, {\n        priv: r,\n        privEnc: i\n    });\n}, kt.prototype.validate = function() {\n    var t = this.getPublic();\n    return t.isInfinity() ? {\n        result: !1,\n        reason: \"Invalid public key\"\n    } : t.validate() ? t.mul(this.ec.curve.n).isInfinity() ? {\n        result: !0,\n        reason: null\n    } : {\n        result: !1,\n        reason: \"Public key * N != O\"\n    } : {\n        result: !1,\n        reason: \"Public key is not a point\"\n    };\n}, kt.prototype.getPublic = function(t, r) {\n    return typeof t == \"string\" && (r = t, t = null), this.pub || (this.pub = this.ec.g.mul(this.priv)), r ? this.pub.encode(r, t) : this.pub;\n}, kt.prototype.getPrivate = function(t) {\n    return t === \"hex\" ? this.priv.toString(16, 2) : this.priv;\n}, kt.prototype._importPrivate = function(t, r) {\n    this.priv = new K(t, r || 16), this.priv = this.priv.umod(this.ec.curve.n);\n}, kt.prototype._importPublic = function(t, r) {\n    if (t.x || t.y) {\n        this.ec.curve.type === \"mont\" ? Fi(t.x, \"Need x coordinate\") : (this.ec.curve.type === \"short\" || this.ec.curve.type === \"edwards\") && Fi(t.x && t.y, \"Need both x and y coordinate\"), this.pub = this.ec.curve.point(t.x, t.y);\n        return;\n    }\n    this.pub = this.ec.curve.decodePoint(t, r);\n}, kt.prototype.derive = function(t) {\n    return t.validate() || Fi(t.validate(), \"public point not validated\"), t.mul(this.priv).getX();\n}, kt.prototype.sign = function(t, r, i) {\n    return this.ec.sign(t, this, r, i);\n}, kt.prototype.verify = function(t, r) {\n    return this.ec.verify(t, r, this);\n}, kt.prototype.inspect = function() {\n    return \"<Key priv: \" + (this.priv && this.priv.toString(16, 2)) + \" pub: \" + (this.pub && this.pub.inspect()) + \" >\";\n};\nvar qa = Jt.assert;\nfunction Hr(e, t) {\n    if (e instanceof Hr) return e;\n    this._importDER(e, t) || (qa(e.r && e.s, \"Signature without r or s\"), this.r = new K(e.r, 16), this.s = new K(e.s, 16), e.recoveryParam === void 0 ? this.recoveryParam = null : this.recoveryParam = e.recoveryParam);\n}\n_c75 = Hr;\nvar zr = Hr;\nfunction Ka() {\n    this.place = 0;\n}\n_c76 = Ka;\nfunction Ui(e, t) {\n    var r = e[t.place++];\n    if (!(r & 128)) return r;\n    var i = r & 15;\n    if (i === 0 || i > 4) return !1;\n    for(var n = 0, o = 0, h = t.place; o < i; o++, h++)n <<= 8, n |= e[h], n >>>= 0;\n    return n <= 127 ? !1 : (t.place = h, n);\n}\n_c77 = Ui;\nfunction Of(e) {\n    for(var t = 0, r = e.length - 1; !e[t] && !(e[t + 1] & 128) && t < r;)t++;\n    return t === 0 ? e : e.slice(t);\n}\n_c78 = Of;\nHr.prototype._importDER = function(t, r) {\n    t = Jt.toArray(t, r);\n    var i = new Ka;\n    if (t[i.place++] !== 48) return !1;\n    var n = Ui(t, i);\n    if (n === !1 || n + i.place !== t.length || t[i.place++] !== 2) return !1;\n    var o = Ui(t, i);\n    if (o === !1) return !1;\n    var h = t.slice(i.place, o + i.place);\n    if (i.place += o, t[i.place++] !== 2) return !1;\n    var p = Ui(t, i);\n    if (p === !1 || t.length !== p + i.place) return !1;\n    var b = t.slice(i.place, p + i.place);\n    if (h[0] === 0) if (h[1] & 128) h = h.slice(1);\n    else return !1;\n    if (b[0] === 0) if (b[1] & 128) b = b.slice(1);\n    else return !1;\n    return this.r = new K(h), this.s = new K(b), this.recoveryParam = null, !0;\n};\nfunction ki(e, t) {\n    if (t < 128) {\n        e.push(t);\n        return;\n    }\n    var r = 1 + (Math.log(t) / Math.LN2 >>> 3);\n    for(e.push(r | 128); --r;)e.push(t >>> (r << 3) & 255);\n    e.push(t);\n}\nHr.prototype.toDER = function(t) {\n    var r = this.r.toArray(), i = this.s.toArray();\n    for(r[0] & 128 && (r = [\n        0\n    ].concat(r)), i[0] & 128 && (i = [\n        0\n    ].concat(i)), r = Of(r), i = Of(i); !i[0] && !(i[1] & 128);)i = i.slice(1);\n    var n = [\n        2\n    ];\n    ki(n, r.length), n = n.concat(r), n.push(2), ki(n, i.length);\n    var o = n.concat(i), h = [\n        48\n    ];\n    return ki(h, o.length), h = h.concat(o), Jt.encode(h, t);\n};\nvar Ha = function() {\n    throw new Error(\"unsupported\");\n}, Pf = Jt.assert;\nfunction $t(e) {\n    if (!(this instanceof $t)) return new $t(e);\n    typeof e == \"string\" && (Pf(Object.prototype.hasOwnProperty.call(Kr, e), \"Unknown curve \" + e), e = Kr[e]), e instanceof Kr.PresetCurve && (e = {\n        curve: e\n    }), this.curve = e.curve.curve, this.n = this.curve.n, this.nh = this.n.ushrn(1), this.g = this.curve.g, this.g = e.curve.g, this.g.precompute(e.curve.n.bitLength() + 1), this.hash = e.hash || e.curve.hash;\n}\nvar za = $t;\n$t.prototype.keyPair = function(t) {\n    return new Ti(this, t);\n}, $t.prototype.keyFromPrivate = function(t, r) {\n    return Ti.fromPrivate(this, t, r);\n}, $t.prototype.keyFromPublic = function(t, r) {\n    return Ti.fromPublic(this, t, r);\n}, $t.prototype.genKeyPair = function(t) {\n    t || (t = {});\n    for(var r = new Rf({\n        hash: this.hash,\n        pers: t.pers,\n        persEnc: t.persEnc || \"utf8\",\n        entropy: t.entropy || Ha(this.hash.hmacStrength),\n        entropyEnc: t.entropy && t.entropyEnc || \"utf8\",\n        nonce: this.n.toArray()\n    }), i = this.n.byteLength(), n = this.n.sub(new K(2));;){\n        var o = new K(r.generate(i));\n        if (!(o.cmp(n) > 0)) return o.iaddn(1), this.keyFromPrivate(o);\n    }\n}, $t.prototype._truncateToN = function(t, r) {\n    var i = t.byteLength() * 8 - this.n.bitLength();\n    return i > 0 && (t = t.ushrn(i)), !r && t.cmp(this.n) >= 0 ? t.sub(this.n) : t;\n}, $t.prototype.sign = function(t, r, i, n) {\n    typeof i == \"object\" && (n = i, i = null), n || (n = {}), r = this.keyFromPrivate(r, i), t = this._truncateToN(new K(t, 16));\n    for(var o = this.n.byteLength(), h = r.getPrivate().toArray(\"be\", o), p = t.toArray(\"be\", o), b = new Rf({\n        hash: this.hash,\n        entropy: h,\n        nonce: p,\n        pers: n.pers,\n        persEnc: n.persEnc || \"utf8\"\n    }), m = this.n.sub(new K(1)), w = 0;; w++){\n        var y = n.k ? n.k(w) : new K(b.generate(this.n.byteLength()));\n        if (y = this._truncateToN(y, !0), !(y.cmpn(1) <= 0 || y.cmp(m) >= 0)) {\n            var S = this.g.mul(y);\n            if (!S.isInfinity()) {\n                var I = S.getX(), N = I.umod(this.n);\n                if (N.cmpn(0) !== 0) {\n                    var C = y.invm(this.n).mul(N.mul(r.getPrivate()).iadd(t));\n                    if (C = C.umod(this.n), C.cmpn(0) !== 0) {\n                        var F = (S.getY().isOdd() ? 1 : 0) | (I.cmp(N) !== 0 ? 2 : 0);\n                        return n.canonical && C.cmp(this.nh) > 0 && (C = this.n.sub(C), F ^= 1), new zr({\n                            r: N,\n                            s: C,\n                            recoveryParam: F\n                        });\n                    }\n                }\n            }\n        }\n    }\n}, $t.prototype.verify = function(t, r, i, n) {\n    t = this._truncateToN(new K(t, 16)), i = this.keyFromPublic(i, n), r = new zr(r, \"hex\");\n    var o = r.r, h = r.s;\n    if (o.cmpn(1) < 0 || o.cmp(this.n) >= 0 || h.cmpn(1) < 0 || h.cmp(this.n) >= 0) return !1;\n    var p = h.invm(this.n), b = p.mul(t).umod(this.n), m = p.mul(o).umod(this.n), w;\n    return this.curve._maxwellTrick ? (w = this.g.jmulAdd(b, i.getPublic(), m), w.isInfinity() ? !1 : w.eqXToP(o)) : (w = this.g.mulAdd(b, i.getPublic(), m), w.isInfinity() ? !1 : w.getX().umod(this.n).cmp(o) === 0);\n}, $t.prototype.recoverPubKey = function(e, t, r, i) {\n    Pf((3 & r) === r, \"The recovery param is more than two bits\"), t = new zr(t, i);\n    var n = this.n, o = new K(e), h = t.r, p = t.s, b = r & 1, m = r >> 1;\n    if (h.cmp(this.curve.p.umod(this.curve.n)) >= 0 && m) throw new Error(\"Unable to find sencond key candinate\");\n    m ? h = this.curve.pointFromX(h.add(this.curve.n), b) : h = this.curve.pointFromX(h, b);\n    var w = t.r.invm(n), y = n.sub(o).mul(w).umod(n), S = p.mul(w).umod(n);\n    return this.g.mulAdd(y, h, S);\n}, $t.prototype.getKeyRecoveryParam = function(e, t, r, i) {\n    if (t = new zr(t, i), t.recoveryParam !== null) return t.recoveryParam;\n    for(var n = 0; n < 4; n++){\n        var o;\n        try {\n            o = this.recoverPubKey(e, t, n);\n        } catch (e) {\n            continue;\n        }\n        if (o.eq(r)) return n;\n    }\n    throw new Error(\"Unable to find valid recovery factor\");\n};\nvar La = cr(function(e, t) {\n    var r = t;\n    r.version = \"6.5.4\", r.utils = Jt, r.rand = function() {\n        throw new Error(\"unsupported\");\n    }, r.curve = qr, r.curves = Kr, r.ec = za, r.eddsa = null;\n}), ja = La.ec;\nconst Qa = \"signing-key/5.7.0\", qi = new L(Qa);\nlet Ki = null;\nfunction ve() {\n    return Ki || (Ki = new ja(\"secp256k1\")), Ki;\n}\nclass Ja {\n    _addPoint(t) {\n        const r = ve().keyFromPublic(Ot(this.publicKey)), i = ve().keyFromPublic(Ot(t));\n        return \"0x\" + r.pub.add(i.pub).encodeCompressed(\"hex\");\n    }\n    signDigest(t) {\n        const r = ve().keyFromPrivate(Ot(this.privateKey)), i = Ot(t);\n        i.length !== 32 && qi.throwArgumentError(\"bad digest length\", \"digest\", t);\n        const n = r.sign(i, {\n            canonical: !0\n        });\n        return zn({\n            recoveryParam: n.recoveryParam,\n            r: oe(\"0x\" + n.r.toString(16), 32),\n            s: oe(\"0x\" + n.s.toString(16), 32)\n        });\n    }\n    computeSharedSecret(t) {\n        const r = ve().keyFromPrivate(Ot(this.privateKey)), i = ve().keyFromPublic(Ot(Df(t)));\n        return oe(\"0x\" + r.derive(i.getPublic()).toString(16), 32);\n    }\n    static isSigningKey(t) {\n        return !!(t && t._isSigningKey);\n    }\n    constructor(t){\n        br(this, \"curve\", \"secp256k1\"), br(this, \"privateKey\", Kt(t)), N0(this.privateKey) !== 32 && qi.throwArgumentError(\"invalid private key\", \"privateKey\", \"[[ REDACTED ]]\");\n        const r = ve().keyFromPrivate(Ot(this.privateKey));\n        br(this, \"publicKey\", \"0x\" + r.getPublic(!1, \"hex\")), br(this, \"compressedPublicKey\", \"0x\" + r.getPublic(!0, \"hex\")), br(this, \"_isSigningKey\", !0);\n    }\n}\nfunction Ga(e, t) {\n    const r = zn(t), i = {\n        r: Ot(r.r),\n        s: Ot(r.s)\n    };\n    return \"0x\" + ve().recoverPubKey(Ot(e), i, r.recoveryParam).encode(\"hex\", !1);\n}\n_c79 = Ga;\nfunction Df(e, t) {\n    const r = Ot(e);\n    if (r.length === 32) {\n        const i = new Ja(r);\n        return t ? \"0x\" + ve().keyFromPrivate(r).getPublic(!0, \"hex\") : i.publicKey;\n    } else {\n        if (r.length === 33) return t ? Kt(r) : \"0x\" + ve().keyFromPublic(r).getPublic(!1, \"hex\");\n        if (r.length === 65) return t ? \"0x\" + ve().keyFromPublic(r).getPublic(!0, \"hex\") : Kt(r);\n    }\n    return qi.throwArgumentError(\"invalid public or private key\", \"key\", \"[REDACTED]\");\n}\n_c80 = Df;\nconst Ya = \"transactions/5.7.0\";\nnew L(Ya);\nvar Ff;\n(function(e) {\n    e[e.legacy = 0] = \"legacy\", e[e.eip2930 = 1] = \"eip2930\", e[e.eip1559 = 2] = \"eip1559\";\n})(Ff || (Ff = {}));\nfunction Va(e) {\n    const t = Df(e);\n    return ns(Hn(yi(Hn(t, 1)), 12));\n}\n_c81 = Va;\nfunction Wa(e, t) {\n    return Va(Ga(Ot(e), t));\n}\n_c82 = Wa;\nconst Xa = \"https://rpc.walletconnect.com/v1\";\nasync function Tf(e, t, r, i, n, o) {\n    switch(r.t){\n        case \"eip191\":\n            return Uf(e, t, r.s);\n        case \"eip1271\":\n            return await kf(e, t, r.s, i, n, o);\n        default:\n            throw new Error(\"verifySignature failed: Attempted to verify CacaoSignature with unknown type: \".concat(r.t));\n    }\n}\n_c83 = Tf;\nfunction Uf(e, t, r) {\n    return Wa(ff(t), r).toLowerCase() === e.toLowerCase();\n}\n_c84 = Uf;\nasync function kf(e, t, r, i, n, o) {\n    try {\n        const h = \"0x1626ba7e\", p = \"0000000000000000000000000000000000000000000000000000000000000040\", b = \"0000000000000000000000000000000000000000000000000000000000000041\", m = r.substring(2), w = ff(t).substring(2), y = h + w + p + b + m, S = await fetch(\"\".concat(o || Xa, \"/?chainId=\").concat(i, \"&projectId=\").concat(n), {\n            method: \"POST\",\n            body: JSON.stringify({\n                id: Za(),\n                jsonrpc: \"2.0\",\n                method: \"eth_call\",\n                params: [\n                    {\n                        to: e,\n                        data: y\n                    },\n                    \"latest\"\n                ]\n            })\n        }), { result: I } = await S.json();\n        return I ? I.slice(0, h.length).toLowerCase() === h.toLowerCase() : !1;\n    } catch (h) {\n        return console.error(\"isValidEip1271Signature: \", h), !1;\n    }\n}\nfunction Za() {\n    return Date.now() + Math.floor(Math.random() * 1e3);\n}\n_c85 = Za;\nvar $a = Object.defineProperty, tu = Object.defineProperties, eu = Object.getOwnPropertyDescriptors, qf = Object.getOwnPropertySymbols, ru = Object.prototype.hasOwnProperty, iu = Object.prototype.propertyIsEnumerable, Kf = (e, t, r)=>t in e ? $a(e, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : e[t] = r, Hi = (e, t)=>{\n    for(var r in t || (t = {}))ru.call(t, r) && Kf(e, r, t[r]);\n    if (qf) for (var r of qf(t))iu.call(t, r) && Kf(e, r, t[r]);\n    return e;\n}, Hf = (e, t)=>tu(e, eu(t));\nconst nu = \"did:pkh:\", Lr = (e)=>e === null || e === void 0 ? void 0 : e.split(\":\"), zi = (e)=>{\n    const t = e && Lr(e);\n    if (t) return e.includes(nu) ? t[3] : t[1];\n}, fu = (e)=>{\n    const t = e && Lr(e);\n    if (t) return t[2] + \":\" + t[3];\n}, Li = (e)=>{\n    const t = e && Lr(e);\n    if (t) return t.pop();\n};\nasync function ou(e) {\n    const { cacao: t, projectId: r } = e, { s: i, p: n } = t, o = zf(n, n.iss), h = Li(n.iss);\n    return await Tf(h, o, i, zi(n.iss), r);\n}\nconst zf = (e, t)=>{\n    const r = \"\".concat(e.domain, \" wants you to sign in with your Ethereum account:\"), i = Li(t);\n    if (!e.aud && !e.uri) throw new Error(\"Either `aud` or `uri` is required to construct the message\");\n    let n = e.statement || void 0;\n    const o = \"URI: \".concat(e.aud || e.uri), h = \"Version: \".concat(e.version), p = \"Chain ID: \".concat(zi(t)), b = \"Nonce: \".concat(e.nonce), m = \"Issued At: \".concat(e.iat), w = e.resources ? \"Resources:\".concat(e.resources.map((S)=>\"\\n- \".concat(S)).join(\"\")) : void 0, y = Qr(e.resources);\n    if (y) {\n        const S = Oe(y);\n        n = Ji(n, S);\n    }\n    return [\n        r,\n        i,\n        \"\",\n        n,\n        \"\",\n        o,\n        h,\n        p,\n        b,\n        m,\n        w\n    ].filter((S)=>S != null).join(\"\\n\");\n};\nfunction su(e, t, r) {\n    return r.includes(\"did:pkh:\") || (r = \"did:pkh:\".concat(r)), {\n        h: {\n            t: \"caip122\"\n        },\n        p: {\n            iss: r,\n            domain: e.domain,\n            aud: e.aud,\n            version: e.version,\n            nonce: e.nonce,\n            iat: e.iat,\n            statement: e.statement,\n            requestId: e.requestId,\n            resources: e.resources,\n            nbf: e.nbf,\n            exp: e.exp\n        },\n        s: t\n    };\n}\nfunction au(e) {\n    var t;\n    const { authPayload: r, chains: i, methods: n } = e, o = r.statement || \"\";\n    if (!(i != null && i.length)) return r;\n    const h = r.chains, p = mi(h, i);\n    if (!(p != null && p.length)) throw new Error(\"No supported chains\");\n    const b = Lf(r.resources);\n    if (!b) return r;\n    me(b);\n    const m = jf(b, \"eip155\");\n    let w = (r === null || r === void 0 ? void 0 : r.resources) || [];\n    if (m != null && m.length) {\n        const y = Qf(m), S = mi(y, n);\n        if (!(S != null && S.length)) throw new Error(\"Supported methods don't satisfy the requested: \".concat(JSON.stringify(y), \", supported: \").concat(JSON.stringify(n)));\n        const I = ji(\"request\", S, {\n            chains: p\n        }), N = Vf(b, \"eip155\", I);\n        w = ((t = r === null || r === void 0 ? void 0 : r.resources) == null ? void 0 : t.slice(0, -1)) || [], w.push(jr(N));\n    }\n    return Hf(Hi({}, r), {\n        statement: Xf(o, Qr(w)),\n        chains: p,\n        resources: r != null && r.resources || w.length > 0 ? w : void 0\n    });\n}\nfunction Lf(e) {\n    const t = Qr(e);\n    if (t && Qi(t)) return Oe(t);\n}\n_c86 = Lf;\nfunction uu(e, t) {\n    var r;\n    return (r = e === null || e === void 0 ? void 0 : e.att) == null ? void 0 : r.hasOwnProperty(t);\n}\nfunction jf(e, t) {\n    var r, i;\n    return (r = e === null || e === void 0 ? void 0 : e.att) != null && r[t] ? Object.keys((i = e === null || e === void 0 ? void 0 : e.att) == null ? void 0 : i[t]) : [];\n}\nfunction hu(e) {\n    return (e === null || e === void 0 ? void 0 : e.map((t)=>Object.keys(t))) || [];\n}\nfunction Qf(e) {\n    return (e === null || e === void 0 ? void 0 : e.map((t)=>{\n        var r;\n        return (r = t.split(\"/\")) == null ? void 0 : r[1];\n    })) || [];\n}\n_c87 = Qf;\nfunction Jf(e) {\n    return Buffer.from(JSON.stringify(e)).toString(\"base64\");\n}\n_c88 = Jf;\nfunction Gf(e) {\n    return JSON.parse(Buffer.from(e, \"base64\").toString(\"utf-8\"));\n}\n_c89 = Gf;\nfunction me(e) {\n    if (!e) throw new Error(\"No recap provided, value is undefined\");\n    if (!e.att) throw new Error(\"No `att` property found\");\n    const t = Object.keys(e.att);\n    if (!(t != null && t.length)) throw new Error(\"No resources found in `att` property\");\n    t.forEach((r)=>{\n        const i = e.att[r];\n        if (Array.isArray(i)) throw new Error(\"Resource must be an object: \".concat(r));\n        if (typeof i != \"object\") throw new Error(\"Resource must be an object: \".concat(r));\n        if (!Object.keys(i).length) throw new Error(\"Resource object is empty: \".concat(r));\n        Object.keys(i).forEach((n)=>{\n            const o = i[n];\n            if (!Array.isArray(o)) throw new Error(\"Ability limits \".concat(n, \" must be an array of objects, found: \").concat(o));\n            if (!o.length) throw new Error(\"Value of \".concat(n, \" is empty array, must be an array with objects\"));\n            o.forEach((h)=>{\n                if (typeof h != \"object\") throw new Error(\"Ability limits (\".concat(n, \") must be an array of objects, found: \").concat(h));\n            });\n        });\n    });\n}\nfunction Yf(e, t, r) {\n    let i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};\n    return r === null || r === void 0 ? void 0 : r.sort((n, o)=>n.localeCompare(o)), {\n        att: {\n            [e]: ji(t, r, i)\n        }\n    };\n}\n_c90 = Yf;\nfunction Vf(e, t, r) {\n    var i;\n    return e.att[t] = Hi({}, r), ((i = Object.keys(e.att)) == null ? void 0 : i.sort((n, o)=>n.localeCompare(o))).reduce((n, o)=>(n.att[o] = e.att[o], n), {\n        att: {}\n    });\n}\n_c91 = Vf;\nfunction ji(e, t) {\n    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    t = t === null || t === void 0 ? void 0 : t.sort((n, o)=>n.localeCompare(o));\n    const i = t.map((n)=>({\n            [\"\".concat(e, \"/\").concat(n)]: [\n                r\n            ]\n        }));\n    return Object.assign({}, ...i);\n}\nfunction jr(e) {\n    return me(e), \"urn:recap:\".concat(Jf(e).replace(/=/g, \"\"));\n}\nfunction Oe(e) {\n    const t = Gf(e.replace(\"urn:recap:\", \"\"));\n    return me(t), t;\n}\n_c92 = Oe;\nfunction cu(e, t, r) {\n    const i = Yf(e, t, r);\n    return jr(i);\n}\nfunction Qi(e) {\n    return e && e.includes(\"urn:recap:\");\n}\n_c93 = Qi;\nfunction lu(e, t) {\n    const r = Oe(e), i = Oe(t), n = Wf(r, i);\n    return jr(n);\n}\nfunction Wf(e, t) {\n    me(e), me(t);\n    const r = Object.keys(e.att).concat(Object.keys(t.att)).sort((n, o)=>n.localeCompare(o)), i = {\n        att: {}\n    };\n    return r.forEach((n)=>{\n        var o, h;\n        Object.keys(((o = e.att) == null ? void 0 : o[n]) || {}).concat(Object.keys(((h = t.att) == null ? void 0 : h[n]) || {})).sort((p, b)=>p.localeCompare(b)).forEach((p)=>{\n            var b, m;\n            i.att[n] = Hf(Hi({}, i.att[n]), {\n                [p]: ((b = e.att[n]) == null ? void 0 : b[p]) || ((m = t.att[n]) == null ? void 0 : m[p])\n            });\n        });\n    }), i;\n}\n_c94 = Wf;\nfunction Ji() {\n    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"\", t = arguments.length > 1 ? arguments[1] : void 0;\n    me(t);\n    const r = \"I further authorize the stated URI to perform the following actions on my behalf: \";\n    if (e.includes(r)) return e;\n    const i = [];\n    let n = 0;\n    Object.keys(t.att).forEach((p)=>{\n        const b = Object.keys(t.att[p]).map((y)=>({\n                ability: y.split(\"/\")[0],\n                action: y.split(\"/\")[1]\n            }));\n        b.sort((y, S)=>y.action.localeCompare(S.action));\n        const m = {};\n        b.forEach((y)=>{\n            m[y.ability] || (m[y.ability] = []), m[y.ability].push(y.action);\n        });\n        const w = Object.keys(m).map((y)=>(n++, \"(\".concat(n, \") '\").concat(y, \"': '\").concat(m[y].join(\"', '\"), \"' for '\").concat(p, \"'.\")));\n        i.push(w.join(\", \").replace(\".,\", \".\"));\n    });\n    const o = i.join(\" \"), h = \"\".concat(r).concat(o);\n    return \"\".concat(e ? e + \" \" : \"\").concat(h);\n}\n_c95 = Ji;\nfunction du(e) {\n    var t;\n    const r = Oe(e);\n    me(r);\n    const i = (t = r.att) == null ? void 0 : t.eip155;\n    return i ? Object.keys(i).map((n)=>n.split(\"/\")[1]) : [];\n}\nfunction pu(e) {\n    const t = Oe(e);\n    me(t);\n    const r = [];\n    return Object.values(t.att).forEach((i)=>{\n        Object.values(i).forEach((n)=>{\n            var o;\n            (o = n === null || n === void 0 ? void 0 : n[0]) != null && o.chains && r.push(n[0].chains);\n        });\n    }), [\n        ...new Set(r.flat())\n    ];\n}\nfunction Xf(e, t) {\n    if (!t) return e;\n    const r = Oe(t);\n    return me(r), Ji(e, r);\n}\n_c96 = Xf;\nfunction Qr(e) {\n    if (!e) return;\n    const t = e === null || e === void 0 ? void 0 : e[e.length - 1];\n    return Qi(t) ? t : void 0;\n}\n_c97 = Qr;\nconst Gi = \"base10\", zt = \"base16\", Jr = \"base64pad\", Gr = \"utf8\", Yi = 0, lr = 1, vu = 0, Zf = 1, Vi = 12, Wi = 32;\nfunction mu() {\n    const e = _stablelib_x25519__WEBPACK_IMPORTED_MODULE_8__.generateKeyPair();\n    return {\n        privateKey: (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.toString)(e.secretKey, zt),\n        publicKey: (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.toString)(e.publicKey, zt)\n    };\n}\nfunction gu() {\n    const e = (0,_stablelib_random__WEBPACK_IMPORTED_MODULE_6__.randomBytes)(Wi);\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.toString)(e, zt);\n}\nfunction Au(e, t) {\n    const r = _stablelib_x25519__WEBPACK_IMPORTED_MODULE_8__.sharedKey((0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.fromString)(e, zt), (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.fromString)(t, zt), !0), i = new _stablelib_hkdf__WEBPACK_IMPORTED_MODULE_5__.HKDF(_stablelib_sha256__WEBPACK_IMPORTED_MODULE_7__.SHA256, r).expand(Wi);\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.toString)(i, zt);\n}\n_c98 = Au;\nfunction bu(e) {\n    const t = (0,_stablelib_sha256__WEBPACK_IMPORTED_MODULE_7__.hash)((0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.fromString)(e, zt));\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.toString)(t, zt);\n}\nfunction yu(e) {\n    const t = (0,_stablelib_sha256__WEBPACK_IMPORTED_MODULE_7__.hash)((0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.fromString)(e, Gr));\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.toString)(t, zt);\n}\nfunction $f(e) {\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.fromString)(\"\".concat(e), Gi);\n}\nfunction Mr(e) {\n    return Number((0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.toString)(e, Gi));\n}\n_c99 = Mr;\nfunction wu(e) {\n    const t = $f(typeof e.type < \"u\" ? e.type : Yi);\n    if (Mr(t) === lr && typeof e.senderPublicKey > \"u\") throw new Error(\"Missing sender public key for type 1 envelope\");\n    const r = typeof e.senderPublicKey < \"u\" ? (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.fromString)(e.senderPublicKey, zt) : void 0, i = typeof e.iv < \"u\" ? (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.fromString)(e.iv, zt) : (0,_stablelib_random__WEBPACK_IMPORTED_MODULE_6__.randomBytes)(Vi), n = new _stablelib_chacha20poly1305__WEBPACK_IMPORTED_MODULE_4__.ChaCha20Poly1305((0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.fromString)(e.symKey, zt)).seal(i, (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.fromString)(e.message, Gr));\n    return to({\n        type: t,\n        sealed: n,\n        iv: i,\n        senderPublicKey: r\n    });\n}\nfunction xu(e) {\n    const t = new _stablelib_chacha20poly1305__WEBPACK_IMPORTED_MODULE_4__.ChaCha20Poly1305((0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.fromString)(e.symKey, zt)), { sealed: r, iv: i } = Xi(e.encoded), n = t.open(i, r);\n    if (n === null) throw new Error(\"Failed to decrypt\");\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.toString)(n, Gr);\n}\nfunction to(e) {\n    if (Mr(e.type) === lr) {\n        if (typeof e.senderPublicKey > \"u\") throw new Error(\"Missing sender public key for type 1 envelope\");\n        return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.toString)((0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.concat)([\n            e.type,\n            e.senderPublicKey,\n            e.iv,\n            e.sealed\n        ]), Jr);\n    }\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.toString)((0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.concat)([\n        e.type,\n        e.iv,\n        e.sealed\n    ]), Jr);\n}\nfunction Xi(e) {\n    const t = (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.fromString)(e, Jr), r = t.slice(vu, Zf), i = Zf;\n    if (Mr(r) === lr) {\n        const p = i + Wi, b = p + Vi, m = t.slice(i, p), w = t.slice(p, b), y = t.slice(b);\n        return {\n            type: r,\n            sealed: y,\n            iv: w,\n            senderPublicKey: m\n        };\n    }\n    const n = i + Vi, o = t.slice(i, n), h = t.slice(n);\n    return {\n        type: r,\n        sealed: h,\n        iv: o\n    };\n}\n_c100 = Xi;\nfunction Mu(e, t) {\n    const r = Xi(e);\n    return eo({\n        type: Mr(r.type),\n        senderPublicKey: typeof r.senderPublicKey < \"u\" ? (0,uint8arrays__WEBPACK_IMPORTED_MODULE_9__.toString)(r.senderPublicKey, zt) : void 0,\n        receiverPublicKey: t === null || t === void 0 ? void 0 : t.receiverPublicKey\n    });\n}\n_c101 = Mu;\nfunction eo(e) {\n    const t = (e === null || e === void 0 ? void 0 : e.type) || Yi;\n    if (t === lr) {\n        if (typeof (e === null || e === void 0 ? void 0 : e.senderPublicKey) > \"u\") throw new Error(\"missing sender public key\");\n        if (typeof (e === null || e === void 0 ? void 0 : e.receiverPublicKey) > \"u\") throw new Error(\"missing receiver public key\");\n    }\n    return {\n        type: t,\n        senderPublicKey: e === null || e === void 0 ? void 0 : e.senderPublicKey,\n        receiverPublicKey: e === null || e === void 0 ? void 0 : e.receiverPublicKey\n    };\n}\nfunction Eu(e) {\n    return e.type === lr && typeof e.senderPublicKey == \"string\" && typeof e.receiverPublicKey == \"string\";\n}\n_c102 = Eu;\nconst ro = \"irn\";\nfunction Su(e) {\n    return (e === null || e === void 0 ? void 0 : e.relay) || {\n        protocol: ro\n    };\n}\n_c103 = Su;\nfunction Nu(e) {\n    const t = _walletconnect_relay_api__WEBPACK_IMPORTED_MODULE_10__.RELAY_JSONRPC[e];\n    if (typeof t > \"u\") throw new Error(\"Relay Protocol not supported: \".concat(e));\n    return t;\n}\n_c104 = Nu;\nvar Iu = Object.defineProperty, _u = Object.defineProperties, Bu = Object.getOwnPropertyDescriptors, io = Object.getOwnPropertySymbols, Cu = Object.prototype.hasOwnProperty, Ru = Object.prototype.propertyIsEnumerable, no = (e, t, r)=>t in e ? Iu(e, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : e[t] = r, fo = (e, t)=>{\n    for(var r in t || (t = {}))Cu.call(t, r) && no(e, r, t[r]);\n    if (io) for (var r of io(t))Ru.call(t, r) && no(e, r, t[r]);\n    return e;\n}, Ou = (e, t)=>_u(e, Bu(t));\nfunction oo(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"-\";\n    const r = {}, i = \"relay\" + t;\n    return Object.keys(e).forEach((n)=>{\n        if (n.startsWith(i)) {\n            const o = n.replace(i, \"\"), h = e[n];\n            r[o] = h;\n        }\n    }), r;\n}\nfunction Pu(e) {\n    e = e.includes(\"wc://\") ? e.replace(\"wc://\", \"\") : e, e = e.includes(\"wc:\") ? e.replace(\"wc:\", \"\") : e;\n    const t = e.indexOf(\":\"), r = e.indexOf(\"?\") !== -1 ? e.indexOf(\"?\") : void 0, i = e.substring(0, t), n = e.substring(t + 1, r).split(\"@\"), o = typeof r < \"u\" ? e.substring(r) : \"\", h = query_string__WEBPACK_IMPORTED_MODULE_3__.parse(o), p = typeof h.methods == \"string\" ? h.methods.split(\",\") : void 0;\n    return {\n        protocol: i,\n        topic: so(n[0]),\n        version: parseInt(n[1], 10),\n        symKey: h.symKey,\n        relay: oo(h),\n        methods: p,\n        expiryTimestamp: h.expiryTimestamp ? parseInt(h.expiryTimestamp, 10) : void 0\n    };\n}\n_c105 = Pu;\nfunction so(e) {\n    return e.startsWith(\"//\") ? e.substring(2) : e;\n}\nfunction ao(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"-\";\n    const r = \"relay\", i = {};\n    return Object.keys(e).forEach((n)=>{\n        const o = r + t + n;\n        e[n] && (i[o] = e[n]);\n    }), i;\n}\nfunction Du(e) {\n    return \"\".concat(e.protocol, \":\").concat(e.topic, \"@\").concat(e.version, \"?\") + query_string__WEBPACK_IMPORTED_MODULE_3__.stringify(fo(Ou(fo({\n        symKey: e.symKey\n    }, ao(e.relay)), {\n        expiryTimestamp: e.expiryTimestamp\n    }), e.methods ? {\n        methods: e.methods.join(\",\")\n    } : {}));\n}\n_c106 = Du;\nvar Fu = Object.defineProperty, Tu = Object.defineProperties, Uu = Object.getOwnPropertyDescriptors, uo = Object.getOwnPropertySymbols, ku = Object.prototype.hasOwnProperty, qu = Object.prototype.propertyIsEnumerable, ho = (e, t, r)=>t in e ? Fu(e, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : e[t] = r, Ku = (e, t)=>{\n    for(var r in t || (t = {}))ku.call(t, r) && ho(e, r, t[r]);\n    if (uo) for (var r of uo(t))qu.call(t, r) && ho(e, r, t[r]);\n    return e;\n}, Hu = (e, t)=>Tu(e, Uu(t));\nfunction $e(e) {\n    const t = [];\n    return e.forEach((r)=>{\n        const [i, n] = r.split(\":\");\n        t.push(\"\".concat(i, \":\").concat(n));\n    }), t;\n}\nfunction co(e) {\n    const t = [];\n    return Object.values(e).forEach((r)=>{\n        t.push(...$e(r.accounts));\n    }), t;\n}\nfunction lo(e, t) {\n    const r = [];\n    return Object.values(e).forEach((i)=>{\n        $e(i.accounts).includes(t) && r.push(...i.methods);\n    }), r;\n}\nfunction po(e, t) {\n    const r = [];\n    return Object.values(e).forEach((i)=>{\n        $e(i.accounts).includes(t) && r.push(...i.events);\n    }), r;\n}\nfunction zu(e, t) {\n    const r = So(e, t);\n    if (r) throw new Error(r.message);\n    const i = {};\n    for (const [n, o] of Object.entries(e))i[n] = {\n        methods: o.methods,\n        events: o.events,\n        chains: o.accounts.map((h)=>\"\".concat(h.split(\":\")[0], \":\").concat(h.split(\":\")[1]))\n    };\n    return i;\n}\nfunction Lu(e) {\n    const { proposal: { requiredNamespaces: t, optionalNamespaces: r = {} }, supportedNamespaces: i } = e, n = $i(t), o = $i(r), h = {};\n    Object.keys(i).forEach((m)=>{\n        const w = i[m].chains, y = i[m].methods, S = i[m].events, I = i[m].accounts;\n        w.forEach((N)=>{\n            if (!I.some((C)=>C.includes(N))) throw new Error(\"No accounts provided for chain \".concat(N, \" in namespace \").concat(m));\n        }), h[m] = {\n            chains: w,\n            methods: y,\n            events: S,\n            accounts: I\n        };\n    });\n    const p = Io(t, h, \"approve()\");\n    if (p) throw new Error(p.message);\n    const b = {};\n    return !Object.keys(t).length && !Object.keys(r).length ? h : (Object.keys(n).forEach((m)=>{\n        const w = i[m].chains.filter((N)=>{\n            var C, F;\n            return (F = (C = n[m]) == null ? void 0 : C.chains) == null ? void 0 : F.includes(N);\n        }), y = i[m].methods.filter((N)=>{\n            var C, F;\n            return (F = (C = n[m]) == null ? void 0 : C.methods) == null ? void 0 : F.includes(N);\n        }), S = i[m].events.filter((N)=>{\n            var C, F;\n            return (F = (C = n[m]) == null ? void 0 : C.events) == null ? void 0 : F.includes(N);\n        }), I = w.map((N)=>i[m].accounts.filter((C)=>C.includes(\"\".concat(N, \":\")))).flat();\n        b[m] = {\n            chains: w,\n            methods: y,\n            events: S,\n            accounts: I\n        };\n    }), Object.keys(o).forEach((m)=>{\n        var w, y, S, I, N, C;\n        if (!i[m]) return;\n        const F = (y = (w = o[m]) == null ? void 0 : w.chains) == null ? void 0 : y.filter((G)=>i[m].chains.includes(G)), U = i[m].methods.filter((G)=>{\n            var H, z;\n            return (z = (H = o[m]) == null ? void 0 : H.methods) == null ? void 0 : z.includes(G);\n        }), J = i[m].events.filter((G)=>{\n            var H, z;\n            return (z = (H = o[m]) == null ? void 0 : H.events) == null ? void 0 : z.includes(G);\n        }), Bt = F === null || F === void 0 ? void 0 : F.map((G)=>i[m].accounts.filter((H)=>H.includes(\"\".concat(G, \":\")))).flat();\n        b[m] = {\n            chains: ge((S = b[m]) == null ? void 0 : S.chains, F),\n            methods: ge((I = b[m]) == null ? void 0 : I.methods, U),\n            events: ge((N = b[m]) == null ? void 0 : N.events, J),\n            accounts: ge((C = b[m]) == null ? void 0 : C.accounts, Bt)\n        };\n    }), b);\n}\n_c107 = Lu;\nfunction Zi(e) {\n    return e.includes(\":\");\n}\n_c108 = Zi;\nfunction vo(e) {\n    return Zi(e) ? e.split(\":\")[0] : e;\n}\nfunction $i(e) {\n    var t, r, i;\n    const n = {};\n    if (!Yr(e)) return n;\n    for (const [o, h] of Object.entries(e)){\n        const p = Zi(o) ? [\n            o\n        ] : h.chains, b = h.methods || [], m = h.events || [], w = vo(o);\n        n[w] = Hu(Ku({}, n[w]), {\n            chains: ge(p, (t = n[w]) == null ? void 0 : t.chains),\n            methods: ge(b, (r = n[w]) == null ? void 0 : r.methods),\n            events: ge(m, (i = n[w]) == null ? void 0 : i.events)\n        });\n    }\n    return n;\n}\nfunction mo(e) {\n    const t = {};\n    return e === null || e === void 0 ? void 0 : e.forEach((r)=>{\n        const [i, n] = r.split(\":\");\n        t[i] || (t[i] = {\n            accounts: [],\n            chains: [],\n            events: []\n        }), t[i].accounts.push(r), t[i].chains.push(\"\".concat(i, \":\").concat(n));\n    }), t;\n}\nfunction ju(e, t) {\n    t = t.map((i)=>i.replace(\"did:pkh:\", \"\"));\n    const r = mo(t);\n    for (const [i, n] of Object.entries(r))n.methods ? n.methods = ge(n.methods, e) : n.methods = e, n.events = [\n        \"chainChanged\",\n        \"accountsChanged\"\n    ];\n    return r;\n}\nconst go = {\n    INVALID_METHOD: {\n        message: \"Invalid method.\",\n        code: 1001\n    },\n    INVALID_EVENT: {\n        message: \"Invalid event.\",\n        code: 1002\n    },\n    INVALID_UPDATE_REQUEST: {\n        message: \"Invalid update request.\",\n        code: 1003\n    },\n    INVALID_EXTEND_REQUEST: {\n        message: \"Invalid extend request.\",\n        code: 1004\n    },\n    INVALID_SESSION_SETTLE_REQUEST: {\n        message: \"Invalid session settle request.\",\n        code: 1005\n    },\n    UNAUTHORIZED_METHOD: {\n        message: \"Unauthorized method.\",\n        code: 3001\n    },\n    UNAUTHORIZED_EVENT: {\n        message: \"Unauthorized event.\",\n        code: 3002\n    },\n    UNAUTHORIZED_UPDATE_REQUEST: {\n        message: \"Unauthorized update request.\",\n        code: 3003\n    },\n    UNAUTHORIZED_EXTEND_REQUEST: {\n        message: \"Unauthorized extend request.\",\n        code: 3004\n    },\n    USER_REJECTED: {\n        message: \"User rejected.\",\n        code: 5e3\n    },\n    USER_REJECTED_CHAINS: {\n        message: \"User rejected chains.\",\n        code: 5001\n    },\n    USER_REJECTED_METHODS: {\n        message: \"User rejected methods.\",\n        code: 5002\n    },\n    USER_REJECTED_EVENTS: {\n        message: \"User rejected events.\",\n        code: 5003\n    },\n    UNSUPPORTED_CHAINS: {\n        message: \"Unsupported chains.\",\n        code: 5100\n    },\n    UNSUPPORTED_METHODS: {\n        message: \"Unsupported methods.\",\n        code: 5101\n    },\n    UNSUPPORTED_EVENTS: {\n        message: \"Unsupported events.\",\n        code: 5102\n    },\n    UNSUPPORTED_ACCOUNTS: {\n        message: \"Unsupported accounts.\",\n        code: 5103\n    },\n    UNSUPPORTED_NAMESPACE_KEY: {\n        message: \"Unsupported namespace key.\",\n        code: 5104\n    },\n    USER_DISCONNECTED: {\n        message: \"User disconnected.\",\n        code: 6e3\n    },\n    SESSION_SETTLEMENT_FAILED: {\n        message: \"Session settlement failed.\",\n        code: 7e3\n    },\n    WC_METHOD_UNSUPPORTED: {\n        message: \"Unsupported wc_ method.\",\n        code: 10001\n    }\n}, Ao = {\n    NOT_INITIALIZED: {\n        message: \"Not initialized.\",\n        code: 1\n    },\n    NO_MATCHING_KEY: {\n        message: \"No matching key.\",\n        code: 2\n    },\n    RESTORE_WILL_OVERRIDE: {\n        message: \"Restore will override.\",\n        code: 3\n    },\n    RESUBSCRIBED: {\n        message: \"Resubscribed.\",\n        code: 4\n    },\n    MISSING_OR_INVALID: {\n        message: \"Missing or invalid.\",\n        code: 5\n    },\n    EXPIRED: {\n        message: \"Expired.\",\n        code: 6\n    },\n    UNKNOWN_TYPE: {\n        message: \"Unknown type.\",\n        code: 7\n    },\n    MISMATCHED_TOPIC: {\n        message: \"Mismatched topic.\",\n        code: 8\n    },\n    NON_CONFORMING_NAMESPACES: {\n        message: \"Non conforming namespaces.\",\n        code: 9\n    }\n};\nfunction xe(e, t) {\n    const { message: r, code: i } = Ao[e];\n    return {\n        message: t ? \"\".concat(r, \" \").concat(t) : r,\n        code: i\n    };\n}\nfunction tr(e, t) {\n    const { message: r, code: i } = go[e];\n    return {\n        message: t ? \"\".concat(r, \" \").concat(t) : r,\n        code: i\n    };\n}\nfunction Er(e, t) {\n    return Array.isArray(e) ? typeof t < \"u\" && e.length ? e.every(t) : !0 : !1;\n}\n_c109 = Er;\nfunction Yr(e) {\n    return Object.getPrototypeOf(e) === Object.prototype && Object.keys(e).length;\n}\n_c110 = Yr;\nfunction Pe(e) {\n    return typeof e > \"u\";\n}\n_c111 = Pe;\nfunction Gt(e, t) {\n    return t && Pe(e) ? !0 : typeof e == \"string\" && !!e.trim().length;\n}\n_c112 = Gt;\nfunction Vr(e, t) {\n    return t && Pe(e) ? !0 : typeof e == \"number\" && !isNaN(e);\n}\n_c113 = Vr;\nfunction Qu(e, t) {\n    const { requiredNamespaces: r } = t, i = Object.keys(e.namespaces), n = Object.keys(r);\n    let o = !0;\n    return _e(n, i) ? (i.forEach((h)=>{\n        const { accounts: p, methods: b, events: m } = e.namespaces[h], w = $e(p), y = r[h];\n        (!_e(_r(h, y), w) || !_e(y.methods, b) || !_e(y.events, m)) && (o = !1);\n    }), o) : !1;\n}\n_c114 = Qu;\nfunction Sr(e) {\n    return Gt(e, !1) && e.includes(\":\") ? e.split(\":\").length === 2 : !1;\n}\n_c115 = Sr;\nfunction bo(e) {\n    if (Gt(e, !1) && e.includes(\":\")) {\n        const t = e.split(\":\");\n        if (t.length === 3) {\n            const r = t[0] + \":\" + t[1];\n            return !!t[2] && Sr(r);\n        }\n    }\n    return !1;\n}\nfunction Ju(e) {\n    if (Gt(e, !1)) try {\n        return typeof new URL(e) < \"u\";\n    } catch (e) {\n        return !1;\n    }\n    return !1;\n}\n_c116 = Ju;\nfunction Gu(e) {\n    var t;\n    return (t = e === null || e === void 0 ? void 0 : e.proposer) == null ? void 0 : t.publicKey;\n}\n_c117 = Gu;\nfunction Yu(e) {\n    return e === null || e === void 0 ? void 0 : e.topic;\n}\n_c118 = Yu;\nfunction Vu(e, t) {\n    let r = null;\n    return Gt(e === null || e === void 0 ? void 0 : e.publicKey, !1) || (r = xe(\"MISSING_OR_INVALID\", \"\".concat(t, \" controller public key should be a string\"))), r;\n}\n_c119 = Vu;\nfunction tn(e) {\n    let t = !0;\n    return Er(e) ? e.length && (t = e.every((r)=>Gt(r, !1))) : t = !1, t;\n}\nfunction yo(e, t, r) {\n    let i = null;\n    return Er(t) && t.length ? t.forEach((n)=>{\n        i || Sr(n) || (i = tr(\"UNSUPPORTED_CHAINS\", \"\".concat(r, \", chain \").concat(n, ' should be a string and conform to \"namespace:chainId\" format')));\n    }) : Sr(e) || (i = tr(\"UNSUPPORTED_CHAINS\", \"\".concat(r, ', chains must be defined as \"namespace:chainId\" e.g. \"eip155:1\": {...} in the namespace key OR as an array of CAIP-2 chainIds e.g. eip155: { chains: [\"eip155:1\", \"eip155:5\"] }'))), i;\n}\nfunction wo(e, t, r) {\n    let i = null;\n    return Object.entries(e).forEach((param)=>{\n        let [n, o] = param;\n        if (i) return;\n        const h = yo(n, _r(n, o), \"\".concat(t, \" \").concat(r));\n        h && (i = h);\n    }), i;\n}\nfunction xo(e, t) {\n    let r = null;\n    return Er(e) ? e.forEach((i)=>{\n        r || bo(i) || (r = tr(\"UNSUPPORTED_ACCOUNTS\", \"\".concat(t, \", account \").concat(i, ' should be a string and conform to \"namespace:chainId:address\" format')));\n    }) : r = tr(\"UNSUPPORTED_ACCOUNTS\", \"\".concat(t, ', accounts should be an array of strings conforming to \"namespace:chainId:address\" format')), r;\n}\nfunction Mo(e, t) {\n    let r = null;\n    return Object.values(e).forEach((i)=>{\n        if (r) return;\n        const n = xo(i === null || i === void 0 ? void 0 : i.accounts, \"\".concat(t, \" namespace\"));\n        n && (r = n);\n    }), r;\n}\n_c120 = Mo;\nfunction Eo(e, t) {\n    let r = null;\n    return tn(e === null || e === void 0 ? void 0 : e.methods) ? tn(e === null || e === void 0 ? void 0 : e.events) || (r = tr(\"UNSUPPORTED_EVENTS\", \"\".concat(t, \", events should be an array of strings or empty array for no events\"))) : r = tr(\"UNSUPPORTED_METHODS\", \"\".concat(t, \", methods should be an array of strings or empty array for no methods\")), r;\n}\n_c121 = Eo;\nfunction en(e, t) {\n    let r = null;\n    return Object.values(e).forEach((i)=>{\n        if (r) return;\n        const n = Eo(i, \"\".concat(t, \", namespace\"));\n        n && (r = n);\n    }), r;\n}\nfunction Wu(e, t, r) {\n    let i = null;\n    if (e && Yr(e)) {\n        const n = en(e, t);\n        n && (i = n);\n        const o = wo(e, t, r);\n        o && (i = o);\n    } else i = xe(\"MISSING_OR_INVALID\", \"\".concat(t, \", \").concat(r, \" should be an object with data\"));\n    return i;\n}\n_c122 = Wu;\nfunction So(e, t) {\n    let r = null;\n    if (e && Yr(e)) {\n        const i = en(e, t);\n        i && (r = i);\n        const n = Mo(e, t);\n        n && (r = n);\n    } else r = xe(\"MISSING_OR_INVALID\", \"\".concat(t, \", namespaces should be an object with data\"));\n    return r;\n}\n_c123 = So;\nfunction No(e) {\n    return Gt(e.protocol, !0);\n}\n_c124 = No;\nfunction Xu(e, t) {\n    let r = !1;\n    return t && !e ? r = !0 : e && Er(e) && e.length && e.forEach((i)=>{\n        r = No(i);\n    }), r;\n}\n_c125 = Xu;\nfunction Zu(e) {\n    return typeof e == \"number\";\n}\n_c126 = Zu;\nfunction $u(e) {\n    return typeof e < \"u\" && typeof e !== null;\n}\nfunction th(e) {\n    return !(!e || typeof e != \"object\" || !e.code || !Vr(e.code, !1) || !e.message || !Gt(e.message, !1));\n}\nfunction eh(e) {\n    return !(Pe(e) || !Gt(e.method, !1));\n}\nfunction rh(e) {\n    return !(Pe(e) || Pe(e.result) && Pe(e.error) || !Vr(e.id, !1) || !Gt(e.jsonrpc, !1));\n}\nfunction ih(e) {\n    return !(Pe(e) || !Gt(e.name, !1));\n}\nfunction nh(e, t) {\n    return !(!Sr(t) || !co(e).includes(t));\n}\nfunction fh(e, t, r) {\n    return Gt(r, !1) ? lo(e, t).includes(r) : !1;\n}\nfunction oh(e, t, r) {\n    return Gt(r, !1) ? po(e, t).includes(r) : !1;\n}\nfunction Io(e, t, r) {\n    let i = null;\n    const n = sh(e), o = ah(t), h = Object.keys(n), p = Object.keys(o), b = _o(Object.keys(e)), m = _o(Object.keys(t)), w = b.filter((y)=>!m.includes(y));\n    return w.length && (i = xe(\"NON_CONFORMING_NAMESPACES\", \"\".concat(r, \" namespaces keys don't satisfy requiredNamespaces.\\n      Required: \").concat(w.toString(), \"\\n      Received: \").concat(Object.keys(t).toString()))), _e(h, p) || (i = xe(\"NON_CONFORMING_NAMESPACES\", \"\".concat(r, \" namespaces chains don't satisfy required namespaces.\\n      Required: \").concat(h.toString(), \"\\n      Approved: \").concat(p.toString()))), Object.keys(t).forEach((y)=>{\n        if (!y.includes(\":\") || i) return;\n        const S = $e(t[y].accounts);\n        S.includes(y) || (i = xe(\"NON_CONFORMING_NAMESPACES\", \"\".concat(r, \" namespaces accounts don't satisfy namespace accounts for \").concat(y, \"\\n        Required: \").concat(y, \"\\n        Approved: \").concat(S.toString())));\n    }), h.forEach((y)=>{\n        i || (_e(n[y].methods, o[y].methods) ? _e(n[y].events, o[y].events) || (i = xe(\"NON_CONFORMING_NAMESPACES\", \"\".concat(r, \" namespaces events don't satisfy namespace events for \").concat(y))) : i = xe(\"NON_CONFORMING_NAMESPACES\", \"\".concat(r, \" namespaces methods don't satisfy namespace methods for \").concat(y)));\n    }), i;\n}\n_c127 = Io;\nfunction sh(e) {\n    const t = {};\n    return Object.keys(e).forEach((r)=>{\n        var i;\n        r.includes(\":\") ? t[r] = e[r] : (i = e[r].chains) == null || i.forEach((n)=>{\n            t[n] = {\n                methods: e[r].methods,\n                events: e[r].events\n            };\n        });\n    }), t;\n}\nfunction _o(e) {\n    return [\n        ...new Set(e.map((t)=>t.includes(\":\") ? t.split(\":\")[0] : t))\n    ];\n}\nfunction ah(e) {\n    const t = {};\n    return Object.keys(e).forEach((r)=>{\n        if (r.includes(\":\")) t[r] = e[r];\n        else {\n            const i = $e(e[r].accounts);\n            i === null || i === void 0 ? void 0 : i.forEach((n)=>{\n                t[n] = {\n                    accounts: e[r].accounts.filter((o)=>o.includes(\"\".concat(n, \":\"))),\n                    methods: e[r].methods,\n                    events: e[r].events\n                };\n            });\n        }\n    }), t;\n}\nfunction uh(e, t) {\n    return Vr(e, !1) && e <= t.max && e >= t.min;\n}\nfunction hh() {\n    const e = We();\n    return new Promise((t)=>{\n        switch(e){\n            case qt.browser:\n                t(Bo());\n                break;\n            case qt.reactNative:\n                t(Co());\n                break;\n            case qt.node:\n                t(Ro());\n                break;\n            default:\n                t(!0);\n        }\n    });\n}\nfunction Bo() {\n    var _navigator;\n    return pr() && ((_navigator = navigator) === null || _navigator === void 0 ? void 0 : _navigator.onLine);\n}\n_c128 = Bo;\nasync function Co() {\n    if (er() && typeof __webpack_require__.g < \"u\" && __webpack_require__.g != null && __webpack_require__.g.NetInfo) {\n        const e = await (__webpack_require__.g == null ? void 0 : __webpack_require__.g.NetInfo.fetch());\n        return e === null || e === void 0 ? void 0 : e.isConnected;\n    }\n    return !0;\n}\n_c129 = Co;\nfunction Ro() {\n    return !0;\n}\n_c130 = Ro;\nfunction ch(e) {\n    switch(We()){\n        case qt.browser:\n            Oo(e);\n            break;\n        case qt.reactNative:\n            Po(e);\n            break;\n        case qt.node:\n            break;\n    }\n}\nfunction Oo(e) {\n    !er() && pr() && (window.addEventListener(\"online\", ()=>e(!0)), window.addEventListener(\"offline\", ()=>e(!1)));\n}\n_c131 = Oo;\nfunction Po(e) {\n    var _global;\n    er() && typeof __webpack_require__.g < \"u\" && __webpack_require__.g != null && __webpack_require__.g.NetInfo && ((_global = __webpack_require__.g) === null || _global === void 0 ? void 0 : _global.NetInfo.addEventListener((t)=>e(t === null || t === void 0 ? void 0 : t.isConnected)));\n}\n_c132 = Po;\nconst rn = {};\nclass lh {\n    static get(t) {\n        return rn[t];\n    }\n    static set(t, r) {\n        rn[t] = r;\n    }\n    static delete(t) {\n        delete rn[t];\n    }\n}\n //# sourceMappingURL=index.es.js.map\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21, _c22, _c23, _c24, _c25, _c26, _c27, _c28, _c29, _c30, _c31, _c32, _c33, _c34, _c35, _c36, _c37, _c38, _c39, _c40, _c41, _c42, _c43, _c44, _c45, _c46, _c47, _c48, _c49, _c50, _c51, _c52, _c53, _c54, _c55, _c56, _c57, _c58, _c59, _c60, _c61, _c62, _c63, _c64, _c65, _c66, _c67, _c68, _c69, _c70, _c71, _c72, _c73, _c74, _c75, _c76, _c77, _c78, _c79, _c80, _c81, _c82, _c83, _c84, _c85, _c86, _c87, _c88, _c89, _c90, _c91, _c92, _c93, _c94, _c95, _c96, _c97, _c98, _c99, _c100, _c101, _c102, _c103, _c104, _c105, _c106, _c107, _c108, _c109, _c110, _c111, _c112, _c113, _c114, _c115, _c116, _c117, _c118, _c119, _c120, _c121, _c122, _c123, _c124, _c125, _c126, _c127, _c128, _c129, _c130, _c131, _c132;\n$RefreshReg$(_c, \"Ko\");\n$RefreshReg$(_c1, \"Ho\");\n$RefreshReg$(_c2, \"An\");\n$RefreshReg$(_c3, \"Lo\");\n$RefreshReg$(_c4, \"We\");\n$RefreshReg$(_c5, \"Wo\");\n$RefreshReg$(_c6, \"Sn\");\n$RefreshReg$(_c7, \"Xo\");\n$RefreshReg$(_c8, \"Zo\");\n$RefreshReg$(_c9, \"Nn\");\n$RefreshReg$(_c10, \"In\");\n$RefreshReg$(_c11, \"Bn\");\n$RefreshReg$(_c12, \"Cn\");\n$RefreshReg$(_c13, \"Rn\");\n$RefreshReg$(_c14, \"A0\");\n$RefreshReg$(_c15, \"M0\");\n$RefreshReg$(_c16, \"Kn\");\n$RefreshReg$(_c17, \"Ot\");\n$RefreshReg$(_c18, \"E0\");\n$RefreshReg$(_c19, \"S0\");\n$RefreshReg$(_c20, \"Qt\");\n$RefreshReg$(_c21, \"Kt\");\n$RefreshReg$(_c22, \"N0\");\n$RefreshReg$(_c23, \"Hn\");\n$RefreshReg$(_c24, \"C0\");\n$RefreshReg$(_c25, \"Lt\");\n$RefreshReg$(_c26, \"Wt\");\n$RefreshReg$(_c27, \"R0\");\n$RefreshReg$(_c28, \"Vn\");\n$RefreshReg$(_c29, \"Mi\");\n$RefreshReg$(_c30, \"D0\");\n$RefreshReg$(_c31, \"Zn\");\n$RefreshReg$(_c32, \"F0\");\n$RefreshReg$(_c33, \"Ei\");\n$RefreshReg$(_c34, \"T0\");\n$RefreshReg$(_c35, \"Si\");\n$RefreshReg$(_c36, \"U0\");\n$RefreshReg$(_c37, \"K0\");\n$RefreshReg$(_c38, \"H0\");\n$RefreshReg$(_c39, \"L0\");\n$RefreshReg$(_c40, \"Pr\");\n$RefreshReg$(_c41, \"Q0\");\n$RefreshReg$(_c42, \"J0\");\n$RefreshReg$(_c43, \"G0\");\n$RefreshReg$(_c44, \"Y0\");\n$RefreshReg$(_c45, \"V0\");\n$RefreshReg$(_c46, \"W0\");\n$RefreshReg$(_c47, \"As\");\n$RefreshReg$(_c48, \"Ms\");\n$RefreshReg$(_c49, \"Es\");\n$RefreshReg$(_c50, \"Ss\");\n$RefreshReg$(_c51, \"Ns\");\n$RefreshReg$(_c52, \"Is\");\n$RefreshReg$(_c53, \"Bs\");\n$RefreshReg$(_c54, \"Cs\");\n$RefreshReg$(_c55, \"Rs\");\n$RefreshReg$(_c56, \"Os\");\n$RefreshReg$(_c57, \"Ps\");\n$RefreshReg$(_c58, \"Fr\");\n$RefreshReg$(_c59, \"Ts\");\n$RefreshReg$(_c60, \"Us\");\n$RefreshReg$(_c61, \"Ks\");\n$RefreshReg$(_c62, \"Aa\");\n$RefreshReg$(_c63, \"Ma\");\n$RefreshReg$(_c64, \"Bf\");\n$RefreshReg$(_c65, \"Na\");\n$RefreshReg$(_c66, \"Ia\");\n$RefreshReg$(_c67, \"Fa\");\n$RefreshReg$(_c68, \"Cf\");\n$RefreshReg$(_c69, \"Ce\");\n$RefreshReg$(_c70, \"Xt\");\n$RefreshReg$(_c71, \"Zt\");\n$RefreshReg$(_c72, \"Ft\");\n$RefreshReg$(_c73, \"Tt\");\n$RefreshReg$(_c74, \"Re\");\n$RefreshReg$(_c75, \"Hr\");\n$RefreshReg$(_c76, \"Ka\");\n$RefreshReg$(_c77, \"Ui\");\n$RefreshReg$(_c78, \"Of\");\n$RefreshReg$(_c79, \"Ga\");\n$RefreshReg$(_c80, \"Df\");\n$RefreshReg$(_c81, \"Va\");\n$RefreshReg$(_c82, \"Wa\");\n$RefreshReg$(_c83, \"Tf\");\n$RefreshReg$(_c84, \"Uf\");\n$RefreshReg$(_c85, \"Za\");\n$RefreshReg$(_c86, \"Lf\");\n$RefreshReg$(_c87, \"Qf\");\n$RefreshReg$(_c88, \"Jf\");\n$RefreshReg$(_c89, \"Gf\");\n$RefreshReg$(_c90, \"Yf\");\n$RefreshReg$(_c91, \"Vf\");\n$RefreshReg$(_c92, \"Oe\");\n$RefreshReg$(_c93, \"Qi\");\n$RefreshReg$(_c94, \"Wf\");\n$RefreshReg$(_c95, \"Ji\");\n$RefreshReg$(_c96, \"Xf\");\n$RefreshReg$(_c97, \"Qr\");\n$RefreshReg$(_c98, \"Au\");\n$RefreshReg$(_c99, \"Mr\");\n$RefreshReg$(_c100, \"Xi\");\n$RefreshReg$(_c101, \"Mu\");\n$RefreshReg$(_c102, \"Eu\");\n$RefreshReg$(_c103, \"Su\");\n$RefreshReg$(_c104, \"Nu\");\n$RefreshReg$(_c105, \"Pu\");\n$RefreshReg$(_c106, \"Du\");\n$RefreshReg$(_c107, \"Lu\");\n$RefreshReg$(_c108, \"Zi\");\n$RefreshReg$(_c109, \"Er\");\n$RefreshReg$(_c110, \"Yr\");\n$RefreshReg$(_c111, \"Pe\");\n$RefreshReg$(_c112, \"Gt\");\n$RefreshReg$(_c113, \"Vr\");\n$RefreshReg$(_c114, \"Qu\");\n$RefreshReg$(_c115, \"Sr\");\n$RefreshReg$(_c116, \"Ju\");\n$RefreshReg$(_c117, \"Gu\");\n$RefreshReg$(_c118, \"Yu\");\n$RefreshReg$(_c119, \"Vu\");\n$RefreshReg$(_c120, \"Mo\");\n$RefreshReg$(_c121, \"Eo\");\n$RefreshReg$(_c122, \"Wu\");\n$RefreshReg$(_c123, \"So\");\n$RefreshReg$(_c124, \"No\");\n$RefreshReg$(_c125, \"Xu\");\n$RefreshReg$(_c126, \"Zu\");\n$RefreshReg$(_c127, \"Io\");\n$RefreshReg$(_c128, \"Bo\");\n$RefreshReg$(_c129, \"Co\");\n$RefreshReg$(_c130, \"Ro\");\n$RefreshReg$(_c131, \"Oo\");\n$RefreshReg$(_c132, \"Po\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@walletconnect/utils/dist/index.es.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/cross-fetch/dist/browser-ponyfill.js":
/*!***********************************************************!*\
  !*** ./node_modules/cross-fetch/dist/browser-ponyfill.js ***!
  \***********************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("\nvar global = typeof self !== \"undefined\" ? self : void 0;\nvar __self__ = function() {\n    function F() {\n        this.fetch = false;\n        this.DOMException = global.DOMException;\n    }\n    F.prototype = global;\n    return new F();\n}();\n(function(self1) {\n    var irrelevant = function(exports1) {\n        var support = {\n            searchParams: \"URLSearchParams\" in self1,\n            iterable: \"Symbol\" in self1 && \"iterator\" in Symbol,\n            blob: \"FileReader\" in self1 && \"Blob\" in self1 && function() {\n                try {\n                    new Blob();\n                    return true;\n                } catch (e) {\n                    return false;\n                }\n            }(),\n            formData: \"FormData\" in self1,\n            arrayBuffer: \"ArrayBuffer\" in self1\n        };\n        function isDataView(obj) {\n            return obj && DataView.prototype.isPrototypeOf(obj);\n        }\n        if (support.arrayBuffer) {\n            var viewClasses = [\n                \"[object Int8Array]\",\n                \"[object Uint8Array]\",\n                \"[object Uint8ClampedArray]\",\n                \"[object Int16Array]\",\n                \"[object Uint16Array]\",\n                \"[object Int32Array]\",\n                \"[object Uint32Array]\",\n                \"[object Float32Array]\",\n                \"[object Float64Array]\"\n            ];\n            var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n                return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;\n            };\n        }\n        function normalizeName(name) {\n            if (typeof name !== \"string\") {\n                name = String(name);\n            }\n            if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n                throw new TypeError(\"Invalid character in header field name\");\n            }\n            return name.toLowerCase();\n        }\n        function normalizeValue(value) {\n            if (typeof value !== \"string\") {\n                value = String(value);\n            }\n            return value;\n        }\n        // Build a destructive iterator for the value list\n        function iteratorFor(items) {\n            var iterator = {\n                next: function() {\n                    var value = items.shift();\n                    return {\n                        done: value === undefined,\n                        value: value\n                    };\n                }\n            };\n            if (support.iterable) {\n                iterator[Symbol.iterator] = function() {\n                    return iterator;\n                };\n            }\n            return iterator;\n        }\n        function Headers(headers) {\n            this.map = {};\n            if (headers instanceof Headers) {\n                headers.forEach(function(value, name) {\n                    this.append(name, value);\n                }, this);\n            } else if (Array.isArray(headers)) {\n                headers.forEach(function(header) {\n                    this.append(header[0], header[1]);\n                }, this);\n            } else if (headers) {\n                Object.getOwnPropertyNames(headers).forEach(function(name) {\n                    this.append(name, headers[name]);\n                }, this);\n            }\n        }\n        Headers.prototype.append = function(name, value) {\n            name = normalizeName(name);\n            value = normalizeValue(value);\n            var oldValue = this.map[name];\n            this.map[name] = oldValue ? oldValue + \", \" + value : value;\n        };\n        Headers.prototype[\"delete\"] = function(name) {\n            delete this.map[normalizeName(name)];\n        };\n        Headers.prototype.get = function(name) {\n            name = normalizeName(name);\n            return this.has(name) ? this.map[name] : null;\n        };\n        Headers.prototype.has = function(name) {\n            return this.map.hasOwnProperty(normalizeName(name));\n        };\n        Headers.prototype.set = function(name, value) {\n            this.map[normalizeName(name)] = normalizeValue(value);\n        };\n        Headers.prototype.forEach = function(callback, thisArg) {\n            for(var name in this.map){\n                if (this.map.hasOwnProperty(name)) {\n                    callback.call(thisArg, this.map[name], name, this);\n                }\n            }\n        };\n        Headers.prototype.keys = function() {\n            var items = [];\n            this.forEach(function(value, name) {\n                items.push(name);\n            });\n            return iteratorFor(items);\n        };\n        Headers.prototype.values = function() {\n            var items = [];\n            this.forEach(function(value) {\n                items.push(value);\n            });\n            return iteratorFor(items);\n        };\n        Headers.prototype.entries = function() {\n            var items = [];\n            this.forEach(function(value, name) {\n                items.push([\n                    name,\n                    value\n                ]);\n            });\n            return iteratorFor(items);\n        };\n        if (support.iterable) {\n            Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n        }\n        function consumed(body) {\n            if (body.bodyUsed) {\n                return Promise.reject(new TypeError(\"Already read\"));\n            }\n            body.bodyUsed = true;\n        }\n        function fileReaderReady(reader) {\n            return new Promise(function(resolve, reject) {\n                reader.onload = function() {\n                    resolve(reader.result);\n                };\n                reader.onerror = function() {\n                    reject(reader.error);\n                };\n            });\n        }\n        function readBlobAsArrayBuffer(blob) {\n            var reader = new FileReader();\n            var promise = fileReaderReady(reader);\n            reader.readAsArrayBuffer(blob);\n            return promise;\n        }\n        function readBlobAsText(blob) {\n            var reader = new FileReader();\n            var promise = fileReaderReady(reader);\n            reader.readAsText(blob);\n            return promise;\n        }\n        function readArrayBufferAsText(buf) {\n            var view = new Uint8Array(buf);\n            var chars = new Array(view.length);\n            for(var i = 0; i < view.length; i++){\n                chars[i] = String.fromCharCode(view[i]);\n            }\n            return chars.join(\"\");\n        }\n        function bufferClone(buf) {\n            if (buf.slice) {\n                return buf.slice(0);\n            } else {\n                var view = new Uint8Array(buf.byteLength);\n                view.set(new Uint8Array(buf));\n                return view.buffer;\n            }\n        }\n        function Body() {\n            this.bodyUsed = false;\n            this._initBody = function(body) {\n                this._bodyInit = body;\n                if (!body) {\n                    this._bodyText = \"\";\n                } else if (typeof body === \"string\") {\n                    this._bodyText = body;\n                } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n                    this._bodyBlob = body;\n                } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n                    this._bodyFormData = body;\n                } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n                    this._bodyText = body.toString();\n                } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n                    this._bodyArrayBuffer = bufferClone(body.buffer);\n                    // IE 10-11 can't handle a DataView body.\n                    this._bodyInit = new Blob([\n                        this._bodyArrayBuffer\n                    ]);\n                } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n                    this._bodyArrayBuffer = bufferClone(body);\n                } else {\n                    this._bodyText = body = Object.prototype.toString.call(body);\n                }\n                if (!this.headers.get(\"content-type\")) {\n                    if (typeof body === \"string\") {\n                        this.headers.set(\"content-type\", \"text/plain;charset=UTF-8\");\n                    } else if (this._bodyBlob && this._bodyBlob.type) {\n                        this.headers.set(\"content-type\", this._bodyBlob.type);\n                    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n                        this.headers.set(\"content-type\", \"application/x-www-form-urlencoded;charset=UTF-8\");\n                    }\n                }\n            };\n            if (support.blob) {\n                this.blob = function() {\n                    var rejected = consumed(this);\n                    if (rejected) {\n                        return rejected;\n                    }\n                    if (this._bodyBlob) {\n                        return Promise.resolve(this._bodyBlob);\n                    } else if (this._bodyArrayBuffer) {\n                        return Promise.resolve(new Blob([\n                            this._bodyArrayBuffer\n                        ]));\n                    } else if (this._bodyFormData) {\n                        throw new Error(\"could not read FormData body as blob\");\n                    } else {\n                        return Promise.resolve(new Blob([\n                            this._bodyText\n                        ]));\n                    }\n                };\n                this.arrayBuffer = function() {\n                    if (this._bodyArrayBuffer) {\n                        return consumed(this) || Promise.resolve(this._bodyArrayBuffer);\n                    } else {\n                        return this.blob().then(readBlobAsArrayBuffer);\n                    }\n                };\n            }\n            this.text = function() {\n                var rejected = consumed(this);\n                if (rejected) {\n                    return rejected;\n                }\n                if (this._bodyBlob) {\n                    return readBlobAsText(this._bodyBlob);\n                } else if (this._bodyArrayBuffer) {\n                    return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));\n                } else if (this._bodyFormData) {\n                    throw new Error(\"could not read FormData body as text\");\n                } else {\n                    return Promise.resolve(this._bodyText);\n                }\n            };\n            if (support.formData) {\n                this.formData = function() {\n                    return this.text().then(decode);\n                };\n            }\n            this.json = function() {\n                return this.text().then(JSON.parse);\n            };\n            return this;\n        }\n        // HTTP methods whose capitalization should be normalized\n        var methods = [\n            \"DELETE\",\n            \"GET\",\n            \"HEAD\",\n            \"OPTIONS\",\n            \"POST\",\n            \"PUT\"\n        ];\n        function normalizeMethod(method) {\n            var upcased = method.toUpperCase();\n            return methods.indexOf(upcased) > -1 ? upcased : method;\n        }\n        function Request(input, options) {\n            options = options || {};\n            var body = options.body;\n            if (input instanceof Request) {\n                if (input.bodyUsed) {\n                    throw new TypeError(\"Already read\");\n                }\n                this.url = input.url;\n                this.credentials = input.credentials;\n                if (!options.headers) {\n                    this.headers = new Headers(input.headers);\n                }\n                this.method = input.method;\n                this.mode = input.mode;\n                this.signal = input.signal;\n                if (!body && input._bodyInit != null) {\n                    body = input._bodyInit;\n                    input.bodyUsed = true;\n                }\n            } else {\n                this.url = String(input);\n            }\n            this.credentials = options.credentials || this.credentials || \"same-origin\";\n            if (options.headers || !this.headers) {\n                this.headers = new Headers(options.headers);\n            }\n            this.method = normalizeMethod(options.method || this.method || \"GET\");\n            this.mode = options.mode || this.mode || null;\n            this.signal = options.signal || this.signal;\n            this.referrer = null;\n            if ((this.method === \"GET\" || this.method === \"HEAD\") && body) {\n                throw new TypeError(\"Body not allowed for GET or HEAD requests\");\n            }\n            this._initBody(body);\n        }\n        Request.prototype.clone = function() {\n            return new Request(this, {\n                body: this._bodyInit\n            });\n        };\n        function decode(body) {\n            var form = new FormData();\n            body.trim().split(\"&\").forEach(function(bytes) {\n                if (bytes) {\n                    var split = bytes.split(\"=\");\n                    var name = split.shift().replace(/\\+/g, \" \");\n                    var value = split.join(\"=\").replace(/\\+/g, \" \");\n                    form.append(decodeURIComponent(name), decodeURIComponent(value));\n                }\n            });\n            return form;\n        }\n        function parseHeaders(rawHeaders) {\n            var headers = new Headers();\n            // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n            // https://tools.ietf.org/html/rfc7230#section-3.2\n            var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, \" \");\n            preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n                var parts = line.split(\":\");\n                var key = parts.shift().trim();\n                if (key) {\n                    var value = parts.join(\":\").trim();\n                    headers.append(key, value);\n                }\n            });\n            return headers;\n        }\n        Body.call(Request.prototype);\n        function Response(bodyInit, options) {\n            if (!options) {\n                options = {};\n            }\n            this.type = \"default\";\n            this.status = options.status === undefined ? 200 : options.status;\n            this.ok = this.status >= 200 && this.status < 300;\n            this.statusText = \"statusText\" in options ? options.statusText : \"OK\";\n            this.headers = new Headers(options.headers);\n            this.url = options.url || \"\";\n            this._initBody(bodyInit);\n        }\n        Body.call(Response.prototype);\n        Response.prototype.clone = function() {\n            return new Response(this._bodyInit, {\n                status: this.status,\n                statusText: this.statusText,\n                headers: new Headers(this.headers),\n                url: this.url\n            });\n        };\n        Response.error = function() {\n            var response = new Response(null, {\n                status: 0,\n                statusText: \"\"\n            });\n            response.type = \"error\";\n            return response;\n        };\n        var redirectStatuses = [\n            301,\n            302,\n            303,\n            307,\n            308\n        ];\n        Response.redirect = function(url, status) {\n            if (redirectStatuses.indexOf(status) === -1) {\n                throw new RangeError(\"Invalid status code\");\n            }\n            return new Response(null, {\n                status: status,\n                headers: {\n                    location: url\n                }\n            });\n        };\n        exports1.DOMException = self1.DOMException;\n        try {\n            new exports1.DOMException();\n        } catch (err) {\n            exports1.DOMException = function(message, name) {\n                this.message = message;\n                this.name = name;\n                var error = Error(message);\n                this.stack = error.stack;\n            };\n            exports1.DOMException.prototype = Object.create(Error.prototype);\n            exports1.DOMException.prototype.constructor = exports1.DOMException;\n        }\n        function fetch(input, init) {\n            return new Promise(function(resolve, reject) {\n                var request = new Request(input, init);\n                if (request.signal && request.signal.aborted) {\n                    return reject(new exports1.DOMException(\"Aborted\", \"AbortError\"));\n                }\n                var xhr = new XMLHttpRequest();\n                function abortXhr() {\n                    xhr.abort();\n                }\n                xhr.onload = function() {\n                    var options = {\n                        status: xhr.status,\n                        statusText: xhr.statusText,\n                        headers: parseHeaders(xhr.getAllResponseHeaders() || \"\")\n                    };\n                    options.url = \"responseURL\" in xhr ? xhr.responseURL : options.headers.get(\"X-Request-URL\");\n                    var body = \"response\" in xhr ? xhr.response : xhr.responseText;\n                    resolve(new Response(body, options));\n                };\n                xhr.onerror = function() {\n                    reject(new TypeError(\"Network request failed\"));\n                };\n                xhr.ontimeout = function() {\n                    reject(new TypeError(\"Network request failed\"));\n                };\n                xhr.onabort = function() {\n                    reject(new exports1.DOMException(\"Aborted\", \"AbortError\"));\n                };\n                xhr.open(request.method, request.url, true);\n                if (request.credentials === \"include\") {\n                    xhr.withCredentials = true;\n                } else if (request.credentials === \"omit\") {\n                    xhr.withCredentials = false;\n                }\n                if (\"responseType\" in xhr && support.blob) {\n                    xhr.responseType = \"blob\";\n                }\n                request.headers.forEach(function(value, name) {\n                    xhr.setRequestHeader(name, value);\n                });\n                if (request.signal) {\n                    request.signal.addEventListener(\"abort\", abortXhr);\n                    xhr.onreadystatechange = function() {\n                        // DONE (success or failure)\n                        if (xhr.readyState === 4) {\n                            request.signal.removeEventListener(\"abort\", abortXhr);\n                        }\n                    };\n                }\n                xhr.send(typeof request._bodyInit === \"undefined\" ? null : request._bodyInit);\n            });\n        }\n        fetch.polyfill = true;\n        if (!self1.fetch) {\n            self1.fetch = fetch;\n            self1.Headers = Headers;\n            self1.Request = Request;\n            self1.Response = Response;\n        }\n        exports1.Headers = Headers;\n        exports1.Request = Request;\n        exports1.Response = Response;\n        exports1.fetch = fetch;\n        Object.defineProperty(exports1, \"__esModule\", {\n            value: true\n        });\n        return exports1;\n    }({});\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\n;\nexports[\"default\"] = ctx.fetch // For TypeScript consumers without esModuleInterop.\n;\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\n;\nexports.Headers = ctx.Headers;\nexports.Request = ctx.Request;\nexports.Response = ctx.Response;\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/cross-fetch/dist/browser-ponyfill.js\n"));

/***/ })

}]);