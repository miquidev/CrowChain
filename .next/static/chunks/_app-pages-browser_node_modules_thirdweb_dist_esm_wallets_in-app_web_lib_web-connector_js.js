"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_thirdweb_dist_esm_wallets_in-app_web_lib_web-connector_js"],{

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/rpc/actions/eth_sendRawTransaction.js":
/*!******************************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/rpc/actions/eth_sendRawTransaction.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   eth_sendRawTransaction: function() { return /* binding */ eth_sendRawTransaction; }\n/* harmony export */ });\n/**\n * Sends a raw transaction to the Ethereum network.\n * @param request - The EIP1193 request function.\n * @param signedTransaction - The signed transaction in hex format.\n * @returns A promise that resolves to the transaction hash.\n * @rpc\n * @example\n * ```ts\n * import { getRpcClient, eth_sendRawTransaction } from \"thirdweb/rpc\";\n * const rpcRequest = getRpcClient({ client, chain });\n * const transactionHash = await eth_sendRawTransaction(rpcRequest, \"0x...\");\n * ```\n */ async function eth_sendRawTransaction(request, signedTransaction) {\n    return await request({\n        method: \"eth_sendRawTransaction\",\n        params: [\n            signedTransaction\n        ]\n    });\n} //# sourceMappingURL=eth_sendRawTransaction.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS9ycGMvYWN0aW9ucy9ldGhfc2VuZFJhd1RyYW5zYWN0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7Ozs7Ozs7O0NBWUMsR0FDTSxlQUFlQSx1QkFBdUJDLE9BQU8sRUFBRUMsaUJBQWlCO0lBQ25FLE9BQU8sTUFBTUQsUUFBUTtRQUNqQkUsUUFBUTtRQUNSQyxRQUFRO1lBQUNGO1NBQWtCO0lBQy9CO0FBQ0osRUFDQSxrREFBa0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RoaXJkd2ViL2Rpc3QvZXNtL3JwYy9hY3Rpb25zL2V0aF9zZW5kUmF3VHJhbnNhY3Rpb24uanM/MGYyYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNlbmRzIGEgcmF3IHRyYW5zYWN0aW9uIHRvIHRoZSBFdGhlcmV1bSBuZXR3b3JrLlxuICogQHBhcmFtIHJlcXVlc3QgLSBUaGUgRUlQMTE5MyByZXF1ZXN0IGZ1bmN0aW9uLlxuICogQHBhcmFtIHNpZ25lZFRyYW5zYWN0aW9uIC0gVGhlIHNpZ25lZCB0cmFuc2FjdGlvbiBpbiBoZXggZm9ybWF0LlxuICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIHRyYW5zYWN0aW9uIGhhc2guXG4gKiBAcnBjXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGltcG9ydCB7IGdldFJwY0NsaWVudCwgZXRoX3NlbmRSYXdUcmFuc2FjdGlvbiB9IGZyb20gXCJ0aGlyZHdlYi9ycGNcIjtcbiAqIGNvbnN0IHJwY1JlcXVlc3QgPSBnZXRScGNDbGllbnQoeyBjbGllbnQsIGNoYWluIH0pO1xuICogY29uc3QgdHJhbnNhY3Rpb25IYXNoID0gYXdhaXQgZXRoX3NlbmRSYXdUcmFuc2FjdGlvbihycGNSZXF1ZXN0LCBcIjB4Li4uXCIpO1xuICogYGBgXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBldGhfc2VuZFJhd1RyYW5zYWN0aW9uKHJlcXVlc3QsIHNpZ25lZFRyYW5zYWN0aW9uKSB7XG4gICAgcmV0dXJuIGF3YWl0IHJlcXVlc3Qoe1xuICAgICAgICBtZXRob2Q6IFwiZXRoX3NlbmRSYXdUcmFuc2FjdGlvblwiLFxuICAgICAgICBwYXJhbXM6IFtzaWduZWRUcmFuc2FjdGlvbl0sXG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldGhfc2VuZFJhd1RyYW5zYWN0aW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJldGhfc2VuZFJhd1RyYW5zYWN0aW9uIiwicmVxdWVzdCIsInNpZ25lZFRyYW5zYWN0aW9uIiwibWV0aG9kIiwicGFyYW1zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/rpc/actions/eth_sendRawTransaction.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/ecosystem/get-ecosystem-partner-permissions.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/wallets/ecosystem/get-ecosystem-partner-permissions.js ***!
  \***********************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEcosystemPartnerPermissions: function() { return /* binding */ getEcosystemPartnerPermissions; }\n/* harmony export */ });\n/* harmony import */ var _utils_domains_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/domains.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/domains.js\");\n\nconst getEcosystemPartnerPermissions = async (ecosystemId, partnerId)=>{\n    const res = await fetch(\"\".concat((0,_utils_domains_js__WEBPACK_IMPORTED_MODULE_0__.getThirdwebBaseUrl)(\"inAppWallet\"), \"/api/2024-05-05/ecosystem-wallet/\").concat(ecosystemId, \"/partner/\").concat(partnerId), {\n        headers: {\n            \"x-ecosystem-id\": ecosystemId,\n            \"x-ecosystem-partner-id\": partnerId || \"\"\n        }\n    });\n    const data = await res.json();\n    return data;\n}; //# sourceMappingURL=get-ecosystem-partner-permissions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS93YWxsZXRzL2Vjb3N5c3RlbS9nZXQtZWNvc3lzdGVtLXBhcnRuZXItcGVybWlzc2lvbnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNEQ7QUFDckQsTUFBTUMsaUNBQWlDLE9BQU9DLGFBQWFDO0lBQzlELE1BQU1DLE1BQU0sTUFBTUMsTUFBTSxHQUF3RUgsT0FBckVGLHFFQUFrQkEsQ0FBQyxnQkFBZSxxQ0FBMERHLE9BQXZCRCxhQUFZLGFBQXFCLE9BQVZDLFlBQWE7UUFDaElHLFNBQVM7WUFDTCxrQkFBa0JKO1lBQ2xCLDBCQUEwQkMsYUFBYTtRQUMzQztJQUNKO0lBQ0EsTUFBTUksT0FBUSxNQUFNSCxJQUFJSSxJQUFJO0lBQzVCLE9BQU9EO0FBQ1gsRUFBRSxDQUNGLDZEQUE2RCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvdGhpcmR3ZWIvZGlzdC9lc20vd2FsbGV0cy9lY29zeXN0ZW0vZ2V0LWVjb3N5c3RlbS1wYXJ0bmVyLXBlcm1pc3Npb25zLmpzPzBmZjQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0VGhpcmR3ZWJCYXNlVXJsIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2RvbWFpbnMuanNcIjtcbmV4cG9ydCBjb25zdCBnZXRFY29zeXN0ZW1QYXJ0bmVyUGVybWlzc2lvbnMgPSBhc3luYyAoZWNvc3lzdGVtSWQsIHBhcnRuZXJJZCkgPT4ge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGAke2dldFRoaXJkd2ViQmFzZVVybChcImluQXBwV2FsbGV0XCIpfS9hcGkvMjAyNC0wNS0wNS9lY29zeXN0ZW0td2FsbGV0LyR7ZWNvc3lzdGVtSWR9L3BhcnRuZXIvJHtwYXJ0bmVySWR9YCwge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBcIngtZWNvc3lzdGVtLWlkXCI6IGVjb3N5c3RlbUlkLFxuICAgICAgICAgICAgXCJ4LWVjb3N5c3RlbS1wYXJ0bmVyLWlkXCI6IHBhcnRuZXJJZCB8fCBcIlwiLFxuICAgICAgICB9LFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSAoYXdhaXQgcmVzLmpzb24oKSk7XG4gICAgcmV0dXJuIGRhdGE7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0LWVjb3N5c3RlbS1wYXJ0bmVyLXBlcm1pc3Npb25zLmpzLm1hcCJdLCJuYW1lcyI6WyJnZXRUaGlyZHdlYkJhc2VVcmwiLCJnZXRFY29zeXN0ZW1QYXJ0bmVyUGVybWlzc2lvbnMiLCJlY29zeXN0ZW1JZCIsInBhcnRuZXJJZCIsInJlcyIsImZldGNoIiwiaGVhZGVycyIsImRhdGEiLCJqc29uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/ecosystem/get-ecosystem-partner-permissions.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/in-app/web/lib/auth/abstract-login.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/wallets/in-app/web/lib/auth/abstract-login.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractLogin: function() { return /* binding */ AbstractLogin; }\n/* harmony export */ });\n/**\n * @internal\n */ class AbstractLogin {\n    /**\n     * @internal\n     */ async sendEmailLoginOtp(param) {\n        let { email } = param;\n        await this.preLogin();\n        const result = await this.LoginQuerier.call({\n            procedureName: \"sendThirdwebEmailLoginOtp\",\n            params: {\n                email\n            }\n        });\n        return result;\n    }\n    /**\n     *\n     * @internal\n     */ async sendSmsLoginOtp(param) {\n        let { phoneNumber } = param;\n        await this.preLogin();\n        const result = await this.LoginQuerier.call({\n            procedureName: \"sendThirdwebSmsLoginOtp\",\n            params: {\n                phoneNumber\n            }\n        });\n        return result;\n    }\n    /**\n     * Used to manage the user's auth states. This should not be instantiated directly.\n     * @internal\n     */ constructor({ baseUrl, querier, preLogin, postLogin, client, ecosystem }){\n        Object.defineProperty(this, \"LoginQuerier\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"preLogin\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"postLogin\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"baseUrl\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"ecosystem\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.baseUrl = baseUrl;\n        this.LoginQuerier = querier;\n        this.preLogin = preLogin;\n        this.postLogin = postLogin;\n        this.client = client;\n        this.ecosystem = ecosystem;\n    }\n} //# sourceMappingURL=abstract-login.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS93YWxsZXRzL2luLWFwcC93ZWIvbGliL2F1dGgvYWJzdHJhY3QtbG9naW4uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztDQUVDLEdBQ00sTUFBTUE7SUFpRFQ7O0tBRUMsR0FDRCxNQUFNQyxrQkFBa0IsS0FBVSxFQUFFO1lBQVosRUFBRUMsS0FBSyxFQUFHLEdBQVY7UUFDcEIsTUFBTSxJQUFJLENBQUNDLFFBQVE7UUFDbkIsTUFBTUMsU0FBUyxNQUFNLElBQUksQ0FBQ0MsWUFBWSxDQUFDQyxJQUFJLENBQUM7WUFDeENDLGVBQWU7WUFDZkMsUUFBUTtnQkFBRU47WUFBTTtRQUNwQjtRQUNBLE9BQU9FO0lBQ1g7SUFDQTs7O0tBR0MsR0FDRCxNQUFNSyxnQkFBZ0IsS0FBZ0IsRUFBRTtZQUFsQixFQUFFQyxXQUFXLEVBQUcsR0FBaEI7UUFDbEIsTUFBTSxJQUFJLENBQUNQLFFBQVE7UUFDbkIsTUFBTUMsU0FBUyxNQUFNLElBQUksQ0FBQ0MsWUFBWSxDQUFDQyxJQUFJLENBQUM7WUFDeENDLGVBQWU7WUFDZkMsUUFBUTtnQkFBRUU7WUFBWTtRQUMxQjtRQUNBLE9BQU9OO0lBQ1g7SUF0RUE7OztLQUdDLEdBQ0RPLFlBQVksRUFBRUMsT0FBTyxFQUFFQyxPQUFPLEVBQUVWLFFBQVEsRUFBRVcsU0FBUyxFQUFFQyxNQUFNLEVBQUVDLFNBQVMsRUFBRyxDQUFFO1FBQ3ZFQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGdCQUFnQjtZQUN4Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsWUFBWTtZQUNwQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsYUFBYTtZQUNyQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsVUFBVTtZQUNsQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsV0FBVztZQUNuQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsYUFBYTtZQUNyQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0EsSUFBSSxDQUFDVixPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDUCxZQUFZLEdBQUdRO1FBQ3BCLElBQUksQ0FBQ1YsUUFBUSxHQUFHQTtRQUNoQixJQUFJLENBQUNXLFNBQVMsR0FBR0E7UUFDakIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBO1FBQ2QsSUFBSSxDQUFDQyxTQUFTLEdBQUdBO0lBQ3JCO0FBd0JKLEVBQ0EsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS93YWxsZXRzL2luLWFwcC93ZWIvbGliL2F1dGgvYWJzdHJhY3QtbG9naW4uanM/YTM2MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY2xhc3MgQWJzdHJhY3RMb2dpbiB7XG4gICAgLyoqXG4gICAgICogVXNlZCB0byBtYW5hZ2UgdGhlIHVzZXIncyBhdXRoIHN0YXRlcy4gVGhpcyBzaG91bGQgbm90IGJlIGluc3RhbnRpYXRlZCBkaXJlY3RseS5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih7IGJhc2VVcmwsIHF1ZXJpZXIsIHByZUxvZ2luLCBwb3N0TG9naW4sIGNsaWVudCwgZWNvc3lzdGVtLCB9KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIkxvZ2luUXVlcmllclwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJwcmVMb2dpblwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJwb3N0TG9naW5cIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiY2xpZW50XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImJhc2VVcmxcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiZWNvc3lzdGVtXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYmFzZVVybCA9IGJhc2VVcmw7XG4gICAgICAgIHRoaXMuTG9naW5RdWVyaWVyID0gcXVlcmllcjtcbiAgICAgICAgdGhpcy5wcmVMb2dpbiA9IHByZUxvZ2luO1xuICAgICAgICB0aGlzLnBvc3RMb2dpbiA9IHBvc3RMb2dpbjtcbiAgICAgICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gICAgICAgIHRoaXMuZWNvc3lzdGVtID0gZWNvc3lzdGVtO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBhc3luYyBzZW5kRW1haWxMb2dpbk90cCh7IGVtYWlsLCB9KSB7XG4gICAgICAgIGF3YWl0IHRoaXMucHJlTG9naW4oKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5Mb2dpblF1ZXJpZXIuY2FsbCh7XG4gICAgICAgICAgICBwcm9jZWR1cmVOYW1lOiBcInNlbmRUaGlyZHdlYkVtYWlsTG9naW5PdHBcIixcbiAgICAgICAgICAgIHBhcmFtczogeyBlbWFpbCB9LFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBhc3luYyBzZW5kU21zTG9naW5PdHAoeyBwaG9uZU51bWJlciwgfSkge1xuICAgICAgICBhd2FpdCB0aGlzLnByZUxvZ2luKCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuTG9naW5RdWVyaWVyLmNhbGwoe1xuICAgICAgICAgICAgcHJvY2VkdXJlTmFtZTogXCJzZW5kVGhpcmR3ZWJTbXNMb2dpbk90cFwiLFxuICAgICAgICAgICAgcGFyYW1zOiB7IHBob25lTnVtYmVyIH0sXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFic3RyYWN0LWxvZ2luLmpzLm1hcCJdLCJuYW1lcyI6WyJBYnN0cmFjdExvZ2luIiwic2VuZEVtYWlsTG9naW5PdHAiLCJlbWFpbCIsInByZUxvZ2luIiwicmVzdWx0IiwiTG9naW5RdWVyaWVyIiwiY2FsbCIsInByb2NlZHVyZU5hbWUiLCJwYXJhbXMiLCJzZW5kU21zTG9naW5PdHAiLCJwaG9uZU51bWJlciIsImNvbnN0cnVjdG9yIiwiYmFzZVVybCIsInF1ZXJpZXIiLCJwb3N0TG9naW4iLCJjbGllbnQiLCJlY29zeXN0ZW0iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/in-app/web/lib/auth/abstract-login.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/in-app/web/lib/auth/base-login.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/wallets/in-app/web/lib/auth/base-login.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseLogin: function() { return /* binding */ BaseLogin; }\n/* harmony export */ });\n/* harmony import */ var _core_authentication_type_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/authentication/type.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/in-app/core/authentication/type.js\");\n/* harmony import */ var _abstract_login_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-login.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/in-app/web/lib/auth/abstract-login.js\");\n\n\n/**\n *\n */ class BaseLogin extends _abstract_login_js__WEBPACK_IMPORTED_MODULE_0__.AbstractLogin {\n    async getOauthLoginUrl(authProvider) {\n        try {\n            const result = await this.LoginQuerier.call({\n                procedureName: \"getHeadlessOauthLoginLink\",\n                params: {\n                    authProvider\n                }\n            });\n            return result;\n        } catch (e) {\n            console.error(e);\n            throw e;\n        }\n    }\n    /**\n     * @internal\n     */ async loginWithModal() {\n        await this.preLogin();\n        const result = await this.LoginQuerier.call({\n            procedureName: \"loginWithThirdwebModal\",\n            params: undefined,\n            showIframe: true\n        });\n        return this.postLogin(result);\n    }\n    /**\n     * @internal\n     */ async loginWithEmailOtp(param) {\n        let { email } = param;\n        await this.preLogin();\n        const result = await this.LoginQuerier.call({\n            procedureName: \"loginWithThirdwebModal\",\n            params: {\n                email\n            },\n            showIframe: true\n        });\n        return this.postLogin(result);\n    }\n    getOauthPopUpSizing(authProvider) {\n        switch(authProvider){\n            case _core_authentication_type_js__WEBPACK_IMPORTED_MODULE_1__.AuthProvider.FACEBOOK:\n                return \"width=715, height=555\";\n            default:\n                return \"width=350, height=500\";\n        }\n    }\n    /**\n     * @internal\n     */ async loginWithOauth(args) {\n        let win = args === null || args === void 0 ? void 0 : args.openedWindow;\n        let isWindowOpenedByFn = false;\n        if (!win) {\n            win = window.open(\"\", \"Login\", this.getOauthPopUpSizing(args.oauthProvider));\n            isWindowOpenedByFn = true;\n        }\n        if (!win) {\n            throw new Error(\"Something went wrong opening pop-up\");\n        }\n        // logout the user\n        // fetch the url to open the login window from iframe\n        const [{ loginLink }] = await Promise.all([\n            this.getOauthLoginUrl(args.oauthProvider),\n            this.preLogin()\n        ]);\n        win.location.href = loginLink;\n        // listen to result from the login window\n        const result = await new Promise((resolve, reject)=>{\n            // detect when the user closes the login window\n            const pollTimer = window.setInterval(async ()=>{\n                if (!win) {\n                    return;\n                }\n                if (win.closed) {\n                    clearInterval(pollTimer);\n                    window.removeEventListener(\"message\", messageListener);\n                    reject(new Error(\"User closed login window\"));\n                }\n            }, 1000);\n            const messageListener = async (event)=>{\n                if (event.origin !== this.baseUrl) {\n                    return;\n                }\n                if (typeof event.data !== \"object\") {\n                    reject(new Error(\"Invalid event data\"));\n                    return;\n                }\n                switch(event.data.eventType){\n                    case \"userLoginSuccess\":\n                        {\n                            window.removeEventListener(\"message\", messageListener);\n                            clearInterval(pollTimer);\n                            this.closeWindow({\n                                isWindowOpenedByFn,\n                                win,\n                                closeOpenedWindow: args === null || args === void 0 ? void 0 : args.closeOpenedWindow\n                            });\n                            if (event.data.authResult) {\n                                resolve(event.data.authResult);\n                            }\n                            break;\n                        }\n                    case \"userLoginFailed\":\n                        {\n                            window.removeEventListener(\"message\", messageListener);\n                            clearInterval(pollTimer);\n                            this.closeWindow({\n                                isWindowOpenedByFn,\n                                win,\n                                closeOpenedWindow: args === null || args === void 0 ? void 0 : args.closeOpenedWindow\n                            });\n                            reject(new Error(event.data.error));\n                            break;\n                        }\n                    case \"injectDeveloperClientId\":\n                        {\n                            var _this_ecosystem, _this_ecosystem1;\n                            win === null || win === void 0 ? void 0 : win.postMessage({\n                                eventType: \"injectDeveloperClientIdResult\",\n                                developerClientId: this.client.clientId,\n                                authOption: args.oauthProvider,\n                                partnerId: (_this_ecosystem = this.ecosystem) === null || _this_ecosystem === void 0 ? void 0 : _this_ecosystem.partnerId,\n                                ecosystemId: (_this_ecosystem1 = this.ecosystem) === null || _this_ecosystem1 === void 0 ? void 0 : _this_ecosystem1.id\n                            }, this.baseUrl);\n                            break;\n                        }\n                }\n            };\n            window.addEventListener(\"message\", messageListener);\n        });\n        return this.postLogin({\n            storedToken: {\n                ...result.storedToken,\n                shouldStoreCookieString: true\n            },\n            walletDetails: {\n                ...result.walletDetails,\n                isIframeStorageEnabled: false\n            }\n        });\n    }\n    /**\n     * @internal\n     */ async loginWithCustomJwt(param) {\n        let { encryptionKey, jwt } = param;\n        await this.preLogin();\n        const result = await this.LoginQuerier.call({\n            procedureName: \"loginWithCustomJwt\",\n            params: {\n                encryptionKey,\n                jwt\n            }\n        });\n        return this.postLogin(result);\n    }\n    /**\n     * @internal\n     */ async loginWithCustomAuthEndpoint(param) {\n        let { encryptionKey, payload } = param;\n        await this.preLogin();\n        const result = await this.LoginQuerier.call({\n            procedureName: \"loginWithCustomAuthEndpoint\",\n            params: {\n                encryptionKey,\n                payload\n            }\n        });\n        return this.postLogin(result);\n    }\n    /**\n     * @internal\n     */ async verifyEmailLoginOtp(param) {\n        let { email, otp, recoveryCode } = param;\n        const result = await this.LoginQuerier.call({\n            procedureName: \"verifyThirdwebEmailLoginOtp\",\n            params: {\n                email,\n                otp,\n                recoveryCode\n            }\n        });\n        return this.postLogin(result);\n    }\n    /**\n     * @internal\n     */ async verifySmsLoginOtp(param) {\n        let { phoneNumber, otp, recoveryCode } = param;\n        const result = await this.LoginQuerier.call({\n            procedureName: \"verifyThirdwebSmsLoginOtp\",\n            params: {\n                phoneNumber,\n                otp,\n                recoveryCode\n            }\n        });\n        return this.postLogin(result);\n    }\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"closeWindow\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: (param)=>{\n                let { isWindowOpenedByFn, win, closeOpenedWindow } = param;\n                if (isWindowOpenedByFn) {\n                    win === null || win === void 0 ? void 0 : win.close();\n                } else {\n                    if (win && closeOpenedWindow) {\n                        closeOpenedWindow(win);\n                    } else if (win) {\n                        win.close();\n                    }\n                }\n            }\n        });\n    }\n} //# sourceMappingURL=base-login.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/in-app/web/lib/auth/base-login.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/in-app/web/lib/auth/iframe-auth.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/wallets/in-app/web/lib/auth/iframe-auth.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Auth: function() { return /* binding */ Auth; }\n/* harmony export */ });\n/* harmony import */ var _utils_Storage_LocalStorage_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Storage/LocalStorage.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/in-app/web/utils/Storage/LocalStorage.js\");\n/* harmony import */ var _base_login_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base-login.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/in-app/web/lib/auth/base-login.js\");\n\n\n/**\n *\n */ class Auth {\n    async preLogin() {\n        await this.logout();\n    }\n    async postLogin(param) {\n        let { storedToken, walletDetails } = param;\n        if (storedToken.shouldStoreCookieString) {\n            await this.localStorage.saveAuthCookie(storedToken.cookieString);\n        }\n        const initializedUser = await this.onAuthSuccess({\n            storedToken,\n            walletDetails\n        });\n        return initializedUser;\n    }\n    async loginWithAuthToken(authToken, recoveryCode) {\n        await this.preLogin();\n        const result = await this.AuthQuerier.call({\n            procedureName: \"loginWithStoredTokenDetails\",\n            params: {\n                storedToken: authToken.storedToken,\n                recoveryCode\n            }\n        });\n        return this.postLogin(result);\n    }\n    /**\n     * Used to log the user into their thirdweb wallet on your platform via a myriad of auth providers\n     * @example\n     * ```typescript\n     * const thirdwebInAppWallet = new InAppWalletSdk({clientId: \"YOUR_CLIENT_ID\", chain: \"Polygon\"})\n     * try {\n     *   const user = await thirdwebInAppWallet.auth.loginWithModal();\n     *   // user is now logged in\n     * } catch (e) {\n     *   // User closed modal or something else went wrong during the authentication process\n     *   console.error(e)\n     * }\n     * ```\n     * @returns `{{user: InitializedUser}}` An InitializedUser object.\n     */ async loginWithModal() {\n        return this.BaseLogin.loginWithModal();\n    }\n    /**\n     * Used to log the user into their thirdweb wallet using email OTP\n     * @example\n     * ```typescript\n     *  // Basic Flow\n     *  const thirdwebInAppWallet = new InAppWalletSdk({clientId: \"\", chain: \"Polygon\"});\n     *  try {\n     *    // prompts user to enter the code they received\n     *    const user = await thirdwebInAppWallet.auth.loginWithThirdwebEmailOtp({ email : \"you@example.com\" });\n     *    // user is now logged in\n     *  } catch (e) {\n     *    // User closed the OTP modal or something else went wrong during the authentication process\n     *    console.error(e)\n     *  }\n     * ```\n     * @param args - args.email: We will send the email an OTP that needs to be entered in order for them to be logged in.\n     * @returns `{{user: InitializedUser}}` An InitializedUser object. See {@link InAppWalletSdk.getUser} for more\n     */ async loginWithEmailOtp(args) {\n        return this.BaseLogin.loginWithEmailOtp(args);\n    }\n    /**\n     * @internal\n     */ async loginWithCustomJwt(args) {\n        return this.BaseLogin.loginWithCustomJwt(args);\n    }\n    /**\n     * @internal\n     */ async loginWithCustomAuthEndpoint(args) {\n        return this.BaseLogin.loginWithCustomAuthEndpoint(args);\n    }\n    /**\n     * @internal\n     */ async loginWithOauth(args) {\n        return this.BaseLogin.loginWithOauth(args);\n    }\n    /**\n     * A headless way to send the users at the passed email an OTP code.\n     * You need to then call {@link Auth.verifyEmailLoginOtp} in order to complete the login process\n     * @example\n     * @param param0.email\n     * ```typescript\n     *  const thirdwebInAppWallet = new InAppWalletSdk({clientId: \"\", chain: \"Polygon\"});\n     *  // sends user an OTP code\n     * try {\n     *    await thirdwebInAppWallet.auth.sendEmailLoginOtp({ email : \"you@example.com\" });\n     * } catch(e) {\n     *    // Error Sending user's email an OTP code\n     *    console.error(e);\n     * }\n     *\n     * // Then when your user is ready to verify their OTP\n     * try {\n     *    const user = await thirdwebInAppWallet.auth.verifyEmailLoginOtp({ email: \"you@example.com\", otp: \"6-DIGIT_CODE_HERE\" });\n     * } catch(e) {\n     *    // Error verifying the OTP code\n     *    console.error(e)\n     * }\n     * ```\n     * @param param0 - param0.email We will send the email an OTP that needs to be entered in order for them to be logged in.\n     * @returns `{{ isNewUser: boolean }}` IsNewUser indicates if the user is a new user to your platform\n     * @internal\n     */ async sendEmailLoginOtp(param) {\n        let { email } = param;\n        return this.BaseLogin.sendEmailLoginOtp({\n            email\n        });\n    }\n    /**\n     * @internal\n     */ async sendSmsLoginOtp(param) {\n        let { phoneNumber } = param;\n        return this.BaseLogin.sendSmsLoginOtp({\n            phoneNumber\n        });\n    }\n    /**\n     * Used to verify the otp that the user receives from thirdweb\n     *\n     * See {@link Auth.sendEmailLoginOtp} for how the headless call flow looks like. Simply swap out the calls to `loginWithThirdwebEmailOtp` with `verifyThirdwebEmailLoginOtp`\n     * @param args - props.email We will send the email an OTP that needs to be entered in order for them to be logged in.\n     * props.otp The code that the user received in their email\n     * @returns `{{user: InitializedUser}}` An InitializedUser object containing the user's status, wallet, authDetails, and more\n     * @internal\n     */ async verifyEmailLoginOtp(args) {\n        return this.BaseLogin.verifyEmailLoginOtp(args);\n    }\n    /**\n     * @internal\n     */ async verifySmsLoginOtp(args) {\n        return this.BaseLogin.verifySmsLoginOtp(args);\n    }\n    /**\n     * Logs any existing user out of their wallet.\n     * @returns `{{success: boolean}}` true if a user is successfully logged out. false if there's no user currently logged in.\n     * @internal\n     */ async logout() {\n        const { success } = await this.AuthQuerier.call({\n            procedureName: \"logout\",\n            params: undefined\n        });\n        const isRemoveAuthCookie = await this.localStorage.removeAuthCookie();\n        const isRemoveUserId = await this.localStorage.removeWalletUserId();\n        return {\n            success: success || isRemoveAuthCookie || isRemoveUserId\n        };\n    }\n    /**\n     * Used to manage the user's auth states. This should not be instantiated directly.\n     * @internal\n     */ constructor({ client, querier, onAuthSuccess, ecosystem, baseUrl }){\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"AuthQuerier\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"localStorage\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"onAuthSuccess\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"BaseLogin\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.client = client;\n        this.AuthQuerier = querier;\n        this.localStorage = new _utils_Storage_LocalStorage_js__WEBPACK_IMPORTED_MODULE_0__.LocalStorage({\n            clientId: client.clientId,\n            ecosystemId: ecosystem === null || ecosystem === void 0 ? void 0 : ecosystem.id\n        });\n        this.onAuthSuccess = onAuthSuccess;\n        this.BaseLogin = new _base_login_js__WEBPACK_IMPORTED_MODULE_1__.BaseLogin({\n            postLogin: async (result)=>{\n                return this.postLogin(result);\n            },\n            preLogin: async ()=>{\n                await this.preLogin();\n            },\n            ecosystem,\n            querier: querier,\n            client,\n            baseUrl\n        });\n    }\n} //# sourceMappingURL=iframe-auth.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/in-app/web/lib/auth/iframe-auth.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/in-app/web/lib/in-app-account.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/wallets/in-app/web/lib/in-app-account.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IFrameWallet: function() { return /* binding */ IFrameWallet; }\n/* harmony export */ });\n/* harmony import */ var _chains_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../chains/utils.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/chains/utils.js\");\n/* harmony import */ var _rpc_actions_eth_sendRawTransaction_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../rpc/actions/eth_sendRawTransaction.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/rpc/actions/eth_sendRawTransaction.js\");\n/* harmony import */ var _rpc_rpc_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../rpc/rpc.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/rpc/rpc.js\");\n/* harmony import */ var _utils_encoding_hex_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../utils/encoding/hex.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/encoding/hex.js\");\n/* harmony import */ var _utils_signatures_helpers_parseTypedData_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../utils/signatures/helpers/parseTypedData.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/signatures/helpers/parseTypedData.js\");\n/* harmony import */ var _ecosystem_get_ecosystem_partner_permissions_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../ecosystem/get-ecosystem-partner-permissions.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/ecosystem/get-ecosystem-partner-permissions.js\");\n/* harmony import */ var _core_authentication_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/authentication/type.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/in-app/core/authentication/type.js\");\n/* harmony import */ var _utils_Storage_LocalStorage_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/Storage/LocalStorage.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/in-app/web/utils/Storage/LocalStorage.js\");\n\n\n\n\n\n\n\n\n/**\n *\n */ class IFrameWallet {\n    /**\n     * Used to set-up the user device in the case that they are using incognito\n     * @returns `{walletAddress : string }` The user's wallet details\n     * @internal\n     */ async postWalletSetUp(param) {\n        let { deviceShareStored, walletAddress, isIframeStorageEnabled, walletUserId } = param;\n        if (!isIframeStorageEnabled) {\n            await this.localStorage.saveDeviceShare(deviceShareStored, walletUserId);\n        }\n        return {\n            walletAddress\n        };\n    }\n    /**\n     * Gets the various status states of the user\n     * @example\n     * ```typescript\n     *  const userStatus = await Paper.getUserWalletStatus();\n     *  switch (userStatus.status) {\n     *  case UserWalletStatus.LOGGED_OUT: {\n     *    // User is logged out, call one of the auth methods on Paper.auth to authenticate the user\n     *    break;\n     *  }\n     *  case UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED: {\n     *    // User is logged in, but does not have a wallet associated with it\n     *    // you also have access to the user's details\n     *    userStatus.user.authDetails;\n     *    break;\n     *  }\n     *  case UserWalletStatus.LOGGED_IN_NEW_DEVICE: {\n     *    // User is logged in and created a wallet already, but is missing the device shard\n     *    // You have access to:\n     *    userStatus.user.authDetails;\n     *    userStatus.user.walletAddress;\n     *    break;\n     *  }\n     *  case UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED: {\n     *    // user is logged in and wallet is all set up.\n     *    // You have access to:\n     *    userStatus.user.authDetails;\n     *    userStatus.user.walletAddress;\n     *    userStatus.user.wallet;\n     *    break;\n     *  }\n     *}\n     *```\n     * @returns `{GetUserWalletStatusFnReturnType}` an object to containing various information on the user statuses\n     * @internal\n     */ async getUserWalletStatus() {\n        const userStatus = await this.walletManagerQuerier.call({\n            procedureName: \"getUserStatus\",\n            params: undefined\n        });\n        if (userStatus.status === _core_authentication_type_js__WEBPACK_IMPORTED_MODULE_0__.UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED) {\n            return {\n                status: _core_authentication_type_js__WEBPACK_IMPORTED_MODULE_0__.UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED,\n                ...userStatus.user,\n                account: await this.getAccount()\n            };\n        }\n        if (userStatus.status === _core_authentication_type_js__WEBPACK_IMPORTED_MODULE_0__.UserWalletStatus.LOGGED_IN_NEW_DEVICE) {\n            return {\n                status: _core_authentication_type_js__WEBPACK_IMPORTED_MODULE_0__.UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED,\n                ...userStatus.user\n            };\n        }\n        if (userStatus.status === _core_authentication_type_js__WEBPACK_IMPORTED_MODULE_0__.UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED) {\n            return {\n                status: _core_authentication_type_js__WEBPACK_IMPORTED_MODULE_0__.UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED,\n                ...userStatus.user\n            };\n        }\n        // Logged out\n        return {\n            status: userStatus.status\n        };\n    }\n    /**\n     * Returns an account that communicates with the iFrame for signing operations\n     * @internal\n     */ async getAccount() {\n        var _this_ecosystem, _this_ecosystem1, _this_ecosystem2;\n        const querier = this.walletManagerQuerier;\n        const client = this.client;\n        const partnerId = (_this_ecosystem = this.ecosystem) === null || _this_ecosystem === void 0 ? void 0 : _this_ecosystem.partnerId;\n        const isEcosystem = !!this.ecosystem;\n        const permissions = ((_this_ecosystem1 = this.ecosystem) === null || _this_ecosystem1 === void 0 ? void 0 : _this_ecosystem1.partnerId) ? await (0,_ecosystem_get_ecosystem_partner_permissions_js__WEBPACK_IMPORTED_MODULE_1__.getEcosystemPartnerPermissions)(this.ecosystem.id, (_this_ecosystem2 = this.ecosystem) === null || _this_ecosystem2 === void 0 ? void 0 : _this_ecosystem2.partnerId) : undefined;\n        const { address } = await querier.call({\n            procedureName: \"getAddress\",\n            params: undefined\n        });\n        const _signTransaction = async (tx)=>{\n            var _tx_to;\n            // biome-ignore lint/suspicious/noExplicitAny: ethers tx transformation\n            const transaction = {\n                to: (_tx_to = tx.to) !== null && _tx_to !== void 0 ? _tx_to : undefined,\n                data: tx.data,\n                value: tx.value,\n                gasLimit: tx.gas,\n                nonce: tx.nonce,\n                chainId: tx.chainId\n            };\n            if (tx.maxFeePerGas) {\n                // ethers (in the iframe) rejects any type 0 trasaction with unknown keys\n                // TODO remove this once iframe is upgraded to v5\n                transaction.accessList = tx.accessList;\n                transaction.maxFeePerGas = tx.maxFeePerGas;\n                transaction.maxPriorityFeePerGas = tx.maxPriorityFeePerGas;\n                transaction.type = 2;\n            } else {\n                transaction.gasPrice = tx.gasPrice;\n                transaction.type = 0;\n            }\n            const { signedTransaction } = await querier.call({\n                procedureName: \"signTransaction\",\n                params: {\n                    transaction,\n                    chainId: tx.chainId,\n                    partnerId,\n                    rpcEndpoint: \"https://\".concat(tx.chainId, \".rpc.thirdweb.com\")\n                },\n                // Can hide the iframe if the partner has full control (no user approvals)\n                showIframe: (permissions === null || permissions === void 0 ? void 0 : permissions.permissions.includes(\"FULL_CONTROL_V1\")) ? false : isEcosystem\n            });\n            return signedTransaction;\n        };\n        return {\n            address,\n            async signTransaction (tx) {\n                if (!tx.chainId) {\n                    throw new Error(\"chainId required in tx to sign\");\n                }\n                return _signTransaction({\n                    ...tx,\n                    chainId: tx.chainId\n                });\n            },\n            async sendTransaction (tx) {\n                const rpcRequest = (0,_rpc_rpc_js__WEBPACK_IMPORTED_MODULE_2__.getRpcClient)({\n                    client,\n                    chain: (0,_chains_utils_js__WEBPACK_IMPORTED_MODULE_3__.getCachedChain)(tx.chainId)\n                });\n                const signedTx = await _signTransaction(tx);\n                const transactionHash = await (0,_rpc_actions_eth_sendRawTransaction_js__WEBPACK_IMPORTED_MODULE_4__.eth_sendRawTransaction)(rpcRequest, signedTx);\n                return {\n                    transactionHash\n                };\n            },\n            async signMessage (param) {\n                let { message } = param;\n                // in-app wallets use ethers to sign messages, which always expects a string (or bytes maybe but string is safest)\n                const messageDecoded = (()=>{\n                    if (typeof message === \"string\") {\n                        return message;\n                    }\n                    if (message.raw instanceof Uint8Array) {\n                        return message.raw;\n                    }\n                    return (0,_utils_encoding_hex_js__WEBPACK_IMPORTED_MODULE_5__.hexToString)(message.raw);\n                })();\n                const { signedMessage } = await querier.call({\n                    procedureName: \"signMessage\",\n                    params: {\n                        // biome-ignore lint/suspicious/noExplicitAny: ethers tx transformation\n                        message: messageDecoded,\n                        partnerId,\n                        chainId: 1\n                    },\n                    // Can hide the iframe if the partner has full control (no user approvals)\n                    showIframe: (permissions === null || permissions === void 0 ? void 0 : permissions.permissions.includes(\"FULL_CONTROL_V1\")) ? false : isEcosystem\n                });\n                return signedMessage;\n            },\n            async signTypedData (_typedData) {\n                var _parsedTypedData_types;\n                const parsedTypedData = (0,_utils_signatures_helpers_parseTypedData_js__WEBPACK_IMPORTED_MODULE_6__.parseTypedData)(_typedData);\n                // deleting EIP712 Domain as it results in ambiguous primary type on some cases\n                // this happens when going from viem to ethers via the iframe\n                if ((_parsedTypedData_types = parsedTypedData.types) === null || _parsedTypedData_types === void 0 ? void 0 : _parsedTypedData_types.EIP712Domain) {\n                    parsedTypedData.types.EIP712Domain = undefined;\n                }\n                const domain = parsedTypedData.domain;\n                const chainId = (domain === null || domain === void 0 ? void 0 : domain.chainId) || 1;\n                const { signedTypedData } = await querier.call({\n                    procedureName: \"signTypedDataV4\",\n                    params: {\n                        domain: {\n                            chainId: chainId,\n                            verifyingContract: domain === null || domain === void 0 ? void 0 : domain.verifyingContract,\n                            name: domain === null || domain === void 0 ? void 0 : domain.name,\n                            version: domain === null || domain === void 0 ? void 0 : domain.version\n                        },\n                        types: parsedTypedData.types,\n                        message: parsedTypedData.message,\n                        chainId,\n                        partnerId,\n                        rpcEndpoint: \"https://\".concat(chainId, \".rpc.thirdweb.com\")\n                    },\n                    // Can hide the iframe if the partner has full control (no user approvals)\n                    showIframe: (permissions === null || permissions === void 0 ? void 0 : permissions.permissions.includes(\"FULL_CONTROL_V1\")) ? false : isEcosystem\n                });\n                return signedTypedData;\n            }\n        };\n    }\n    /**\n     * Not meant to be initialized directly. Call {@link initializeUser} to get an instance\n     * @internal\n     */ constructor({ client, ecosystem, querier }){\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"ecosystem\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"walletManagerQuerier\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"localStorage\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.client = client;\n        this.ecosystem = ecosystem;\n        this.walletManagerQuerier = querier;\n        this.localStorage = new _utils_Storage_LocalStorage_js__WEBPACK_IMPORTED_MODULE_7__.LocalStorage({\n            clientId: client.clientId,\n            ecosystemId: ecosystem === null || ecosystem === void 0 ? void 0 : ecosystem.id\n        });\n    }\n} //# sourceMappingURL=in-app-account.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/in-app/web/lib/in-app-account.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/in-app/web/lib/web-connector.js":
/*!********************************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/wallets/in-app/web/lib/web-connector.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InAppWebConnector: function() { return /* binding */ InAppWebConnector; }\n/* harmony export */ });\n/* harmony import */ var _utils_domains_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../utils/domains.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/domains.js\");\n/* harmony import */ var _core_authentication_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/authentication/type.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/in-app/core/authentication/type.js\");\n/* harmony import */ var _utils_iFrameCommunication_InAppWalletIframeCommunicator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/iFrameCommunication/InAppWalletIframeCommunicator.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/in-app/web/utils/iFrameCommunication/InAppWalletIframeCommunicator.js\");\n/* harmony import */ var _auth_iframe_auth_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./auth/iframe-auth.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/in-app/web/lib/auth/iframe-auth.js\");\n/* harmony import */ var _auth_passkeys_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./auth/passkeys.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/in-app/web/lib/auth/passkeys.js\");\n/* harmony import */ var _in_app_account_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./in-app-account.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/in-app/web/lib/in-app-account.js\");\n\n\n\n\n\n\n/**\n * @internal\n */ class InAppWebConnector {\n    isClientIdLegacyPaper(clientId) {\n        if (clientId.indexOf(\"-\") > 0 && clientId.length === 36) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Gets the usr if they are logged in\n     * @example\n     * ```js\n     *  const user = await thirdwebInAppWallet.getUser();\n     *  switch (user.status) {\n     *     case UserWalletStatus.LOGGED_OUT: {\n     *       // User is logged out, call one of the auth methods on thirdwebInAppWallet.auth to authenticate the user\n     *       break;\n     *     }\n     *     case UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED: {\n     *       // user is logged in and wallet is all set up.\n     *       // You have access to:\n     *       user.status;\n     *       user.authDetails;\n     *       user.walletAddress;\n     *       user.wallet;\n     *       break;\n     *     }\n     * }\n     * ```\n     * @returns GetUser - an object to containing various information on the user statuses\n     */ async getUser() {\n        return this.wallet.getUserWalletStatus();\n    }\n    getAccount() {\n        return this.wallet.getAccount();\n    }\n    async preAuthenticate(args) {\n        const strategy = args.strategy;\n        switch(strategy){\n            case \"email\":\n                {\n                    return this.auth.sendEmailLoginOtp({\n                        email: args.email\n                    });\n                }\n            case \"phone\":\n                {\n                    return this.auth.sendSmsLoginOtp({\n                        phoneNumber: args.phoneNumber\n                    });\n                }\n            default:\n                assertUnreachable(strategy, \"Provider: \".concat(strategy, \" doesn't require pre-authentication\"));\n        }\n    }\n    async authenticate(args) {\n        const strategy = args.strategy;\n        switch(strategy){\n            case \"email\":\n                {\n                    return await this.auth.verifyEmailLoginOtp({\n                        email: args.email,\n                        otp: args.verificationCode\n                    });\n                }\n            case \"phone\":\n                {\n                    return await this.auth.verifySmsLoginOtp({\n                        otp: args.verificationCode,\n                        phoneNumber: args.phoneNumber\n                    });\n                }\n            case \"apple\":\n            case \"facebook\":\n            case \"google\":\n                {\n                    const oauthProvider = _core_authentication_type_js__WEBPACK_IMPORTED_MODULE_0__.oauthStrategyToAuthProvider[strategy];\n                    return this.auth.loginWithOauth({\n                        oauthProvider,\n                        closeOpenedWindow: args.closeOpenedWindow,\n                        openedWindow: args.openedWindow\n                    });\n                }\n            case \"jwt\":\n                {\n                    return this.auth.loginWithCustomJwt({\n                        jwt: args.jwt,\n                        encryptionKey: args.encryptionKey\n                    });\n                }\n            case \"auth_endpoint\":\n                {\n                    return this.auth.loginWithCustomAuthEndpoint({\n                        payload: args.payload,\n                        encryptionKey: args.encryptionKey\n                    });\n                }\n            case \"iframe_email_verification\":\n                {\n                    return this.auth.loginWithEmailOtp({\n                        email: args.email\n                    });\n                }\n            case \"iframe\":\n                {\n                    return this.auth.loginWithModal();\n                }\n            case \"passkey\":\n                {\n                    if (args.type === \"sign-up\") {\n                        const authToken = await (0,_auth_passkeys_js__WEBPACK_IMPORTED_MODULE_1__.registerPasskey)({\n                            client: this.wallet.client,\n                            ecosystem: this.wallet.ecosystem,\n                            authenticatorType: args.authenticatorType,\n                            username: args.passkeyName\n                        });\n                        return this.auth.loginWithAuthToken(authToken);\n                    }\n                    const authToken = await (0,_auth_passkeys_js__WEBPACK_IMPORTED_MODULE_1__.loginWithPasskey)({\n                        client: this.wallet.client,\n                        ecosystem: this.wallet.ecosystem,\n                        authenticatorType: args.authenticatorType\n                    });\n                    return this.auth.loginWithAuthToken(authToken);\n                }\n            default:\n                assertUnreachable(strategy);\n        }\n    }\n    async logout() {\n        return await this.auth.logout();\n    }\n    /**\n     * @example\n     * `const thirdwebInAppWallet = new InAppWalletSdk({ clientId: \"\", chain: \"Goerli\" });`\n     * @internal\n     */ constructor({ client, onAuthSuccess, ecosystem }){\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"querier\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"wallet\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * Used to manage the Auth state of the user.\n         */ Object.defineProperty(this, \"auth\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (this.isClientIdLegacyPaper(client.clientId)) {\n            throw new Error(\"You are using a legacy clientId. Please use the clientId found on the thirdweb dashboard settings page\");\n        }\n        const baseUrl = (0,_utils_domains_js__WEBPACK_IMPORTED_MODULE_2__.getThirdwebBaseUrl)(\"inAppWallet\");\n        this.client = client;\n        this.querier = new _utils_iFrameCommunication_InAppWalletIframeCommunicator_js__WEBPACK_IMPORTED_MODULE_3__.InAppWalletIframeCommunicator({\n            clientId: client.clientId,\n            ecosystem,\n            baseUrl\n        });\n        this.wallet = new _in_app_account_js__WEBPACK_IMPORTED_MODULE_4__.IFrameWallet({\n            client,\n            ecosystem,\n            querier: this.querier\n        });\n        this.auth = new _auth_iframe_auth_js__WEBPACK_IMPORTED_MODULE_5__.Auth({\n            client,\n            querier: this.querier,\n            baseUrl,\n            ecosystem,\n            onAuthSuccess: async (authResult)=>{\n                onAuthSuccess === null || onAuthSuccess === void 0 ? void 0 : onAuthSuccess(authResult);\n                await this.wallet.postWalletSetUp({\n                    ...authResult.walletDetails,\n                    walletUserId: authResult.storedToken.authDetails.userWalletId\n                });\n                await this.querier.call({\n                    procedureName: \"initIframe\",\n                    params: {\n                        partnerId: ecosystem === null || ecosystem === void 0 ? void 0 : ecosystem.partnerId,\n                        ecosystemId: ecosystem === null || ecosystem === void 0 ? void 0 : ecosystem.id,\n                        deviceShareStored: authResult.walletDetails.deviceShareStored,\n                        clientId: this.client.clientId,\n                        walletUserId: authResult.storedToken.authDetails.userWalletId,\n                        authCookie: authResult.storedToken.cookieString\n                    }\n                });\n                return {\n                    user: {\n                        status: _core_authentication_type_js__WEBPACK_IMPORTED_MODULE_0__.UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED,\n                        authDetails: authResult.storedToken.authDetails,\n                        account: await this.wallet.getAccount(),\n                        walletAddress: authResult.walletDetails.walletAddress\n                    }\n                };\n            }\n        });\n    }\n}\nfunction assertUnreachable(x, message) {\n    throw new Error(message !== null && message !== void 0 ? message : \"Invalid param: \".concat(x));\n} //# sourceMappingURL=web-connector.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/in-app/web/lib/web-connector.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/in-app/web/utils/iFrameCommunication/IframeCommunicator.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/wallets/in-app/web/utils/iFrameCommunication/IframeCommunicator.js ***!
  \***********************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IframeCommunicator: function() { return /* binding */ IframeCommunicator; }\n/* harmony export */ });\nfunction sleep(seconds) {\n    return new Promise((resolve)=>{\n        setTimeout(resolve, seconds * 1000);\n    });\n}\nconst iframeBaseStyle = {\n    height: \"100%\",\n    width: \"100%\",\n    border: \"none\",\n    backgroundColor: \"transparent\",\n    colorScheme: \"light\",\n    position: \"fixed\",\n    top: \"0px\",\n    right: \"0px\",\n    zIndex: \"2147483646\",\n    display: \"none\"\n};\n// Global var to help track iframe state\nconst isIframeLoaded = new Map();\n/**\n * @internal\n */ // biome-ignore lint/suspicious/noExplicitAny: TODO: fix later\nclass IframeCommunicator {\n    // biome-ignore lint/suspicious/noExplicitAny: TODO: fix later\n    async onIframeLoadedInitVariables() {\n        return {};\n    }\n    /**\n     * @internal\n     */ onIframeLoadHandler(iframe, onIframeInitialize) {\n        return async ()=>{\n            var _iframe_contentWindow;\n            const channel = new MessageChannel();\n            const promise = new Promise((res, rej)=>{\n                // biome-ignore lint/suspicious/noExplicitAny: TODO: fix later\n                channel.port1.onmessage = (event)=>{\n                    const { data } = event;\n                    channel.port1.close();\n                    if (!data.success) {\n                        rej(new Error(data.error));\n                    }\n                    isIframeLoaded.set(iframe.src, true);\n                    if (onIframeInitialize) {\n                        onIframeInitialize();\n                    }\n                    res(true);\n                };\n            });\n            const INIT_IFRAME_EVENT = \"initIframe\";\n            iframe === null || iframe === void 0 ? void 0 : (_iframe_contentWindow = iframe.contentWindow) === null || _iframe_contentWindow === void 0 ? void 0 : _iframe_contentWindow.postMessage(// ? We initialise the iframe with a bunch\n            // of useful information so that we don't have to pass it\n            // through in each of the future call. This would be where we do it.\n            {\n                eventType: INIT_IFRAME_EVENT,\n                data: await this.onIframeLoadedInitVariables()\n            }, this.iframeBaseUrl, [\n                channel.port2\n            ]);\n            await promise;\n        };\n    }\n    /**\n     * @internal\n     */ async call(param) {\n        let { procedureName, params, showIframe = false } = param;\n        var _this_iframe_contentWindow;\n        while(!isIframeLoaded.get(this.iframe.src)){\n            await sleep(this.POLLING_INTERVAL_SECONDS);\n        }\n        if (showIframe) {\n            this.iframe.style.display = \"block\";\n            // magic number to let the display render before performing the animation of the modal in\n            await sleep(0.005);\n        }\n        const channel = new MessageChannel();\n        const promise = new Promise((res, rej)=>{\n            // biome-ignore lint/suspicious/noExplicitAny: TODO: fix later\n            channel.port1.onmessage = async (event)=>{\n                const { data } = event;\n                channel.port1.close();\n                if (showIframe) {\n                    // magic number to let modal fade out before hiding it\n                    await sleep(0.1);\n                    this.iframe.style.display = \"none\";\n                }\n                if (!data.success) {\n                    rej(new Error(data.error));\n                } else {\n                    res(data.data);\n                }\n            };\n        });\n        (_this_iframe_contentWindow = this.iframe.contentWindow) === null || _this_iframe_contentWindow === void 0 ? void 0 : _this_iframe_contentWindow.postMessage({\n            eventType: procedureName,\n            data: params\n        }, this.iframeBaseUrl, [\n            channel.port2\n        ]);\n        return promise;\n    }\n    /**\n     * This has to be called by any iframe that will be removed from the DOM.\n     * Use to make sure that we reset the global loaded state of the particular iframe.src\n     * @internal\n     */ destroy() {\n        isIframeLoaded.delete(this.iframe.src);\n    }\n    /**\n     * @internal\n     */ constructor({ link, baseUrl, iframeId, container = document.body, onIframeInitialize }){\n        Object.defineProperty(this, \"iframe\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"POLLING_INTERVAL_SECONDS\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1.4\n        });\n        Object.defineProperty(this, \"iframeBaseUrl\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.iframeBaseUrl = baseUrl;\n        // Creating the IFrame element for communication\n        let iframe = document.getElementById(iframeId);\n        const hrefLink = new URL(link);\n        // TODO (ew) - bring back version tracking\n        // const sdkVersion = process.env.THIRDWEB_EWS_SDK_VERSION;\n        // if (!sdkVersion) {\n        //   throw new Error(\"Missing THIRDWEB_EWS_SDK_VERSION env var\");\n        // }\n        // hrefLink.searchParams.set(\"sdkVersion\", sdkVersion);\n        if (!iframe || iframe.src !== hrefLink.href) {\n            // ! Do not update the hrefLink here or it'll cause multiple re-renders\n            iframe = document.createElement(\"iframe\");\n            const mergedIframeStyles = {\n                ...iframeBaseStyle\n            };\n            Object.assign(iframe.style, mergedIframeStyles);\n            iframe.setAttribute(\"id\", iframeId);\n            iframe.setAttribute(\"fetchpriority\", \"high\");\n            container.appendChild(iframe);\n            iframe.src = hrefLink.href;\n            // iframe.setAttribute(\"data-version\", sdkVersion);\n            // biome-ignore lint/suspicious/noExplicitAny: TODO: fix later\n            const onIframeLoaded = (event)=>{\n                if (event.data.eventType === \"ewsIframeLoaded\") {\n                    window.removeEventListener(\"message\", onIframeLoaded);\n                    if (!iframe) {\n                        console.warn(\"thirdweb iFrame not found\");\n                        return;\n                    }\n                    this.onIframeLoadHandler(iframe, onIframeInitialize)();\n                }\n            };\n            window.addEventListener(\"message\", onIframeLoaded);\n        }\n        this.iframe = iframe;\n    }\n} //# sourceMappingURL=IframeCommunicator.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/in-app/web/utils/iFrameCommunication/IframeCommunicator.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/in-app/web/utils/iFrameCommunication/InAppWalletIframeCommunicator.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/wallets/in-app/web/utils/iFrameCommunication/InAppWalletIframeCommunicator.js ***!
  \**********************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IN_APP_WALLET_IFRAME_ID: function() { return /* binding */ IN_APP_WALLET_IFRAME_ID; },\n/* harmony export */   InAppWalletIframeCommunicator: function() { return /* binding */ InAppWalletIframeCommunicator; },\n/* harmony export */   createInAppWalletIframeLink: function() { return /* binding */ createInAppWalletIframeLink; }\n/* harmony export */ });\n/* harmony import */ var _core_constants_settings_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../core/constants/settings.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/in-app/core/constants/settings.js\");\n/* harmony import */ var _Storage_LocalStorage_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Storage/LocalStorage.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/in-app/web/utils/Storage/LocalStorage.js\");\n/* harmony import */ var _IframeCommunicator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./IframeCommunicator.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/in-app/web/utils/iFrameCommunication/IframeCommunicator.js\");\n\n\n\n/**\n * @internal\n */ class InAppWalletIframeCommunicator extends _IframeCommunicator_js__WEBPACK_IMPORTED_MODULE_0__.IframeCommunicator {\n    /**\n     * @internal\n     */ async onIframeLoadedInitVariables() {\n        var _this_ecosystem, _this_ecosystem1, _this_ecosystem2;\n        const localStorage = new _Storage_LocalStorage_js__WEBPACK_IMPORTED_MODULE_1__.LocalStorage({\n            clientId: this.clientId,\n            ecosystemId: (_this_ecosystem = this.ecosystem) === null || _this_ecosystem === void 0 ? void 0 : _this_ecosystem.id\n        });\n        return {\n            authCookie: await localStorage.getAuthCookie(),\n            deviceShareStored: await localStorage.getDeviceShare(),\n            walletUserId: await localStorage.getWalletUserId(),\n            clientId: this.clientId,\n            partnerId: (_this_ecosystem1 = this.ecosystem) === null || _this_ecosystem1 === void 0 ? void 0 : _this_ecosystem1.partnerId,\n            ecosystemId: (_this_ecosystem2 = this.ecosystem) === null || _this_ecosystem2 === void 0 ? void 0 : _this_ecosystem2.id\n        };\n    }\n    /**\n     * @internal\n     */ constructor({ clientId, baseUrl, ecosystem }){\n        super({\n            iframeId: IN_APP_WALLET_IFRAME_ID + ((ecosystem === null || ecosystem === void 0 ? void 0 : ecosystem.id) || \"\"),\n            link: createInAppWalletIframeLink({\n                clientId,\n                path: _core_constants_settings_js__WEBPACK_IMPORTED_MODULE_2__.IN_APP_WALLET_PATH,\n                ecosystem,\n                baseUrl\n            }).href,\n            baseUrl,\n            container: document.body\n        });\n        Object.defineProperty(this, \"clientId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"ecosystem\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.clientId = clientId;\n        this.ecosystem = ecosystem;\n    }\n}\n// This is the URL and ID tag of the iFrame that we communicate with\n/**\n * @internal\n */ function createInAppWalletIframeLink(param) {\n    let { clientId, baseUrl, path, ecosystem, queryParams } = param;\n    const inAppWalletUrl = new URL(\"\".concat(path), baseUrl);\n    if (queryParams) {\n        for (const queryKey of Object.keys(queryParams)){\n            var _queryParams_queryKey;\n            inAppWalletUrl.searchParams.set(queryKey, ((_queryParams_queryKey = queryParams[queryKey]) === null || _queryParams_queryKey === void 0 ? void 0 : _queryParams_queryKey.toString()) || \"\");\n        }\n    }\n    inAppWalletUrl.searchParams.set(\"clientId\", clientId);\n    if ((ecosystem === null || ecosystem === void 0 ? void 0 : ecosystem.partnerId) !== undefined) {\n        inAppWalletUrl.searchParams.set(\"partnerId\", ecosystem.partnerId);\n    }\n    if ((ecosystem === null || ecosystem === void 0 ? void 0 : ecosystem.id) !== undefined) {\n        inAppWalletUrl.searchParams.set(\"ecosystemId\", ecosystem.id);\n    }\n    return inAppWalletUrl;\n}\nconst IN_APP_WALLET_IFRAME_ID = \"thirdweb-in-app-wallet-iframe\"; //# sourceMappingURL=InAppWalletIframeCommunicator.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS93YWxsZXRzL2luLWFwcC93ZWIvdXRpbHMvaUZyYW1lQ29tbXVuaWNhdGlvbi9JbkFwcFdhbGxldElmcmFtZUNvbW11bmljYXRvci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBeUU7QUFDZjtBQUNHO0FBQzdEOztDQUVDLEdBQ00sTUFBTUcsc0NBQXNDRCxzRUFBa0JBO0lBK0JqRTs7S0FFQyxHQUNELE1BQU1FLDhCQUE4QjtZQUdmLGlCQU9GLGtCQUNFO1FBVmpCLE1BQU1DLGVBQWUsSUFBSUosa0VBQVlBLENBQUM7WUFDbENLLFVBQVUsSUFBSSxDQUFDQSxRQUFRO1lBQ3ZCQyxXQUFXLEdBQUUsc0JBQUksQ0FBQ0MsU0FBUyxjQUFkLHNEQUFnQkMsRUFBRTtRQUNuQztRQUNBLE9BQU87WUFDSEMsWUFBWSxNQUFNTCxhQUFhTSxhQUFhO1lBQzVDQyxtQkFBbUIsTUFBTVAsYUFBYVEsY0FBYztZQUNwREMsY0FBYyxNQUFNVCxhQUFhVSxlQUFlO1lBQ2hEVCxVQUFVLElBQUksQ0FBQ0EsUUFBUTtZQUN2QlUsU0FBUyxHQUFFLHVCQUFJLENBQUNSLFNBQVMsY0FBZCx3REFBZ0JRLFNBQVM7WUFDcENULFdBQVcsR0FBRSx1QkFBSSxDQUFDQyxTQUFTLGNBQWQsd0RBQWdCQyxFQUFFO1FBQ25DO0lBQ0o7SUE5Q0E7O0tBRUMsR0FDRFEsWUFBWSxFQUFFWCxRQUFRLEVBQUVZLE9BQU8sRUFBRVYsU0FBUyxFQUFHLENBQUU7UUFDM0MsS0FBSyxDQUFDO1lBQ0ZXLFVBQVVDLDBCQUEyQlosQ0FBQUEsQ0FBQUEsc0JBQUFBLGdDQUFBQSxVQUFXQyxFQUFFLEtBQUksRUFBQztZQUN2RFksTUFBTUMsNEJBQTRCO2dCQUM5QmhCO2dCQUNBaUIsTUFBTXZCLDJFQUFrQkE7Z0JBQ3hCUTtnQkFDQVU7WUFDSixHQUFHTSxJQUFJO1lBQ1BOO1lBQ0FPLFdBQVdDLFNBQVNDLElBQUk7UUFDNUI7UUFDQUMsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxZQUFZO1lBQ3BDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxhQUFhO1lBQ3JDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQSxJQUFJLENBQUMzQixRQUFRLEdBQUdBO1FBQ2hCLElBQUksQ0FBQ0UsU0FBUyxHQUFHQTtJQUNyQjtBQWtCSjtBQUNBLG9FQUFvRTtBQUNwRTs7Q0FFQyxHQUNNLFNBQVNjLDRCQUE0QixLQUFvRDtRQUFwRCxFQUFFaEIsUUFBUSxFQUFFWSxPQUFPLEVBQUVLLElBQUksRUFBRWYsU0FBUyxFQUFFMEIsV0FBVyxFQUFHLEdBQXBEO0lBQ3hDLE1BQU1DLGlCQUFpQixJQUFJQyxJQUFJLEdBQVEsT0FBTGIsT0FBUUw7SUFDMUMsSUFBSWdCLGFBQWE7UUFDYixLQUFLLE1BQU1HLFlBQVlULE9BQU9VLElBQUksQ0FBQ0osYUFBYztnQkFDSEE7WUFBMUNDLGVBQWVJLFlBQVksQ0FBQ0MsR0FBRyxDQUFDSCxVQUFVSCxFQUFBQSx3QkFBQUEsV0FBVyxDQUFDRyxTQUFTLGNBQXJCSCw0Q0FBQUEsc0JBQXVCTyxRQUFRLE9BQU07UUFDbkY7SUFDSjtJQUNBTixlQUFlSSxZQUFZLENBQUNDLEdBQUcsQ0FBQyxZQUFZbEM7SUFDNUMsSUFBSUUsQ0FBQUEsc0JBQUFBLGdDQUFBQSxVQUFXUSxTQUFTLE1BQUswQixXQUFXO1FBQ3BDUCxlQUFlSSxZQUFZLENBQUNDLEdBQUcsQ0FBQyxhQUFhaEMsVUFBVVEsU0FBUztJQUNwRTtJQUNBLElBQUlSLENBQUFBLHNCQUFBQSxnQ0FBQUEsVUFBV0MsRUFBRSxNQUFLaUMsV0FBVztRQUM3QlAsZUFBZUksWUFBWSxDQUFDQyxHQUFHLENBQUMsZUFBZWhDLFVBQVVDLEVBQUU7SUFDL0Q7SUFDQSxPQUFPMEI7QUFDWDtBQUNPLE1BQU1mLDBCQUEwQixnQ0FBZ0MsQ0FDdkUseURBQXlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS93YWxsZXRzL2luLWFwcC93ZWIvdXRpbHMvaUZyYW1lQ29tbXVuaWNhdGlvbi9JbkFwcFdhbGxldElmcmFtZUNvbW11bmljYXRvci5qcz9iMmU0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElOX0FQUF9XQUxMRVRfUEFUSCB9IGZyb20gXCIuLi8uLi8uLi9jb3JlL2NvbnN0YW50cy9zZXR0aW5ncy5qc1wiO1xuaW1wb3J0IHsgTG9jYWxTdG9yYWdlIH0gZnJvbSBcIi4uL1N0b3JhZ2UvTG9jYWxTdG9yYWdlLmpzXCI7XG5pbXBvcnQgeyBJZnJhbWVDb21tdW5pY2F0b3IgfSBmcm9tIFwiLi9JZnJhbWVDb21tdW5pY2F0b3IuanNcIjtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjbGFzcyBJbkFwcFdhbGxldElmcmFtZUNvbW11bmljYXRvciBleHRlbmRzIElmcmFtZUNvbW11bmljYXRvciB7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoeyBjbGllbnRJZCwgYmFzZVVybCwgZWNvc3lzdGVtLCB9KSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIGlmcmFtZUlkOiBJTl9BUFBfV0FMTEVUX0lGUkFNRV9JRCArIChlY29zeXN0ZW0/LmlkIHx8IFwiXCIpLFxuICAgICAgICAgICAgbGluazogY3JlYXRlSW5BcHBXYWxsZXRJZnJhbWVMaW5rKHtcbiAgICAgICAgICAgICAgICBjbGllbnRJZCxcbiAgICAgICAgICAgICAgICBwYXRoOiBJTl9BUFBfV0FMTEVUX1BBVEgsXG4gICAgICAgICAgICAgICAgZWNvc3lzdGVtLFxuICAgICAgICAgICAgICAgIGJhc2VVcmwsXG4gICAgICAgICAgICB9KS5ocmVmLFxuICAgICAgICAgICAgYmFzZVVybCxcbiAgICAgICAgICAgIGNvbnRhaW5lcjogZG9jdW1lbnQuYm9keSxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNsaWVudElkXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImVjb3N5c3RlbVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmNsaWVudElkID0gY2xpZW50SWQ7XG4gICAgICAgIHRoaXMuZWNvc3lzdGVtID0gZWNvc3lzdGVtO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBhc3luYyBvbklmcmFtZUxvYWRlZEluaXRWYXJpYWJsZXMoKSB7XG4gICAgICAgIGNvbnN0IGxvY2FsU3RvcmFnZSA9IG5ldyBMb2NhbFN0b3JhZ2Uoe1xuICAgICAgICAgICAgY2xpZW50SWQ6IHRoaXMuY2xpZW50SWQsXG4gICAgICAgICAgICBlY29zeXN0ZW1JZDogdGhpcy5lY29zeXN0ZW0/LmlkLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGF1dGhDb29raWU6IGF3YWl0IGxvY2FsU3RvcmFnZS5nZXRBdXRoQ29va2llKCksXG4gICAgICAgICAgICBkZXZpY2VTaGFyZVN0b3JlZDogYXdhaXQgbG9jYWxTdG9yYWdlLmdldERldmljZVNoYXJlKCksXG4gICAgICAgICAgICB3YWxsZXRVc2VySWQ6IGF3YWl0IGxvY2FsU3RvcmFnZS5nZXRXYWxsZXRVc2VySWQoKSxcbiAgICAgICAgICAgIGNsaWVudElkOiB0aGlzLmNsaWVudElkLFxuICAgICAgICAgICAgcGFydG5lcklkOiB0aGlzLmVjb3N5c3RlbT8ucGFydG5lcklkLFxuICAgICAgICAgICAgZWNvc3lzdGVtSWQ6IHRoaXMuZWNvc3lzdGVtPy5pZCxcbiAgICAgICAgfTtcbiAgICB9XG59XG4vLyBUaGlzIGlzIHRoZSBVUkwgYW5kIElEIHRhZyBvZiB0aGUgaUZyYW1lIHRoYXQgd2UgY29tbXVuaWNhdGUgd2l0aFxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUluQXBwV2FsbGV0SWZyYW1lTGluayh7IGNsaWVudElkLCBiYXNlVXJsLCBwYXRoLCBlY29zeXN0ZW0sIHF1ZXJ5UGFyYW1zLCB9KSB7XG4gICAgY29uc3QgaW5BcHBXYWxsZXRVcmwgPSBuZXcgVVJMKGAke3BhdGh9YCwgYmFzZVVybCk7XG4gICAgaWYgKHF1ZXJ5UGFyYW1zKSB7XG4gICAgICAgIGZvciAoY29uc3QgcXVlcnlLZXkgb2YgT2JqZWN0LmtleXMocXVlcnlQYXJhbXMpKSB7XG4gICAgICAgICAgICBpbkFwcFdhbGxldFVybC5zZWFyY2hQYXJhbXMuc2V0KHF1ZXJ5S2V5LCBxdWVyeVBhcmFtc1txdWVyeUtleV0/LnRvU3RyaW5nKCkgfHwgXCJcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaW5BcHBXYWxsZXRVcmwuc2VhcmNoUGFyYW1zLnNldChcImNsaWVudElkXCIsIGNsaWVudElkKTtcbiAgICBpZiAoZWNvc3lzdGVtPy5wYXJ0bmVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpbkFwcFdhbGxldFVybC5zZWFyY2hQYXJhbXMuc2V0KFwicGFydG5lcklkXCIsIGVjb3N5c3RlbS5wYXJ0bmVySWQpO1xuICAgIH1cbiAgICBpZiAoZWNvc3lzdGVtPy5pZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGluQXBwV2FsbGV0VXJsLnNlYXJjaFBhcmFtcy5zZXQoXCJlY29zeXN0ZW1JZFwiLCBlY29zeXN0ZW0uaWQpO1xuICAgIH1cbiAgICByZXR1cm4gaW5BcHBXYWxsZXRVcmw7XG59XG5leHBvcnQgY29uc3QgSU5fQVBQX1dBTExFVF9JRlJBTUVfSUQgPSBcInRoaXJkd2ViLWluLWFwcC13YWxsZXQtaWZyYW1lXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1JbkFwcFdhbGxldElmcmFtZUNvbW11bmljYXRvci5qcy5tYXAiXSwibmFtZXMiOlsiSU5fQVBQX1dBTExFVF9QQVRIIiwiTG9jYWxTdG9yYWdlIiwiSWZyYW1lQ29tbXVuaWNhdG9yIiwiSW5BcHBXYWxsZXRJZnJhbWVDb21tdW5pY2F0b3IiLCJvbklmcmFtZUxvYWRlZEluaXRWYXJpYWJsZXMiLCJsb2NhbFN0b3JhZ2UiLCJjbGllbnRJZCIsImVjb3N5c3RlbUlkIiwiZWNvc3lzdGVtIiwiaWQiLCJhdXRoQ29va2llIiwiZ2V0QXV0aENvb2tpZSIsImRldmljZVNoYXJlU3RvcmVkIiwiZ2V0RGV2aWNlU2hhcmUiLCJ3YWxsZXRVc2VySWQiLCJnZXRXYWxsZXRVc2VySWQiLCJwYXJ0bmVySWQiLCJjb25zdHJ1Y3RvciIsImJhc2VVcmwiLCJpZnJhbWVJZCIsIklOX0FQUF9XQUxMRVRfSUZSQU1FX0lEIiwibGluayIsImNyZWF0ZUluQXBwV2FsbGV0SWZyYW1lTGluayIsInBhdGgiLCJocmVmIiwiY29udGFpbmVyIiwiZG9jdW1lbnQiLCJib2R5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsInF1ZXJ5UGFyYW1zIiwiaW5BcHBXYWxsZXRVcmwiLCJVUkwiLCJxdWVyeUtleSIsImtleXMiLCJzZWFyY2hQYXJhbXMiLCJzZXQiLCJ0b1N0cmluZyIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/in-app/web/utils/iFrameCommunication/InAppWalletIframeCommunicator.js\n"));

/***/ })

}]);